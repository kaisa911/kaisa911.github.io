(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{618:function(t,a,n){"use strict";n.r(a);var r=n(17),s=Object(r.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("p",[t._v("这是JS高程的第四章，讲的是变量，作用域，以及JS的内存问题。\n现在来填坑\n本节包括三个部分")]),t._v(" "),n("ul",[n("li",[t._v("基本类型和引用类型")]),t._v(" "),n("li",[t._v("执行环境")]),t._v(" "),n("li",[t._v("垃圾收集")])]),t._v(" "),n("h2",{attrs:{id:"基本类型和引用类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基本类型和引用类型"}},[t._v("#")]),t._v(" 基本类型和引用类型")]),t._v(" "),n("ul",[n("li",[t._v("基本类型值：简单的数据段，Undefined，Null，number，string，boolean五种基本类型，在操作的时候，可以操作保存在变量中实际的值。")]),t._v(" "),n("li",[t._v("引用类型的值是保存在内存中的对象。Js不允许直接访问内存的位置，也就是不允许直接操作对象的内存空间，在操作对象时，复制对象时，操作的时对象的引用，在为对象添加属性时，操作的是对象")]),t._v(" "),n("li",[t._v("传递参数\nES中所有的参数都是按值传递的。基本类型传的值就是变量的值，引用类型传的值是引用内存的地址。")])]),t._v(" "),n("h2",{attrs:{id:"执行环境与作用域"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#执行环境与作用域"}},[t._v("#")]),t._v(" 执行环境与作用域")]),t._v(" "),n("p",[t._v("全局执行环境，是最外围的一个执行环境。\n每一个函数都会有自己的执行环境。当执行流进入一个函数时，函数的环境就会被推入一个环境栈中，而在环境执行结束后，栈将其环境弹出，把控制权返回之前的执行环境。\n当代码在一个环境中执行时，会产生一个作用域链。作用域链的用途，是保证对执行环境有权访问的所有变量和函数的有序访问")]),t._v(" "),n("p",[t._v("可以通过try-catch 和 with语句来延长作用域链")]),t._v(" "),n("h2",{attrs:{id:"垃圾收集"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#垃圾收集"}},[t._v("#")]),t._v(" 垃圾收集")]),t._v(" "),n("p",[t._v("垃圾收集一般有两个策略：\n标记清楚，进入环境和弹出环境分别有标记，清除弹出环境标记的变量或者函数。\n引用计数，引用为0的会被清除")])])}),[],!1,null,null,null);a.default=s.exports}}]);