(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{681:function(e,t,s){"use strict";s.r(t);var i=s(17),n=Object(i.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[e._v("在知乎看到的，说代码要几个基础原则：\n单一原则、开闭原则、里氏代换原则、组合复用原则、接口隔离原则、 依赖倒置原则、迪米特原则。")]),e._v(" "),s("p",[e._v("学习一下，争取以后能用到。")]),e._v(" "),s("h2",{attrs:{id:"单一原则-srp-single-responsibility-principle"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单一原则-srp-single-responsibility-principle"}},[e._v("#")]),e._v(" 单一原则（SRP，Single Responsibility Principle）")]),e._v(" "),s("blockquote",[s("p",[e._v("There should never be more than one reason for a class to change。")])]),e._v(" "),s("p",[e._v("一个类（JavaScript 下是一个对象或者一个函数）应该有一组紧密相关的行为。\n遵守单一职责的好处是可以让我们很容易地来维护这个对象或者这个函数，如果一个对象或者函数封装了很多功能的话，一旦一个功能需要修改，必然会影响该对象或函数里其他功能的代码。\n我们通过解耦可以让每个功能更加有弹性地变化。")]),e._v(" "),s("p",[e._v("毕竟函数是 JavaScript 的一等公民，一个函数完成一个功能，最后叠加成了想要的系统。")]),e._v(" "),s("h2",{attrs:{id:"开闭原则-ocp-the-open-closed-principle"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开闭原则-ocp-the-open-closed-principle"}},[e._v("#")]),e._v(" 开闭原则 （OCP，The Open/Closed Principle）")]),e._v(" "),s("blockquote",[s("p",[e._v("Software entities (classes, modules, functions, etc.) should be open for extension but closed for modification.")])]),e._v(" "),s("p",[e._v("软件实体（类，模块，方法等等）应当对扩展开放，对修改关闭，即软件实体应当在不修改的前提下扩展。\n当新需求出现的时候，可以通过扩展现有模型达到目的, 不允许对该实体做任何修改。\n需要执行多样行为的实体应该设计成不需要修改就可以实现各种的变化，坚持开闭原则有利于用最少的代码进行项目维护。")]),e._v(" "),s("h2",{attrs:{id:"里氏替换原则-lsp-liskov-substitution-principle"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#里氏替换原则-lsp-liskov-substitution-principle"}},[e._v("#")]),e._v(" 里氏替换原则 （LSP Liskov Substitution Principle）")]),e._v(" "),s("blockquote",[s("p",[e._v("Subtypes must be substitutable for their base types.")])]),e._v(" "),s("p",[e._v("派生类型必须可以替换它的基类型。\n如果对每一个类型为 T1 的对象 o1，都有类型为 T2 的对象 o2，使得以 T1 定义的所有程序 P 在所有的对象 o1 都换成 o2 时，程序 P 的行为没有变化，那么类型 T2 是类型 T1 的子类型。\n更通俗的说：子类可以扩展父类的功能，但不能改变父类原有的功能。")]),e._v(" "),s("p",[e._v("里氏替换原则包含以下 4 层含义")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("- 子类可以实现父类的抽象方法，但是不能覆盖父类的非抽象方法。\n- 子类中可以增加自己特有的方法。\n- 当子类覆盖或实现父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松。\n- 当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。\n")])])]),s("h2",{attrs:{id:"如何才能使代码贴近这些原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何才能使代码贴近这些原则"}},[e._v("#")]),e._v(" 如何才能使代码贴近这些原则")]),e._v(" "),s("p",[e._v("只需要牢记，使代码保持足够简单, 还有一个，就是尽早重构～～～")])])}),[],!1,null,null,null);t.default=n.exports}}]);