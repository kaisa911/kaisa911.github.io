(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{617:function(t,n,a){"use strict";a.r(n);var s=a(17),v=Object(s.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("这是JS高程第三章的第三部分。这一章内容是真的多。。我觉得重新刷高程，对我来说，也是一种不一样的进步吧。\n本节的主要内容是")]),t._v(" "),a("ul",[a("li",[t._v("操作符")])]),t._v(" "),a("h2",{attrs:{id:"一元操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一元操作符"}},[t._v("#")]),t._v(" 一元操作符")]),t._v(" "),a("p",[t._v("只能操作一个一个值的操作符叫做"),a("b",[t._v("一元操作符")]),t._v("。\n1、递增递减操作符\n有两个版本，前置型和后置型。\n前置型，先操作，后执行。\n后置型，先执行，后操作。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" sum2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//12")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sum2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//12")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//7")]),t._v("\n")])])]),a("p",[t._v("递增递减操作符对数值，布尔，字符串，对象都有作用！！！！！\n规则如下：")]),t._v(" "),a("ul",[a("li",[t._v("如果字符串包含有效数字，则先转化成数值变量，然后加减1；不包含有效数字，则转化成NaN。字符串变量变成数值变量")]),t._v(" "),a("li",[t._v("数值变量加减1；")]),t._v(" "),a("li",[t._v("布尔变量，true先变成1，false变成0，然后加减1,布尔变了转换成数值变量；")]),t._v(" "),a("li",[t._v("对象变量，先查看valueOf()方法，如果是NaN，则调用toString()，对象转换成数值变量。")])]),t._v(" "),a("p",[t._v("2、一元加减操作符。\n一元+操作符，会像Number()方法一样对变量转换成数值变量"),a("code",[t._v("var a; a = +a")]),t._v(";\n一元-操作符，主要是变成负数。会像Number()方法一样，不过是负数。")]),t._v(" "),a("h2",{attrs:{id:"位操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#位操作符"}},[t._v("#")]),t._v(" 位操作符")]),t._v(" "),a("p",[t._v("首先ES里所有的数值都是有64位来储存，但是位操作符并不是操作64位，而是先转化成32位的整数，然后操作，再将结果转换成64位的，这样，NaN和Infinity就会变成0。\n对于有符号数，第32位是符号位，0代表正数，1代表负数，符号位决定了其他位数值的格式。剩下31位用来储存数据。\n正数都是以二进制格式存储，负数以二进制的补码格式存储。默认情况下，ES里所有的正数都是有符号数。\n无符号数，第32位是数值。但是无符号数只能是正数。\n位操作符对其他变量，会先用Number()方法变成数值，然后再按位操作。\n1、按位非（NOT）\n按位非是用～表示，执行按位非的结果是返回数值的反码。\n2、按位与（AND）\n按位与是用&表示，它有两个操作符数，运算的时候，将两个数的二进制每一位对齐，都是1得1，其他为0；\n3、按位或（OR）\n按位或是用|表示，它有两个操作符数，运算的时候，将两个数的二进制每一位对齐，都是0得0，其他为1；\n4、按位异或（XOR）\n按位或是用^表示，它有两个操作符数，运算的时候，将两个数的二进制每一位对齐，相同得0，不同为1；\n5、左移\n左移用<<表示，会将数值所有位数向左移动指定的位数。后面补0；左移不会影响符号。\n6、有符号右移\n有符号右移用>>表示，会将数值所有位数向右移动指定的位数。前面补0；保留符号位，不会影响符号。\n7、无符号右移\n无符号右移用>>>表示，会将数值所有位数向右移动指定的位数。前面补0；会影响符号。而且会把负数的补码当成二进制码来运算。")]),t._v(" "),a("h2",{attrs:{id:"布尔运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布尔运算符"}},[t._v("#")]),t._v(" 布尔运算符")]),t._v(" "),a("p",[t._v("布尔运算符有三个，主要用来测试值的关系\n1、逻辑非(!)\n这个操作符会返回一个布尔值，逻辑非运算会将操作数先转换成布尔值，然后求反。")]),t._v(" "),a("ul",[a("li",[t._v("操作数是对象，返回false")]),t._v(" "),a("li",[t._v("操作数是空字符串，返回true")]),t._v(" "),a("li",[t._v("操作数是非空字符串，返回false")]),t._v(" "),a("li",[t._v("操作数是非0数值，返回false")]),t._v(" "),a("li",[t._v("操作数是0，null，NaN，undefined，返回true")])]),t._v(" "),a("p",[t._v("2、逻辑与(&&)\n逻辑与操作符两边有两个操作数。都是true才为true。\n逻辑与操作可以应用于所有变量，在有一个操作数不是布尔值的情况下，逻辑与不一定会返回布尔值。\n规则：")]),t._v(" "),a("ul",[a("li",[t._v("如果第一个操作数是对象，则返回第二个操作数")]),t._v(" "),a("li",[t._v("如果第二个操作数是对象，则必须第一个操作数是true才会返回该对象。")]),t._v(" "),a("li",[t._v("如果两个数都是对象，则返回第二个操作数")]),t._v(" "),a("li",[t._v("如果有一个操作数是null，NaN，undefined，则返回null，NaN，undefined。")])]),t._v(" "),a("p",[t._v("逻辑与属于短路操作，第一个操作数能决定结果，就不会对第二个操作数求值。")]),t._v(" "),a("p",[t._v("3、逻辑或(||)\n逻辑或两边有两个操作数，有一个为true就是true。\n逻辑或操作可以应用于所有变量，在有一个操作数不是布尔值的情况下，逻辑与不一定会返回布尔值。\n规则：")]),t._v(" "),a("ul",[a("li",[t._v("如果第一个操作数是对象，则返回第一个操作数")]),t._v(" "),a("li",[t._v("如果第一个操作数是false，则返回第二个操作数")]),t._v(" "),a("li",[t._v("两个操作数都是对象，则返回第一个操作数")]),t._v(" "),a("li",[t._v("如果两个操作数是null，NaN，undefined，则返回null，NaN，undefined。")])]),t._v(" "),a("h2",{attrs:{id:"乘性操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#乘性操作符"}},[t._v("#")]),t._v(" 乘性操作符")]),t._v(" "),a("p",[t._v("ES有三个乘性操作符，乘法，除法和求模。\n如果乘性操作符的某一个操作数不是数值，则将会用Number()方法，先转换成数值。\n1、乘法(*)\n规则：")]),t._v(" "),a("ul",[a("li",[t._v("乘积超过限制，则显示Infinity或者-Infinity")]),t._v(" "),a("li",[t._v("有一个操作数为NaN，结果为NaN")]),t._v(" "),a("li",[t._v("Infinity与0相乘，结果是NaN")]),t._v(" "),a("li",[t._v("Infinity与非0数相乘，结果是Infinity或者-Infinity")]),t._v(" "),a("li",[t._v("Infinity与Infinity相乘，结果是Infinity")])]),t._v(" "),a("p",[t._v("2、除法(/)\n规则：")]),t._v(" "),a("ul",[a("li",[t._v("Infinity与Infinity相除，结果是NaN")]),t._v(" "),a("li",[t._v("0/0结果是NaN")]),t._v(" "),a("li",[t._v("其他操作数／0 结果是Infinity或者-Infinity")])]),t._v(" "),a("p",[t._v("3、求模(%)\n规则：")]),t._v(" "),a("ul",[a("li",[t._v("Infinity%操作数 结果是NaN")]),t._v(" "),a("li",[t._v("操作数%0，结果是NaN")]),t._v(" "),a("li",[t._v("Infinity%Infinity，结果是NaN")]),t._v(" "),a("li",[t._v("操作数%Infinity，结果是操作数")])]),t._v(" "),a("h2",{attrs:{id:"加性操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#加性操作符"}},[t._v("#")]),t._v(" 加性操作符")]),t._v(" "),a("p",[t._v("ES中有两个加性操作符，加法和减法\n1、加法(+)\n规则：")]),t._v(" "),a("ul",[a("li",[t._v("有一个操作数是NaN，结果就是NaN")]),t._v(" "),a("li",[t._v("Infinity + Infinity = Infinity")]),t._v(" "),a("li",[t._v("-Infinity + -Infinity = -Infinity")]),t._v(" "),a("li",[t._v("Infinity + -Infinity = NaN")]),t._v(" "),a("li",[t._v("+0 + +0 = +0")]),t._v(" "),a("li",[t._v("-0 + -0 = -0")]),t._v(" "),a("li",[t._v("+0 + -0 = +0")]),t._v(" "),a("li",[t._v("两个操作数都是字符串，则将字符串拼接起来")]),t._v(" "),a("li",[t._v("只有一个操作数是字符串，另一个操作数则会转换成字符串，然后拼接起来。")])]),t._v(" "),a("p",[t._v("2、减法(-)\n规则：")]),t._v(" "),a("ul",[a("li",[t._v("Infinity - Infinity = NaN")]),t._v(" "),a("li",[t._v("-Infinity - -Infinity = NaN")]),t._v(" "),a("li",[t._v("Infinity - -Infinity = Infinity")]),t._v(" "),a("li",[t._v("-Infinity - Infinity = -Infinity")])]),t._v(" "),a("h2",{attrs:{id:"关系操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关系操作符"}},[t._v("#")]),t._v(" 关系操作符")]),t._v(" "),a("p",[t._v("关系操作符有大于(>)，小于(<),小于等于(<=),大于等于(>=)\n规则：")]),t._v(" "),a("ul",[a("li",[t._v("都是数值，执行数值比较")]),t._v(" "),a("li",[t._v("都是字符串，执行字符串编码比较")]),t._v(" "),a("li",[t._v("一个是数值，则另一个转换成数值比较")])]),t._v(" "),a("h2",{attrs:{id:"相等操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相等操作符"}},[t._v("#")]),t._v(" 相等操作符")]),t._v(" "),a("p",[t._v("ES中提供了两种相等操作符：\n相等操作符：先转换再比较\n全等操作符：不转换只比较\n1、相等操作符(==,!=),强制转型，然后比较。\n规则：")]),t._v(" "),a("ul",[a("li",[t._v("如果有一个是布尔类型的操作数，则先转换成数值。")]),t._v(" "),a("li",[t._v("如果有一个是数值，一个是字符串，则将字符串转换成数值")]),t._v(" "),a("li",[t._v("如果有一个是对象，则用valueOf转成基本类型比较")]),t._v(" "),a("li",[t._v("null 和undefined 相等")]),t._v(" "),a("li",[t._v("如果有一个操作数是NaN，则==返回false，!=返回true")]),t._v(" "),a("li",[t._v("如果都是对象，则比较两个对象是不是一个对象，是否来指向同一个对象。")])]),t._v(" "),a("p",[t._v("2、全等操作符(===,!==),不转换，只比较。\n规则：")]),t._v(" "),a("ul",[a("li",[t._v("只要是完全一样就为true，其他为false。")])]),t._v(" "),a("p",[t._v("##条件操作符\nES中的条件操作符(?😃")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("variable "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("##赋值操作符\n其中有+= ，-=，*=，／=，%=，<<=, >>=, >>>=")]),t._v(" "),a("p",[t._v("##逗号操作符")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])}),[],!1,null,null,null);n.default=v.exports}}]);