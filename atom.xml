<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Milestone</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-15T06:09:48.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>啪叽</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>webpack 配置理解</title>
    <link href="http://yoursite.com/2018/05/15/webpack-%E9%85%8D%E7%BD%AE%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/05/15/webpack-配置理解/</id>
    <published>2018-05-15T05:48:01.000Z</published>
    <updated>2018-05-15T06:09:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle。</p><p>webpack 4 虽然已经不需要引入一个配置文件。但是，webpack在实际的应用中还是会配置很多东西。<br>下面就是对webpack的配置分析：<br>从webpack文档中找出路配置，进行了分析</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">"production"</span>, <span class="comment">// "production" | "development" | "none"</span></span><br><span class="line">  <span class="comment">// webpack有三种模式：生产模式，开发模式，none；选择模式告诉webpack相应地使用其内置优化。</span></span><br><span class="line"></span><br><span class="line">  entry: <span class="string">"./app/entry"</span>, <span class="comment">// string | object | array</span></span><br><span class="line">  <span class="comment">// webpack的入口文件，这里应用程序开始执行</span></span><br><span class="line">  <span class="comment">// webpack 开始打包</span></span><br><span class="line"></span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">// webpack 如何输出结果的相关选项</span></span><br><span class="line"></span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"dist"</span>), <span class="comment">// string</span></span><br><span class="line">    <span class="comment">// 所有输出文件的目标路径</span></span><br><span class="line">    <span class="comment">// 必须是绝对路径（使用 Node.js 的 path 模块）</span></span><br><span class="line"></span><br><span class="line">    filename: <span class="string">"bundle.js"</span>, <span class="comment">// string</span></span><br><span class="line">    <span class="comment">// 「入口分块(entry chunk)」的文件名模板（出口分块？）</span></span><br><span class="line"></span><br><span class="line">    publicPath: <span class="string">"/assets/"</span>, <span class="comment">// string</span></span><br><span class="line">    <span class="comment">// 输出解析文件的目录，url 相对于 HTML 页面</span></span><br><span class="line"></span><br><span class="line">    library: <span class="string">"MyLibrary"</span>, <span class="comment">// string,</span></span><br><span class="line">    <span class="comment">// 导出库(exported library)的名称</span></span><br><span class="line"></span><br><span class="line">    libraryTarget: <span class="string">"umd"</span>, <span class="comment">// 通用模块定义</span></span><br><span class="line">    <span class="comment">// 导出库(exported library)的类型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 高级输出配置 */</span></span><br><span class="line"></span><br><span class="line">    pathinfo: <span class="literal">true</span>, <span class="comment">// boolean</span></span><br><span class="line">    <span class="comment">// 在生成代码时，引入相关的模块、导出、请求等有帮助的路径信息。</span></span><br><span class="line"></span><br><span class="line">    chunkFilename: <span class="string">"[id].js"</span>,</span><br><span class="line">    chunkFilename: <span class="string">"[chunkhash].js"</span>, <span class="comment">// 长效缓存(/guides/caching)</span></span><br><span class="line">    <span class="comment">// 「附加分块(additional chunk)」的文件名模板</span></span><br><span class="line"></span><br><span class="line">    jsonpFunction: <span class="string">"myWebpackJsonp"</span>, <span class="comment">// string</span></span><br><span class="line">    <span class="comment">// 用于加载分块的 JSONP 函数名</span></span><br><span class="line"></span><br><span class="line">    sourceMapFilename: <span class="string">"[file].map"</span>, <span class="comment">// string</span></span><br><span class="line">    sourceMapFilename: <span class="string">"sourcemaps/[file].map"</span>, <span class="comment">// string</span></span><br><span class="line">    <span class="comment">// 「source map 位置」的文件名模板</span></span><br><span class="line"></span><br><span class="line">    devtoolModuleFilenameTemplate: <span class="string">"webpack:///[resource-path]"</span>, <span class="comment">// string</span></span><br><span class="line">    <span class="comment">// 「devtool 中模块」的文件名模板</span></span><br><span class="line"></span><br><span class="line">    devtoolFallbackModuleFilenameTemplate: <span class="string">"webpack:///[resource-path]?[hash]"</span>, <span class="comment">// string</span></span><br><span class="line">    <span class="comment">// 「devtool 中模块」的文件名模板（用于冲突）</span></span><br><span class="line"></span><br><span class="line">    umdNamedDefine: <span class="literal">true</span>, <span class="comment">// boolean</span></span><br><span class="line">    <span class="comment">// 在 UMD 库中使用命名的 AMD 模块</span></span><br><span class="line"></span><br><span class="line">    crossOriginLoading: <span class="string">"use-credentials"</span>, <span class="comment">// 枚举</span></span><br><span class="line">    crossOriginLoading: <span class="string">"anonymous"</span>,</span><br><span class="line">    crossOriginLoading: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 指定运行时如何发出跨域请求问题</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 专家级输出配置（自行承担风险） */</span></span><br><span class="line"></span><br><span class="line">    devtoolLineToLine: &#123;</span><br><span class="line">      test: <span class="regexp">/\.jsx$/</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 为这些模块使用 1:1 映射 SourceMaps（快速）</span></span><br><span class="line"></span><br><span class="line">    hotUpdateMainFilename: <span class="string">"[hash].hot-update.json"</span>, <span class="comment">// string</span></span><br><span class="line">    <span class="comment">// 「HMR 清单」的文件名模板</span></span><br><span class="line"></span><br><span class="line">    hotUpdateChunkFilename: <span class="string">"[id].[hash].hot-update.js"</span>, <span class="comment">// string</span></span><br><span class="line">    <span class="comment">// 「HMR 分块」的文件名模板</span></span><br><span class="line"></span><br><span class="line">    sourcePrefix: <span class="string">"\t"</span>, <span class="comment">// string</span></span><br><span class="line">    <span class="comment">// 包内前置式模块资源具有更好可读性</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    <span class="comment">// 关于模块配置</span></span><br><span class="line"></span><br><span class="line">    rules: [</span><br><span class="line">      <span class="comment">// 模块规则（配置 loader、解析器等选项）</span></span><br><span class="line"></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.jsx?$/</span>,</span><br><span class="line">        include: [</span><br><span class="line">          path.resolve(__dirname, <span class="string">"app"</span>)</span><br><span class="line">        ],</span><br><span class="line">        exclude: [</span><br><span class="line">          path.resolve(__dirname, <span class="string">"app/demo-files"</span>)</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">// 这里是匹配条件，每个选项都接收一个正则表达式或字符串</span></span><br><span class="line">        <span class="comment">// test 和 include 具有相同的作用，都是必须匹配选项</span></span><br><span class="line">        <span class="comment">// exclude 是必不匹配选项（优先于 test 和 include）</span></span><br><span class="line">        <span class="comment">// 最佳实践：</span></span><br><span class="line">        <span class="comment">// - 只在 test 和 文件名匹配 中使用正则表达式</span></span><br><span class="line">        <span class="comment">// - 在 include 和 exclude 中使用绝对路径数组</span></span><br><span class="line">        <span class="comment">// - 尽量避免 exclude，更倾向于使用 include</span></span><br><span class="line"></span><br><span class="line">        issuer: &#123; test, include, exclude &#125;,</span><br><span class="line">        <span class="comment">// issuer 条件（导入源）</span></span><br><span class="line"></span><br><span class="line">        enforce: <span class="string">"pre"</span>,</span><br><span class="line">        enforce: <span class="string">"post"</span>,</span><br><span class="line">        <span class="comment">// 标识应用这些规则，即使规则覆盖（高级选项）</span></span><br><span class="line"></span><br><span class="line">        loader: <span class="string">"babel-loader"</span>,</span><br><span class="line">        <span class="comment">// 应该应用的 loader，它相对上下文解析</span></span><br><span class="line">        <span class="comment">// 为了更清晰，`-loader` 后缀在 webpack 2 中不再是可选的</span></span><br><span class="line">        <span class="comment">// 查看 webpack 1 升级指南。</span></span><br><span class="line"></span><br><span class="line">        options: &#123;</span><br><span class="line">          presets: [<span class="string">"es2015"</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// loader 的可选项</span></span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">        test: <span class="string">"\.html$"</span></span><br><span class="line"></span><br><span class="line">        use: [</span><br><span class="line">          <span class="comment">// 应用多个 loader 和选项</span></span><br><span class="line">          <span class="string">"htmllint-loader"</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">"html-loader"</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              <span class="comment">/* ... */</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      &#123; <span class="attr">oneOf</span>: [ <span class="comment">/* rules */</span> ] &#125;,</span><br><span class="line">      <span class="comment">// 只使用这些嵌套规则之一</span></span><br><span class="line"></span><br><span class="line">      &#123; <span class="attr">rules</span>: [ <span class="comment">/* rules */</span> ] &#125;,</span><br><span class="line">      <span class="comment">// 使用所有这些嵌套规则（合并可用条件）</span></span><br><span class="line"></span><br><span class="line">      &#123; <span class="attr">resource</span>: &#123; <span class="attr">and</span>: [ <span class="comment">/* 条件 */</span> ] &#125; &#125;,</span><br><span class="line">      <span class="comment">// 仅当所有条件都匹配时才匹配</span></span><br><span class="line"></span><br><span class="line">      &#123; <span class="attr">resource</span>: &#123; <span class="attr">or</span>: [ <span class="comment">/* 条件 */</span> ] &#125; &#125;,</span><br><span class="line">      &#123; <span class="attr">resource</span>: [ <span class="comment">/* 条件 */</span> ] &#125;,</span><br><span class="line">      <span class="comment">// 任意条件匹配时匹配（默认为数组）</span></span><br><span class="line"></span><br><span class="line">      &#123; <span class="attr">resource</span>: &#123; <span class="attr">not</span>: <span class="comment">/* 条件 */</span> &#125; &#125;</span><br><span class="line">      <span class="comment">// 条件不匹配时匹配</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 高级模块配置（点击展示） */</span></span><br><span class="line"></span><br><span class="line">     noParse: [</span><br><span class="line">      /special-library\.js$/</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 不解析这里的模块</span></span><br><span class="line"></span><br><span class="line">    unknownContextRequest: <span class="string">"."</span>,</span><br><span class="line">    unknownContextRecursive: <span class="literal">true</span>,</span><br><span class="line">    unknownContextRegExp: <span class="regexp">/^\.\/.*$/</span>,</span><br><span class="line">    unknownContextCritical: <span class="literal">true</span>,</span><br><span class="line">    exprContextRequest: <span class="string">"."</span>,</span><br><span class="line">    exprContextRegExp: <span class="regexp">/^\.\/.*$/</span>,</span><br><span class="line">    exprContextRecursive: <span class="literal">true</span>,</span><br><span class="line">    exprContextCritical: <span class="literal">true</span>,</span><br><span class="line">    wrappedContextRegExp: <span class="regexp">/.*/</span>,</span><br><span class="line">    wrappedContextRecursive: <span class="literal">true</span>,</span><br><span class="line">    wrappedContextCritical: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 指定动态请求的默认行为</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  resolve: &#123;</span><br><span class="line">    <span class="comment">// 解析模块请求的选项</span></span><br><span class="line">    <span class="comment">// （不适用于对 loader 解析）</span></span><br><span class="line"></span><br><span class="line">    modules: [</span><br><span class="line">      <span class="string">"node_modules"</span>,</span><br><span class="line">      path.resolve(__dirname, <span class="string">"app"</span>)</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 用于查找模块的目录</span></span><br><span class="line"></span><br><span class="line">    extensions: [<span class="string">".js"</span>, <span class="string">".json"</span>, <span class="string">".jsx"</span>, <span class="string">".css"</span>],</span><br><span class="line">    <span class="comment">// 使用的扩展名</span></span><br><span class="line"></span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="comment">// 模块别名列表</span></span><br><span class="line"></span><br><span class="line">      <span class="string">"module"</span>: <span class="string">"new-module"</span>,</span><br><span class="line">      <span class="comment">// 起别名："module" -&gt; "new-module" 和 "module/path/file" -&gt; "new-module/path/file"</span></span><br><span class="line"></span><br><span class="line">      <span class="string">"only-module$"</span>: <span class="string">"new-module"</span>,</span><br><span class="line">      <span class="comment">// 起别名 "only-module" -&gt; "new-module"，但不匹配 "only-module/path/file" -&gt; "new-module/path/file"</span></span><br><span class="line"></span><br><span class="line">      <span class="string">"module"</span>: path.resolve(__dirname, <span class="string">"app/third/module.js"</span>),</span><br><span class="line">      <span class="comment">// 起别名 "module" -&gt; "./app/third/module.js" 和 "module/file" 会导致错误</span></span><br><span class="line">      <span class="comment">// 模块别名相对于当前上下文导入</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/* 可供选择的别名语法（点击展示） */</span></span><br><span class="line">  alias: [</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">"module"</span>,</span><br><span class="line">        <span class="comment">// 旧的请求</span></span><br><span class="line"></span><br><span class="line">        alias: <span class="string">"new-module"</span>,</span><br><span class="line">        <span class="comment">// 新的请求</span></span><br><span class="line"></span><br><span class="line">        onlyModule: <span class="literal">true</span></span><br><span class="line">        <span class="comment">// 如果为 true，只有 "module" 是别名</span></span><br><span class="line">        <span class="comment">// 如果为 false，"module/inner/path" 也是别名</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 高级解析选项（点击展示） */</span></span><br><span class="line"></span><br><span class="line">    symlinks: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 遵循符号链接(symlinks)到新位置</span></span><br><span class="line"></span><br><span class="line">    descriptionFiles: [<span class="string">"package.json"</span>],</span><br><span class="line">    <span class="comment">// 从 package 描述中读取的文件</span></span><br><span class="line"></span><br><span class="line">    mainFields: [<span class="string">"main"</span>],</span><br><span class="line">    <span class="comment">// 从描述文件中读取的属性</span></span><br><span class="line">    <span class="comment">// 当请求文件夹时</span></span><br><span class="line"></span><br><span class="line">    aliasFields: [<span class="string">"browser"</span>],</span><br><span class="line">    <span class="comment">// 从描述文件中读取的属性</span></span><br><span class="line">    <span class="comment">// 以对此 package 的请求起别名</span></span><br><span class="line"></span><br><span class="line">    enforceExtension: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 如果为 true，请求必不包括扩展名</span></span><br><span class="line">    <span class="comment">// 如果为 false，请求可以包括扩展名</span></span><br><span class="line"></span><br><span class="line">    moduleExtensions: [<span class="string">"-module"</span>],</span><br><span class="line">    enforceModuleExtension: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 类似 extensions/enforceExtension，但是用模块名替换文件</span></span><br><span class="line"></span><br><span class="line">    unsafeCache: <span class="literal">true</span>,</span><br><span class="line">    unsafeCache: &#123;&#125;,</span><br><span class="line">    <span class="comment">// 为解析的请求启用缓存</span></span><br><span class="line">    <span class="comment">// 这是不安全，因为文件夹结构可能会改动</span></span><br><span class="line">    <span class="comment">// 但是性能改善是很大的</span></span><br><span class="line"></span><br><span class="line">    cachePredicate: <span class="function">(<span class="params">path, request</span>) =&gt;</span> <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 用于选择缓存请求的谓词函数</span></span><br><span class="line"></span><br><span class="line">    plugins: [</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    ]</span><br><span class="line">    <span class="comment">// 应用于解析器的附加插件</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  performance: &#123;</span><br><span class="line">    hints: <span class="string">"warning"</span>, <span class="comment">//  or "error" or false</span></span><br><span class="line">    maxAssetSize: <span class="number">200000</span>, <span class="comment">// 整数类型（以字节为单位）</span></span><br><span class="line">    maxEntrypointSize: <span class="number">400000</span>, <span class="comment">// 整数类型（以字节为单位）</span></span><br><span class="line">    assetFilter: <span class="function"><span class="keyword">function</span>(<span class="params">assetFilename</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 提供资源文件名的断言函数</span></span><br><span class="line">      <span class="keyword">return</span> assetFilename.endsWith(<span class="string">'.css'</span>) || assetFilename.endsWith(<span class="string">'.js'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">   devtool: <span class="string">"source-map"</span>, <span class="comment">// </span></span><br><span class="line">  <span class="comment">// devtool: "inline-source-map", // 嵌入到源文件中</span></span><br><span class="line">  <span class="comment">// devtool: "eval-source-map", // 将 SourceMap 嵌入到每个模块中</span></span><br><span class="line">  <span class="comment">// devtool: "hidden-source-map", // SourceMap 不在源文件中引用</span></span><br><span class="line">  <span class="comment">// devtool: "cheap-source-map", // 没有模块映射(module mappings)的 SourceMap 低级变体(cheap-variant)</span></span><br><span class="line">  <span class="comment">// devtool: "cheap-module-source-map", // 有模块映射(module mappings)的 SourceMap 低级变体</span></span><br><span class="line">  <span class="comment">// devtool: "eval", // 没有模块映射，而是命名模块。以牺牲细节达到最快。</span></span><br><span class="line">  <span class="comment">// 通过在浏览器调试工具(browser devtools)中添加元信息(meta info)增强调试</span></span><br><span class="line">  <span class="comment">// 牺牲了构建速度的 `source-map' 是最详细的。</span></span><br><span class="line"></span><br><span class="line">  context: __dirname, <span class="comment">// string（绝对路径！）</span></span><br><span class="line">  <span class="comment">// webpack 的主目录</span></span><br><span class="line">  <span class="comment">// entry 和 module.rules.loader 选项</span></span><br><span class="line">  <span class="comment">// 相对于此目录解析</span></span><br><span class="line"></span><br><span class="line">  target: <span class="string">"web"</span>, <span class="comment">// 默认</span></span><br><span class="line">  <span class="comment">// 包(bundle)应该运行的环境</span></span><br><span class="line">  <span class="comment">// 更改 块加载行为(chunk loading behavior) 和 可用模块(available module)</span></span><br><span class="line"></span><br><span class="line">  externals: [<span class="string">"react"</span>, /^@angular\<span class="comment">//],</span></span><br><span class="line">  <span class="comment">// 不要遵循/打包这些模块，而是在运行时从环境中请求他们</span></span><br><span class="line"></span><br><span class="line">  stats: <span class="string">"errors-only"</span>,</span><br><span class="line">  <span class="comment">// 精确控制要显示的 bundle 信息</span></span><br><span class="line"></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    proxy: &#123; <span class="comment">// 代理URL到后端开发服务器</span></span><br><span class="line">      <span class="string">'/api'</span>: <span class="string">'http://localhost:3000'</span></span><br><span class="line">      auth: <span class="literal">false</span> <span class="comment">//授权</span></span><br><span class="line">      changeOrigin: <span class="literal">true</span> <span class="comment">//跨域</span></span><br><span class="line">    &#125;,</span><br><span class="line">    contentBase: path.join(__dirname, <span class="string">'public'</span>), <span class="comment">// boolean | string | array, 静态文件位置</span></span><br><span class="line">    compress: <span class="literal">true</span>, <span class="comment">// 启用gzip压缩</span></span><br><span class="line">    historyApiFallback: <span class="literal">true</span>, <span class="comment">// 提供重定向响应 404 -- 如果使用 </span></span><br><span class="line">    hot: <span class="literal">true</span>, <span class="comment">// 热加载</span></span><br><span class="line">    https: <span class="literal">false</span>, <span class="comment">// 是否是https</span></span><br><span class="line">    noInfo: <span class="literal">true</span>, <span class="comment">// 只有错误并警告热重新加载</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 附加插件列表</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 高级配置（点击展示） */</span></span><br><span class="line"></span><br><span class="line">  resolveLoader: &#123; <span class="comment">/* 等同于 resolve */</span> &#125;</span><br><span class="line">  <span class="comment">// 独立解析选项的 loader</span></span><br><span class="line"></span><br><span class="line">  parallelism: <span class="number">1</span>, <span class="comment">// number</span></span><br><span class="line">  <span class="comment">// 限制并行处理模块的数量</span></span><br><span class="line"></span><br><span class="line">  profile: <span class="literal">true</span>, <span class="comment">// boolean</span></span><br><span class="line">  <span class="comment">// 捕获时机信息</span></span><br><span class="line"></span><br><span class="line">  bail: <span class="literal">true</span>, <span class="comment">//boolean</span></span><br><span class="line">  <span class="comment">// 在第一个错误出错时抛出，而不是无视错误。</span></span><br><span class="line"></span><br><span class="line">  cache: <span class="literal">false</span>, <span class="comment">// boolean</span></span><br><span class="line">  <span class="comment">// 禁用/启用缓存</span></span><br><span class="line"></span><br><span class="line">  watch: <span class="literal">true</span>, <span class="comment">// boolean</span></span><br><span class="line">  <span class="comment">// 启用观察</span></span><br><span class="line"></span><br><span class="line">  watchOptions: &#123;</span><br><span class="line">    aggregateTimeout: <span class="number">1000</span>, <span class="comment">// in ms</span></span><br><span class="line">    <span class="comment">// 将多个更改聚合到单个重构建(rebuild)</span></span><br><span class="line"></span><br><span class="line">    poll: <span class="literal">true</span>,</span><br><span class="line">    poll: <span class="number">500</span>, <span class="comment">// 间隔单位 ms</span></span><br><span class="line">    <span class="comment">// 启用轮询观察模式</span></span><br><span class="line">    <span class="comment">// 必须用在不通知更改的文件系统中</span></span><br><span class="line">    <span class="comment">// 即 nfs shares（译者注：Network FileSystem，最大的功能就是可以透過網路，讓不同的機器、不同的作業系統、可以彼此分享個別的檔案 ( share file )）</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  node: &#123;</span><br><span class="line">    <span class="comment">// 在非node环境下填充或模拟运行node环境</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>: <span class="literal">false</span>, <span class="comment">// boolean | "mock"</span></span><br><span class="line">    global: <span class="literal">true</span>, <span class="comment">// boolean | "mock"</span></span><br><span class="line">    process: <span class="literal">true</span>, <span class="comment">// boolean</span></span><br><span class="line">    __filename: <span class="string">"mock"</span>, <span class="comment">// boolean | "mock"</span></span><br><span class="line">    __dirname: <span class="string">"mock"</span>, <span class="comment">// boolean | "mock"</span></span><br><span class="line">    Buffer: <span class="literal">true</span>, <span class="comment">// boolean | "mock"</span></span><br><span class="line">    setImmediate: <span class="literal">true</span> <span class="comment">// boolean | "mock" | "empty"</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  recordsPath: path.resolve(__dirname, <span class="string">"build/records.json"</span>),</span><br><span class="line">  recordsInputPath: path.resolve(__dirname, <span class="string">"build/records.json"</span>),</span><br><span class="line">  recordsOutputPath: path.resolve(__dirname, <span class="string">"build/records.json"</span>),</span><br><span class="line">  <span class="comment">// TODO</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>在页面中获取图片的尺寸</title>
    <link href="http://yoursite.com/2018/05/14/%E5%9C%A8%E9%A1%B5%E9%9D%A2%E4%B8%AD%E8%8E%B7%E5%8F%96%E5%9B%BE%E7%89%87%E7%9A%84%E5%B0%BA%E5%AF%B8/"/>
    <id>http://yoursite.com/2018/05/14/在页面中获取图片的尺寸/</id>
    <published>2018-05-14T10:13:46.000Z</published>
    <updated>2018-05-14T10:16:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>在js中写了获取图片的高度，却发现高度都是0.<br>这是因为js运行的时候，图片还没有加载好<br>所以在获取图片高度的时候，要用window.onload<br>在图片都加载好了之后获取就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> imgHeight = $(<span class="string">".bgImg"</span>).height()</span><br><span class="line">  <span class="built_in">console</span>.log(imgHeight);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在js中写了获取图片的高度，却发现高度都是0.&lt;br&gt;这是因为js运行的时候，图片还没有加载好&lt;br&gt;所以在获取图片高度的时候，要用window.onload&lt;br&gt;在图片都加载好了之后获取就可以了。&lt;/p&gt;
&lt;figure class=&quot;highlight javascr
      
    
    </summary>
    
      <category term="bug汇总" scheme="http://yoursite.com/categories/bug%E6%B1%87%E6%80%BB/"/>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>jquery监控浏览器大小变化</title>
    <link href="http://yoursite.com/2018/05/14/jquery%E7%9B%91%E6%8E%A7%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%A7%E5%B0%8F%E5%8F%98%E5%8C%96/"/>
    <id>http://yoursite.com/2018/05/14/jquery监控浏览器大小变化/</id>
    <published>2018-05-14T10:10:06.000Z</published>
    <updated>2018-05-14T10:13:13.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> screenWidth = <span class="built_in">window</span>.screen.width;</span><br><span class="line"></span><br><span class="line">$(<span class="built_in">window</span>).resize(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//当浏览器大小变化时</span></span><br><span class="line">  <span class="keyword">if</span>($(<span class="built_in">window</span>).width()!== screenWidth)&#123;</span><br><span class="line">    <span class="comment">//history.go(0)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//监控浏览器旋转</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">orientationChange</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (<span class="built_in">window</span>.orientation) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">      <span class="comment">//history.go(0)</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">-90</span>:</span><br><span class="line">      <span class="comment">//history.go(0)</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">90</span>:</span><br><span class="line">     <span class="comment">// history.go(0)</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">180</span>:</span><br><span class="line">      <span class="comment">//history.go(0)</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'orientationchange'</span>, orientationChange);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
      <category term="Demo练习" scheme="http://yoursite.com/categories/Demo%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="Jquery" scheme="http://yoursite.com/tags/Jquery/"/>
    
  </entry>
  
  <entry>
    <title>设置overflow：hidden导致相邻行内元素向下偏移的问题</title>
    <link href="http://yoursite.com/2018/05/14/%E8%AE%BE%E7%BD%AEoverflow%EF%BC%9Ahidden%E5%AF%BC%E8%87%B4%E7%9B%B8%E9%82%BB%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E5%90%91%E4%B8%8B%E5%81%8F%E7%A7%BB%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/05/14/设置overflow：hidden导致相邻行内元素向下偏移的问题/</id>
    <published>2018-05-14T07:18:34.000Z</published>
    <updated>2018-05-14T09:59:24.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* CSS */</span></span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">span</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>:inline-block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">span</span><span class="selector-pseudo">:nth(0)</span>&#123;</span><br><span class="line">  <span class="attribute">overflow</span>:hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样设置之后，后面的两个span会向下偏移一定距离<br>实际上就是inline-block元素的默认baseline和其下外边沿的距离。<br>常用的解决方法是为上述inline-block元素添加vertical-align: bottom。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
      <category term="bug汇总" scheme="http://yoursite.com/categories/bug%E6%B1%87%E6%80%BB/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>如何去掉两个span间的间距</title>
    <link href="http://yoursite.com/2018/05/14/%E5%A6%82%E4%BD%95%E5%8E%BB%E6%8E%89%E4%B8%A4%E4%B8%AAspan%E9%97%B4%E7%9A%84%E9%97%B4%E8%B7%9D/"/>
    <id>http://yoursite.com/2018/05/14/如何去掉两个span间的间距/</id>
    <published>2018-05-14T07:13:21.000Z</published>
    <updated>2018-05-14T09:59:24.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* CSS */</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    font-size：10px；</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">span</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置成块级元素的span，会因为父元素设置字体的大小，导致两个span外的空格会占有空隙。<br>所以将父元素的font-size：0；<br>然后再单独设置span的字体大小就可以解决这个问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
      <category term="bug汇总" scheme="http://yoursite.com/categories/bug%E6%B1%87%E6%80%BB/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>jquery对追加事件的绑定</title>
    <link href="http://yoursite.com/2018/05/14/jquery%E5%AF%B9%E8%BF%BD%E5%8A%A0%E4%BA%8B%E4%BB%B6%E7%9A%84%E7%BB%91%E5%AE%9A/"/>
    <id>http://yoursite.com/2018/05/14/jquery对追加事件的绑定/</id>
    <published>2018-05-14T07:01:10.000Z</published>
    <updated>2018-05-14T09:59:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>写项目的时候又用到了jquery，突然发现，对于用jquery追加的元素，on方法绑定不能用。</p><p>发现：<br>on要原始存在才绑定上，否则要用delegate来动态绑定<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).delegate(<span class="string">'selecter'</span>,<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert(<span class="keyword">this</span>.innerHTML) &#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;写项目的时候又用到了jquery，突然发现，对于用jquery追加的元素，on方法绑定不能用。&lt;/p&gt;
&lt;p&gt;发现：&lt;br&gt;on要原始存在才绑定上，否则要用delegate来动态绑定&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;tabl
      
    
    </summary>
    
      <category term="bug汇总" scheme="http://yoursite.com/categories/bug%E6%B1%87%E6%80%BB/"/>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
      <category term="Jquery" scheme="http://yoursite.com/tags/Jquery/"/>
    
  </entry>
  
  <entry>
    <title>CSS中position属性总结笔记</title>
    <link href="http://yoursite.com/2018/05/14/CSS%E4%B8%ADposition%E5%B1%9E%E6%80%A7%E6%80%BB%E7%BB%93%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/05/14/CSS中position属性总结笔记/</id>
    <published>2018-05-14T06:55:43.000Z</published>
    <updated>2018-05-14T09:59:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>写了好多的position，一直在用它们字面的意思，最近项目写到的position的问题，竟然又出问题了。。总结一下：</p><p><strong>1. positon:static; 静态定位（默认的 ）</strong><br>　　这个是默认的，写不写都会是这个定位，所有的标准文档流里面的元素都是静态定位。</p><p><strong>2. positon:relative;  相对定位</strong><br>　　相对定位不会使有该属性的元素脱离标准文档流<br>　　相对定位会在页面原始的位置占据位置，而元素的位置会根据原始的位置进行偏移。<br>　　<br>　<strong><em>相对定位的作用一般是用来给子元素的绝对定位提供参考的。</em></strong></p><p><strong>3. position:absolute;  绝对定位</strong><br>　　绝对定位会使有该属性的元素脱离标准文档流<br>　　特点：</p><pre><code>如果这个元素没有父元素，top、left、right、bottom就相对于浏览器窗口来定位如果绝对定位的元素有父元素，且父元素没有相对定位，top、left、right、bottom相对于浏览窗口来定位如果绝对定位的元素有父元素，且父元素有定位（非static），top、left、right、bottom以父元素为基础偏移绝对定位之后的元素在页面上不会占据位置</code></pre><p><strong>4. position:fixed;   固定定位</strong><br>　　固定定位会使有该属性的元素脱离标准文档流<br>　　位置不变，适用于广告或者飘窗</p><p>总结：<strong><em>写页面时，用到最多是绝对定位与相对定位一起使用，较多的是子元素使用绝对定位，父元素使用相对定位</em></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;写了好多的position，一直在用它们字面的意思，最近项目写到的position的问题，竟然又出问题了。。总结一下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. positon:static; 静态定位（默认的 ）&lt;/strong&gt;&lt;br&gt;　　这个是默认的，写不写都会是这个定位，
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>变量的作用域和变量提升</title>
    <link href="http://yoursite.com/2018/05/14/%E5%8F%98%E9%87%8F%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87/"/>
    <id>http://yoursite.com/2018/05/14/变量的作用域和变量提升/</id>
    <published>2018-05-14T06:52:10.000Z</published>
    <updated>2018-05-14T09:59:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>某家面试的时候面试题，面试官小姐姐给出了一道题：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br></pre></td></tr></table></figure></p><p>问我这三个会打印出来的值是什么？</p><p>研究一下这个变量的作用域和变量提升：</p><p><strong>一、作用域：</strong></p><p>一个变量的作用域（scope）是程序源代码中定义这个变量的区域。<br>全局变量拥有全局作用域，在javaScript代码中任何地方都有定义的。<br>然而在函数内声明的变量只是在函数内部有定义，他们是局部变量，作用域也只是在局部。</p><p><strong>在函数体内，局部变量的优先级要高于全局变量。如果在函数体内重新声明一个与局部变量重名的变量，局部变量就会覆盖全局变量的值。</strong><br>来看个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="string">"100"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scope</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> num=<span class="string">"10"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">innerScope</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> num = <span class="string">"1"</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(scope);<span class="comment">//输出：1</span></span><br><span class="line">    &#125;</span><br><span class="line">    innerScope();</span><br><span class="line">    <span class="built_in">console</span>.log(num);<span class="comment">//输出：10</span></span><br><span class="line">&#125;</span><br><span class="line">scope();</span><br><span class="line"><span class="built_in">console</span>.log(num);<span class="comment">//输出：100</span></span><br></pre></td></tr></table></figure><p>这个例子会打印三个数，分别是1，10，100；<br><strong>局部变量的作用域仅仅在函数内部，出了函数体之后，局部变量就会被销毁。</strong><br>在innerScope()函数中，虽然又声明了一个num，但是innerScope()中的num是局部变量，只是与全局变量的名字相同，并不是全局变量，所以，虽然在该函数中把num赋值为1，但这仅仅是一个与全局变量名称相同的一个变量而已，并没有改变全局变量的值。</p><p>再来看一个例子:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="string">"100"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scope</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> num=<span class="string">"10"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">innerScope</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        num = <span class="string">"1"</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(scope);<span class="comment">//输出：1</span></span><br><span class="line">    &#125;</span><br><span class="line">    innerScope();</span><br><span class="line">    <span class="built_in">console</span>.log(num);<span class="comment">//输出：1</span></span><br><span class="line">&#125;</span><br><span class="line">scope();</span><br><span class="line"><span class="built_in">console</span>.log(num);<span class="comment">//输出：100</span></span><br></pre></td></tr></table></figure><p>上面这部分代码中，在innerScope()函数中，我们并没有用var来声明num，所以，在这里的num的作用域就被提升了，即我们将scope中的num的值重置了，所以在输出的时候输出的结果为嵌套作用域内的局部变量。</p><p><strong>二、变量提升</strong></p><p><strong>在Javascript中，函数及变量的声明都将被提升到函数的最顶部。</strong><br>在js中，变量的声明会被解析器悄悄的提升到方法体的最顶部，但是需要注意的是，提升的仅仅是变量的声明，变量的赋值并不会被提升，我们需要注意的是，函数的声明与变量的声明是不一样的。函数的函数体也会被一起提升。<br><strong>函数表达式和变量表达式只是其声明被提升，函数声明是函数的声明和实现都被提升。</strong></p><p>所以上面那个题就很好理解了。<br>我们再来看一下这个题：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br></pre></td></tr></table></figure></p><ol><li>因为变量提升，a提升到最前面，声明未赋值，所以第一个就会打印undefined；</li><li>第二个在a声明之后，而且a赋值为10，所以第二个打印出来10；</li><li>第三个，因为test()是在window下调用的；this指的是test()调用的作用域，所以第三个打印100；</li></ol><p>看一个函数提升的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=<span class="string">"javascript"</span> type=<span class="string">"text/javascript"</span>&gt;    </span><br><span class="line">    <span class="comment">//在全局对象中声明两个全局函数,反模式  </span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        alert(<span class="string">"global foo"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        alert(<span class="string">"global bar"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义全局变量  </span></span><br><span class="line">    <span class="keyword">var</span> v = <span class="string">"global var"</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">hoistMe</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        alert(<span class="keyword">typeof</span> foo); <span class="comment">//function  </span></span><br><span class="line">        alert(<span class="keyword">typeof</span> bar); <span class="comment">//undefined  </span></span><br><span class="line">        alert(v); <span class="comment">//undefined  </span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//为什么bar函数和变量v是未定义而不是全局变量中定义的相应的函数变量呢？  </span></span><br><span class="line">         <span class="comment">//因为函数里面定义了同名的函数和变量，无论在函数的任何位置定义这些函数和  </span></span><br><span class="line">         <span class="comment">//和变量，它们都将被提升到函数的最顶部。  </span></span><br><span class="line"></span><br><span class="line">        foo(); <span class="comment">//local foo  </span></span><br><span class="line">        bar(); <span class="comment">//报错，TypeError "bar is not a function"</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//函数声明，变量foo以及其实现被提升到hoistMe函数顶部  </span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function">        </span>&#123;  </span><br><span class="line">            alert(<span class="string">"local foo"</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line"></span><br><span class="line">        <span class="comment">//函数表达式,仅变量bar被提升到函数顶部，实现没有被提升  </span></span><br><span class="line">        <span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function">        </span>&#123;  </span><br><span class="line">            alert(<span class="string">"local bar"</span>);  </span><br><span class="line">        &#125;;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义局部变量  </span></span><br><span class="line">         <span class="keyword">var</span> v = <span class="string">"local"</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        hoistMe();  </span><br><span class="line"></span><br><span class="line">    &#125;)();  </span><br><span class="line"></span><br><span class="line">   <span class="comment">//函数表达式和变量表达式只是其声明被提升，函数声明是函数的声明和实现都被提升。  </span></span><br><span class="line">    <span class="comment">/**由于函数提升的效果，hoistMe方法相当于 </span></span><br><span class="line"><span class="comment">    function hoistMe() </span></span><br><span class="line"><span class="comment">    &#123; </span></span><br><span class="line"><span class="comment">        //函数声明，变量foo以及其实现被提升到hoistMe函数顶部 </span></span><br><span class="line"><span class="comment">        function foo() </span></span><br><span class="line"><span class="comment">        &#123; </span></span><br><span class="line"><span class="comment">            alert("local foo"); </span></span><br><span class="line"><span class="comment">        &#125; </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         //函数表达式,仅变量bar被提升到函数顶部，实现没有被提升(同变量提升) </span></span><br><span class="line"><span class="comment">        var bar = undefined; </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //变量声明被提升 </span></span><br><span class="line"><span class="comment">         var v = undefined; </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        alert(typeof foo); //function </span></span><br><span class="line"><span class="comment">        alert(typeof bar); //undefined </span></span><br><span class="line"><span class="comment">alert(v); //undefined </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        foo(); //local foo </span></span><br><span class="line"><span class="comment">        bar(); //报错，缺少对象 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        bar = function() </span></span><br><span class="line"><span class="comment">        &#123; </span></span><br><span class="line"><span class="comment">            alert("local bar"); </span></span><br><span class="line"><span class="comment">        &#125;; </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       v = "local"; </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125; </span></span><br><span class="line"><span class="comment">    */</span>  </span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;某家面试的时候面试题，面试官小姐姐给出了一道题：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>2018 书单</title>
    <link href="http://yoursite.com/2018/05/14/2018-%E4%B9%A6%E5%8D%95/"/>
    <id>http://yoursite.com/2018/05/14/2018-书单/</id>
    <published>2018-05-14T06:44:03.000Z</published>
    <updated>2018-05-14T09:59:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>☐ 《原则》瑞·达利欧 著 中信出版社<br>✔ 《爆裂》伊藤穰一 杰夫·豪 著 中信出版社<br>☐ 《基因传》悉达多•穆克吉 著 中信出版社<br>☐ 《未来简史》尤瓦尔·赫拉利 著 中信出版社<br>☐ 《人类简史》尤瓦尔·赫拉利 著 中信出版社<br>✔ 《你的第一本哲学书》托马斯·内格尔 著 中信出版社<br>☐ 《自私的基因》理查德·道金斯 著 中信出版社<br>☐ 《不会被机器替代的人》杰夫·科尔文 著 中信出版社<br>☐ 《好好说话》马薇薇、黄执中、周玄毅等 著 中信出版社<br>☐ 《跃迁》古典 著 中信出版社<br>☐ 《智能时代》吴军  著 中信出版社<br>☐ 《细节：如何轻松影响他人》史蒂夫·马丁  诺瓦·戈尔茨坦  等 著 中信出版社<br>☐ 《向前一步》谢丽尔·桑德伯<br>✔ 《人人都是产品经理》<br>☐ 《穷爸爸富爸爸》<br>☐ 《中国经济2018》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;☐ 《原则》瑞·达利欧 著 中信出版社&lt;br&gt;✔ 《爆裂》伊藤穰一 杰夫·豪 著 中信出版社&lt;br&gt;☐ 《基因传》悉达多•穆克吉 著 中信出版社&lt;br&gt;☐ 《未来简史》尤瓦尔·赫拉利 著 中信出版社&lt;br&gt;☐ 《人类简史》尤瓦尔·赫拉利 著 中信出版社&lt;br&gt;✔ 《你的第一
      
    
    </summary>
    
      <category term="浮生小记" scheme="http://yoursite.com/categories/%E6%B5%AE%E7%94%9F%E5%B0%8F%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>redux-devtools学习理解</title>
    <link href="http://yoursite.com/2018/05/11/redux-devtools%E5%AD%A6%E4%B9%A0%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/05/11/redux-devtools学习理解/</id>
    <published>2018-05-11T08:52:11.000Z</published>
    <updated>2018-05-14T09:59:24.000Z</updated>
    
    <content type="html"><![CDATA[<p></p><h1>redux-devtools</h1><br>A live-editing time travel environment for Redux.<br>redux-devtools是一个有趣而又高效的redux开发工具，通过redux-devtools，我们可以清晰的看到当前 store 仓库中的 state 是怎么样的，在可视化工具的左边，我们还可以看到触发的action的变化。这样，使得我们开发过程中很方便地进行调试。 <p></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev redux-devtools</span><br><span class="line">npm install --save-dev redux-devtools-log-monitor</span><br><span class="line">npm install --save-dev redux-devtools-dock-monitor</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>通过createDevTools来创建<code>DevTools</code>组件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="comment">//从redux-devtools中引入createDevTools</span></span><br><span class="line"><span class="keyword">let</span> DevTools;</span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;createDevTools&#125; = <span class="built_in">require</span>(<span class="string">'redux-devtools'</span>);</span><br><span class="line">  <span class="keyword">const</span> LogMonitor = <span class="built_in">require</span>(<span class="string">'redux-devtools-log-monitor'</span>).default;</span><br><span class="line">  <span class="keyword">const</span> DockMonitor = <span class="built_in">require</span>(<span class="string">'redux-devtools-dock-monitor'</span>).default;</span><br><span class="line"></span><br><span class="line">  DevTools = createDevTools(</span><br><span class="line">    &lt;DockMonitor toggleVisibilityKey=<span class="string">"ctrl-h"</span></span><br><span class="line">                 changePositionKey=<span class="string">"ctrl-w"</span></span><br><span class="line">                 defaultIsVisible=&#123;<span class="literal">false</span>&#125;</span><br><span class="line">                 defaultPosition=<span class="string">"right"</span>&gt;</span><br><span class="line">      &lt;LogMonitor theme=<span class="string">"tomorrow"</span> preserveScrollTop=&#123;<span class="literal">false</span>&#125;/&gt;</span><br><span class="line">    &lt;<span class="regexp">/DockMonitor&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>采用DevTools.instrument()通过redux的compose来扩展store</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">configureStore</span>(<span class="params">history, reducers, initialState</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Installs hooks that always keep react-router and redux store in sync</span></span><br><span class="line">  <span class="keyword">const</span> middleware = [thunk, routerMiddleware(history)];</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123; <span class="comment">//开发环境</span></span><br><span class="line">    <span class="keyword">const</span> &#123;createLogger&#125; = <span class="built_in">require</span>(<span class="string">'redux-logger'</span>);</span><br><span class="line">    middleware.push(createLogger());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> devTools = [];</span><br><span class="line">  <span class="keyword">if</span> (DevTools &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">document</span> !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    devTools = [DevTools.instrument()]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> store = createStore(</span><br><span class="line">    reducers,</span><br><span class="line">    initialState,</span><br><span class="line">    compose(</span><br><span class="line">      applyMiddleware(...middleware),</span><br><span class="line">      ...devTools</span><br><span class="line">    ));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> store;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用createDevTools()创建的DevTools组件有个特殊的静态方法instrument(),它返回一个store的增强器,在开发中你需要在compose中使用。注意：DevTools.instrument()要放在applyMiddleware后，因为你的applyMiddleware可以存在异步行为，为了确保所有的actions显示在store中，所以要放在后面</p><ul><li>Render <code>&lt;DevTools /&gt;</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = configureStore();</span><br><span class="line"></span><br><span class="line">render(</span><br><span class="line">  &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Router /&gt;</span><br><span class="line">      &lt;DevTools /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>Provider&gt;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;/p&gt;&lt;h1&gt;redux-devtools&lt;/h1&gt;&lt;br&gt;A live-editing time travel environment for Redux.&lt;br&gt;redux-devtools是一个有趣而又高效的redux开发工具，通过redux-devtools，我们
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="redux" scheme="http://yoursite.com/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>redux源码学习--applyMiddleware</title>
    <link href="http://yoursite.com/2018/05/11/redux%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-applyMiddleware/"/>
    <id>http://yoursite.com/2018/05/11/redux源码学习-applyMiddleware/</id>
    <published>2018-05-11T08:03:07.000Z</published>
    <updated>2018-05-14T09:59:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1>applyMiddleware理解</h1><p>中间件的本质是作为enhancer而存在的。它是通过createStore方法传递到redux的内部中的,中间件模块是一个高阶函数<br>下面是redux中间件的基本格式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reduxMiddleware = <span class="function">(<span class="params">&#123;dispatch, getState&#125;[简化的store]</span>) =&gt;</span> (next[上一个中间件的dispatch方法]) =&gt; <span class="function">(<span class="params">action[实际派发的action对象]</span>) =&gt;</span> &#123;&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">applyMiddleware</span>(<span class="params">...middlewares</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// middlewares就是我们传递给applyMiddlewarez函数的一系列中间件函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">createStore</span>) =&gt;</span> (...args) =&gt; &#123;</span><br><span class="line">    <span class="comment">// createStore就是redux用于创建store的方法,args === [reducers, preloadedState]。下面这句话就是在中间件的内部，使用我们传递的参数创建一个store对象</span></span><br><span class="line">    <span class="comment">// 注：这一块没有传递enhancer,所以返回的就是我们经常使用的store对象</span></span><br><span class="line">    <span class="keyword">const</span> store = createStore(...args)</span><br><span class="line">    <span class="comment">// 获取store对象的dispatch方法</span></span><br><span class="line">    <span class="keyword">let</span> dispatch = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">`Dispatching while constructing your middleware is not allowed. `</span> +</span><br><span class="line">          <span class="string">`Other middleware would not be applied to this dispatch.`</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 传递给中间件的第一层的函数的参数，</span></span><br><span class="line">    <span class="keyword">const</span> middlewareAPI = &#123;</span><br><span class="line">      getState: store.getState,</span><br><span class="line">      <span class="comment">// 重写了dispatch方法，其实就是store.dispatch(...args)</span></span><br><span class="line">      dispatch: <span class="function">(<span class="params">...args</span>) =&gt;</span> dispatch(...args)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 着重给大家详细的解释一下这一块</span></span><br><span class="line"><span class="comment">     * 假设我们给applyMiddleware函数传递的中间件是</span></span><br><span class="line"><span class="comment">     * applyMiddleware(</span></span><br><span class="line"><span class="comment">     *      f1 =&gt; g1 =&gt; h1(...arg) =&gt; &#123;&#125;,</span></span><br><span class="line"><span class="comment">     *      f2 =&gt; g2 =&gt; h2(...arg) =&gt; &#123;&#125;</span></span><br><span class="line"><span class="comment">     * )</span></span><br><span class="line"><span class="comment">     * 运行下面的这行代码之后，chain中保存的内容是</span></span><br><span class="line"><span class="comment">     * chain = [g1 =&gt; h1(...arg) =&gt; &#123;&#125;, g2 =&gt; h2(...arg) =&gt; &#123;&#125;]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> chain = middlewares.map(<span class="function"><span class="params">middleware</span> =&gt;</span> middleware(middlewareAPI))</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当我们把chain传入到 compose中后，根据我们对compose的分析，</span></span><br><span class="line"><span class="comment">     * compose(...chain)(store.dispatch)的结果就是:</span></span><br><span class="line"><span class="comment">     * g1(h2(...arg)) =&gt; h1(...arg)</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 也就是说，按照上面的这个形式，下面的dispatch和h1函数是一样的，所以，h1的参数，就是我们需要派发的action，当我们调用dispatch的时候，其实就相当于调用h1(action)，而在h1的内部，这个action是由g1的参数</span></span><br><span class="line"><span class="comment">     * 也就是h2进行派发的，所以这个时候action就传递到了h2的内部，而h2的参数是由g2的参数，也就是实际传入的store.dispatch进行派发的，就这样层层传入，层层输出，就形成了我们强大的中间件机制。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    dispatch = compose(...chain)(store.dispatch)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回的也是一个store对象</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...store,</span><br><span class="line">      <span class="comment">// 这个dispatch其实就是，各个中间件的最底层(第三层)的哪个函数组成的圆环函数构成的</span></span><br><span class="line">      dispatch</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;applyMiddleware理解&lt;/h1&gt;

&lt;p&gt;中间件的本质是作为enhancer而存在的。它是通过createStore方法传递到redux的内部中的,中间件模块是一个高阶函数&lt;br&gt;下面是redux中间件的基本格式：&lt;br&gt;&lt;figure class=&quot;high
      
    
    </summary>
    
      <category term="redux源码学习" scheme="http://yoursite.com/categories/redux%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="redux" scheme="http://yoursite.com/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>redux源码学习--bindActionCreators</title>
    <link href="http://yoursite.com/2018/05/11/redux%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-bindActionCreators/"/>
    <id>http://yoursite.com/2018/05/11/redux源码学习-bindActionCreators/</id>
    <published>2018-05-11T07:24:40.000Z</published>
    <updated>2018-05-14T09:59:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1>bindActionCreators</h1><p>以前这样触发一个action，即dispatch(actionCreator(args))，现在变成这样触发一个action: boundActionCreator(args)。目的很单纯，简化某个action的调用。</p><p>Redux中的bindActionCreators，是通过dispatch将action包裹起来，这样可以通过bindActionCreators创建的方法，直接调用dispatch(action)(隐式调用）。一般情况下，我们可以通过Provider将store通过React的connext属性向下传递，bindActionCreators的唯一用处就是需要传递action creater到子组件，并且改子组件并没有接收到父组件上传递的store和dispatch。</p><p>实现上面那个效果，仅需一行代码，也就是源码文件中的第一个函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回一个函数fn：函数目的是将actionCreator绑定到dispatch上，不用麻烦调用dispatch(actionCreator(args))了</span></span><br><span class="line"><span class="comment">// 返回一个函数fn，该函数fn用dispatch来调用，其参数是actionCreator执行结果，</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindActionCreator</span>(<span class="params">actionCreator, dispatch</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dispatch(actionCreator.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="参数理解"><a href="#参数理解" class="headerlink" title="参数理解"></a>参数理解</h2><p>actionCreators: actionCreators是一个对象，它的值是actions creator函数。也可以传递一个函数。<br><code>dispatch</code>: 等同于store中的store.dispatch，用于组合action</p><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>boundActionCreators: 返回一个boundActionCreators对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">bindActionCreators</span>(<span class="params">actionCreators, dispatch</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//如果actionCreators是一个函数，则说明只有一个actionCreator，那直接调用bindActionCreator就行了</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> actionCreators === <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> bindActionCreator(actionCreators, dispatch)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//如果是actionCreator是对象，或者是null的话，报错喽</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> actionCreators !== <span class="string">'object'</span> || actionCreators === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">      <span class="string">`bindActionCreators expected an object or a function, instead received <span class="subst">$&#123;actionCreators === <span class="literal">null</span> ? <span class="string">'null'</span> : <span class="keyword">typeof</span> actionCreators&#125;</span>. `</span> +</span><br><span class="line">      <span class="string">`Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?`</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//保持actionCreators里面原来的key，只是把key对应的value都转成了boundActionCreator</span></span><br><span class="line">  <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(actionCreators)</span><br><span class="line">  <span class="keyword">const</span> boundActionCreators = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = keys[i]</span><br><span class="line">    <span class="keyword">const</span> actionCreator = actionCreators[key]</span><br><span class="line">    <span class="comment">//只对value是函数的key进行转换，其他的都过滤掉了</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> actionCreator === <span class="string">'function'</span>) &#123;</span><br><span class="line">      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//返回绑定之后的对象</span></span><br><span class="line">  <span class="keyword">return</span> boundActionCreators</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>总结</h1><p>bindActionCreators函数把actionCreators这个对象里面包含的每一个actionCreator按照原来的key的方式全部都封装了一遍。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;bindActionCreators&lt;/h1&gt;

&lt;p&gt;以前这样触发一个action，即dispatch(actionCreator(args))，现在变成这样触发一个action: boundActionCreator(args)。目的很单纯，简化某个action的调用
      
    
    </summary>
    
      <category term="redux源码学习" scheme="http://yoursite.com/categories/redux%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="redux" scheme="http://yoursite.com/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>redux源码学习--combineReducers</title>
    <link href="http://yoursite.com/2018/05/11/redux%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E2%80%94combineReducers/"/>
    <id>http://yoursite.com/2018/05/11/redux源码学习—combineReducers/</id>
    <published>2018-05-11T06:16:47.000Z</published>
    <updated>2018-05-14T09:59:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1>combineReducers 理解</h1><p>combineReducers.js文件对外暴露了一个函数combineReducers，combineReducer函数是redux的一个辅助性的函数，用于拆分createStore里面的第一个参数：reducer函数。combineReducer函数的返回值是一个函数，该函数是组合之后的一个标准的reducer函数。<br>combineReducers将多个值不同的reducer对象转换为单个reducer。它将调用每个子reducer，并将它们的结果收集到单个状态对象中，该对象的键对应于传递的reducer函数的键。</p><h2 id="参数理解"><a href="#参数理解" class="headerlink" title="参数理解"></a>参数理解</h2><p><code>{reducers}</code>：一个对象，它的值对应于需要被组合成一个的不同的reducer函数。获得它的一种简便方法是使用ES6<code>import * as reducers</code>语法。对于任何的actions，reducer可能永远不会返回undefined。相反，如果传递给它们的state是undefined，则返回初始state，以及任何未识别action的当前state。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reducers = &#123;</span><br><span class="line">    usersId: <span class="function"><span class="keyword">function</span> <span class="title">getUsersIdReducer</span>(<span class="params"></span>)</span>&#123;&#125;, </span><br><span class="line">    userName: <span class="function"><span class="keyword">function</span> <span class="title">getUserNameReducer</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="参数处理"><a href="#参数处理" class="headerlink" title="参数处理"></a>参数处理</h2><ul><li>从传入的参数里面提取出合法的reducers（reducers的每一个key对应的value值是函数，才是合法的子reducer），赋值给新的局部变量：finalReducers</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reducerKeys = <span class="built_in">Object</span>.keys(reducers)</span><br><span class="line"><span class="comment">//定义一个局部变量 finalReducers</span></span><br><span class="line"><span class="keyword">const</span> finalReducers = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; reducerKeys.length; i++) &#123;</span><br><span class="line">  <span class="keyword">const</span> key = reducerKeys[i]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> reducers[key] === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">      warning(<span class="string">`No reducer provided for key "<span class="subst">$&#123;key&#125;</span>"`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//过滤出reducers对应的value值是function的key，将其放入finalReducers对象</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> reducers[key] === <span class="string">'function'</span>) &#123;</span><br><span class="line">    finalReducers[key] = reducers[key]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>校验finalReducers, 判断其每一个子reducer是否能返回正常的子state</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取出过滤出来的有效的keys列表</span></span><br><span class="line"><span class="keyword">const</span> finalReducerKeys = <span class="built_in">Object</span>.keys(finalReducers)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> unexpectedKeyCache</span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">  unexpectedKeyCache = &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> shapeAssertionError</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  assertReducerShape(finalReducers)</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  shapeAssertionError = e</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>调用assertReducerShape函数：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//确认reducer是否是合法的reducer，即返回的state是不是undefined，如果是undefined，则是非法reducer</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">assertReducerShape</span>(<span class="params">reducers</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Object</span>.keys(reducers).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> reducer = reducers[key]</span><br><span class="line">  <span class="keyword">const</span> initialState = reducer(<span class="literal">undefined</span>, &#123;<span class="attr">type</span>: ActionTypes.INIT&#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//如果初始state是undefined，则抛出错误</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> initialState === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">      <span class="string">`Reducer "<span class="subst">$&#123;key&#125;</span>" returned undefined during initialization. `</span> +</span><br><span class="line">      <span class="string">`If the state passed to the reducer is undefined, you must `</span> +</span><br><span class="line">      <span class="string">`explicitly return the initial state. The initial state may `</span> +</span><br><span class="line">      <span class="string">`not be undefined. If you don't want to set a value for this reducer, `</span> +</span><br><span class="line">      <span class="string">`you can use null instead of undefined.`</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//如果reducer是undefined，抛出错误</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="keyword">typeof</span> reducer(<span class="literal">undefined</span>, &#123;</span><br><span class="line">      type: ActionTypes.PROBE_UNKNOWN_ACTION()</span><br><span class="line">    &#125;) === <span class="string">'undefined'</span></span><br><span class="line">  ) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">`Reducer "<span class="subst">$&#123;key&#125;</span>" returned undefined when probed with a random type. `</span> +</span><br><span class="line">        <span class="string">`Don't try to handle <span class="subst">$&#123;</span></span></span><br><span class="line"><span class="string"><span class="subst">          ActionTypes.INIT</span></span></span><br><span class="line"><span class="string"><span class="subst">        &#125;</span> or other actions in "redux/*" `</span> +</span><br><span class="line">        <span class="string">`namespace. They are considered private. Instead, you must return the `</span> +</span><br><span class="line">        <span class="string">`current state for any unknown actions, unless it is undefined, `</span> +</span><br><span class="line">        <span class="string">`in which case you must return the initial state, regardless of the `</span> +</span><br><span class="line">        <span class="string">`action type. The initial state may not be undefined, but can be null.`</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>combineReducers函数返回一个combination函数，combination是一个标准的reducer函数，有初始化的state参数，和一个携带了actionType和数据的action对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">combination</span>(<span class="params">state = &#123;&#125;, action</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//如果有非法的reducer，就直接报错</span></span><br><span class="line">  <span class="keyword">if</span> (shapeAssertionError) &#123;</span><br><span class="line">    <span class="keyword">throw</span> shapeAssertionError</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> warningMessage = getUnexpectedStateShapeWarningMessage(</span><br><span class="line">      state,</span><br><span class="line">      finalReducers,</span><br><span class="line">      action,</span><br><span class="line">      unexpectedKeyCache</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">if</span> (warningMessage) &#123;</span><br><span class="line">      warning(warningMessage)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> hasChanged = <span class="literal">false</span></span><br><span class="line">  <span class="comment">//定义新的nextState</span></span><br><span class="line">  <span class="keyword">const</span> nextState = &#123;&#125;</span><br><span class="line">  <span class="comment">// 1，遍历reducers对象中的有效key，</span></span><br><span class="line">  <span class="comment">// 2，执行该key对应的value函数，即子reducer函数，并得到对应的state对象，即子state</span></span><br><span class="line">  <span class="comment">// 3，将新的子state挂到新的nextState对象上，key不变</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; finalReducerKeys.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = finalReducerKeys[i]</span><br><span class="line">    <span class="keyword">const</span> reducer = finalReducers[key]</span><br><span class="line">    <span class="keyword">const</span> previousStateForKey = state[key]</span><br><span class="line">    <span class="keyword">const</span> nextStateForKey = reducer(previousStateForKey, action)</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> nextStateForKey === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> errorMessage = getUndefinedStateErrorMessage(key, action)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(errorMessage)</span><br><span class="line">    &#125;</span><br><span class="line">    nextState[key] = nextStateForKey</span><br><span class="line">    <span class="comment">//如果hasChanged为true，那就是true了   后面的判断是，只要有一次nextStateForKey!== previousStateForKey不同，就说明整个state不同</span></span><br><span class="line">    hasChanged = hasChanged || nextStateForKey !== previousStateForKey</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//如果state发生变化了，直接返回新的nextState，否则，还是返回旧的state</span></span><br><span class="line">  <span class="keyword">return</span> hasChanged ? nextState : state</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1>总结</h1><ul><li><p>combineReducers 辅助函数的作用是，把一个由多个不同 reducer 函数作为 value 的 object，合并成一个最终的 reducer 函数，然后就可以对这个 reducer 调用 createStore。</p></li><li><p>合并后的 reducer 可以调用各个子 reducer，并把它们的结果合并成一个 state 对象。state 对象的结构由传入的多个 reducer 的 key 决定。</p></li><li><p>每个传入 combineReducers 的 reducer 都需满足以下规则：</p><p>所有未匹配到的 action，必须把它接收到的第一个参数也就是那个 state 原封不动返回。</p><p>永远不能返回 undefined。当过早 return 时非常容易犯这个错误，为了避免错误扩散，遇到这种情况时 combineReducers 会抛异常。</p><p>如果传入的 state 就是 undefined，一定要返回对应 reducer 的初始 state。根据上一条规则，初始 state 禁止使用 undefined。使用 ES6 的默认参数值语法来设置初始 state 很容易，但你也可以手动检查第一个参数是否为 undefined。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;combineReducers 理解&lt;/h1&gt;

&lt;p&gt;combineReducers.js文件对外暴露了一个函数combineReducers，combineReducer函数是redux的一个辅助性的函数，用于拆分createStore里面的第一个参数：reducer
      
    
    </summary>
    
      <category term="redux源码学习" scheme="http://yoursite.com/categories/redux%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="redux" scheme="http://yoursite.com/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>redux源码学习--compose</title>
    <link href="http://yoursite.com/2018/05/11/redux%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-compose/"/>
    <id>http://yoursite.com/2018/05/11/redux源码学习-compose/</id>
    <published>2018-05-11T05:48:56.000Z</published>
    <updated>2018-05-14T09:59:24.000Z</updated>
    
    <content type="html"><![CDATA[<p></p><h1>compose</h1><br>compose 是一个从右向左编写单参数组成的函数。最右边的函数可以接受多个参数，因为它提供了签名由此产生的复合函数。<p></p><h2 id="参数理解"><a href="#参数理解" class="headerlink" title="参数理解"></a>参数理解</h2><p><code>{...funcs}</code>需要合成的多个函数。每个函数都接收一个函数作为参数，然后返回一个函数。</p><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p><code>(Function)</code> 从右到左把接收到的函数合成后的最终函数。</p><h2 id="代码理解"><a href="#代码理解" class="headerlink" title="代码理解"></a>代码理解</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">...funcs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (funcs.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">arg</span> =&gt;</span> arg</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (funcs.length === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> funcs[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//对参数进行一个累加，就是依次以右边的参数作为左边方法的参数累加到最左边</span></span><br><span class="line">  <span class="keyword">return</span> funcs.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> (...args) =&gt; a(b(...args)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h1>总结</h1><br>compose 主要用于 applyMiddleware / createStore enhancer.<br>compose 做的只是让你不使用深度右括号的情况下来写深度嵌套的函数<br>compose的运行结果是一个函数，调用这个函数所传递的参数将会作为compose最后一个参数的参数，从而由内向外，逐步调用。<p></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;/p&gt;&lt;h1&gt;compose&lt;/h1&gt;&lt;br&gt;compose 是一个从右向左编写单参数组成的函数。最右边的函数可以接受多个参数，因为它提供了签名由此产生的复合函数。&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&quot;参数理解&quot;&gt;&lt;a href=&quot;#参数理解&quot; class=&quot;headerlin
      
    
    </summary>
    
      <category term="redux源码学习" scheme="http://yoursite.com/categories/redux%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="redux" scheme="http://yoursite.com/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>immutable.js 学习</title>
    <link href="http://yoursite.com/2018/05/11/immutable-js-%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/05/11/immutable-js-学习/</id>
    <published>2018-05-11T05:37:21.000Z</published>
    <updated>2018-05-14T09:59:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript 中的对象一般是可变的，因为Javascript为了节省内存，都是使用引用赋值，生成一个新对象如果简单的引用了原始对象，那对新对象作出的改变，也将影响到原始对象。平时简单的应用还不会特别明显，但是如果在复杂的应用中，对象的改变就会引起比较复杂的问题。往往都会使用deepCopy来解决这个问题，但是deepCopy往往会对整个对象的树进行拷贝，也会造成 CPU 和内存的浪费。<br>一、什么是immutable data？<br>Immutable Data 就是被创建之后不能给改变数据。Immutable 实现的原理是 Persistent Data Structure（持久化数据结构），新数据通过旧的数据创建，需要使旧数据依旧可用而且不能被改变。Immutable的这种实现原理，也避免了deepCopy复制所有节点带来的性能损耗。Immutable的实现原理见下图：<br><img src="http://img.alicdn.com/tps/i2/TB1zzi_KXXXXXctXFXXbrb8OVXX-613-575.gif" alt="Immutable原理"></p><p>二、Immutable 优点</p><ol><li>Immutable 降低了 Mutable 带来的复杂度</li><li>节省内存</li><li>Undo/Redo，Copy/Paste，甚至时间旅行这些功能做起来小菜一碟</li><li>并发安全</li><li>拥抱函数式编程</li></ol><p>三、Immutable 缺点：</p><ol><li>需要学习新的 API</li><li>增加了资源文件大小</li><li>容易与原生对象混淆</li></ol><p>四、Immutable的数据类型<br>Immutable 的几种数据类型<br>1.List: 有序索引集，类似JavaScript中的Array。<br>2.Map: 无序索引集，类似JavaScript中的Object。<br>3.OrderedMap: 有序的Map，根据数据的set()进行排序。<br>4.Set: 没有重复值的集合。<br>5.OrderedSet: 有序的Set，根据数据的add进行排序。<br>6.Stack: 有序集合，支持使用unshift（）和shift（）添加和删除。<br>7.Range(): 返回一个Seq.Indexed类型的集合，这个方法有三个参数，start表示开始值，默认值为0，end表示结束值，默认为无穷大，step代表每次增大的数值，默认为1.如果start = end,则返回空集合。<br>8.Repeat(): 返回一个vSeq.Indexe类型的集合，这个方法有两个参数，value代表需要重复的值，times代表要重复的次数，默认为无穷大。<br>9.Record: 一个用于生成Record实例的类。类似于JavaScript的Object，但是只接收特定字符串为key，具有默认值。<br>10.Seq: 序列，但是可能不能由具体的数据结构支持。<br>11.Collection: 是构建所有数据结构的基类，不可以直接构建。</p><p>用的最多就是List和Map，所以在这里主要介绍这两种数据类型的API。</p><p>五、常用的API<br>1.fromJS() 将一个js数据转换为Immutable类型的数据。<br>用法：fromJS(value, converter)<br>简介：value是要转变的数据，converter是要做的操作。第二个参数可不填，默认情况会将数组准换为List类型，将对象转换为Map类型，其余不做操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="string">'123'</span>,<span class="attr">b</span>:<span class="string">'234'</span>&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">key, value, path</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(key, value, path)</span><br><span class="line">   <span class="keyword">return</span> isIndexed(value) ? value.toList() : value.toOrderedMap())</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>2.toJS()<br>作用：将一个Immutable数据转换为JS类型的数据。<br>用法：value.toJS()</p><p>3.is()对两个对象进行比较。<br>用法：is(map1,map2)<br>简介：和js中对象的比较不同，在js中比较两个对象比较的是地址，但是在Immutable中比较的是这个对象hashCode和valueOf，只要两个对象的hashCode相等，值就是相同的，避免了深度遍历，提高了性能。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="built_in">Map</span>, is &#125; <span class="keyword">from</span> <span class="string">'immutable'</span></span><br><span class="line"><span class="keyword">const</span> map1 = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">1</span>, <span class="attr">c</span>: <span class="number">1</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> map2 = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">1</span>, <span class="attr">c</span>: <span class="number">1</span> &#125;)</span><br><span class="line">map1 === map2   <span class="comment">//false</span></span><br><span class="line"><span class="built_in">Object</span>.is(map1, map2) <span class="comment">// false</span></span><br><span class="line">is(map1, map2) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>4.List 和 Map<br>创建<br>List() 和 Map()</p><p>作用：用来创建一个新的List/Map对象</p><p>用法:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//List</span></span><br><span class="line"></span><br><span class="line">List(): List&lt;any&gt;</span><br><span class="line">List&lt;T&gt;(): List&lt;T&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Map</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Map</span>(): <span class="built_in">Map</span>&lt;any&gt;</span><br><span class="line"><span class="built_in">Map</span>&lt;T&gt;(): <span class="built_in">Map</span>&lt;T&gt;</span><br><span class="line">List.of() 和 <span class="built_in">Map</span>.of()</span><br></pre></td></tr></table></figure><p>作用：创建一个新的包含value的List/Map对象<br>用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List.of&lt;T&gt;(...values: <span class="built_in">Array</span>&lt;T&gt;): List&lt;T&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Map</span>.of&lt;T&gt;(...values: <span class="built_in">Object</span>&lt;T&gt;): <span class="built_in">Map</span>&lt;T&gt;</span><br></pre></td></tr></table></figure></p><p>判断</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List.isList() 和 <span class="built_in">Map</span>.isMap()</span><br></pre></td></tr></table></figure><p>作用：判断一个数据结构是不是List/Map类型<br>用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List.isList(maybeList: any): boolean</span><br><span class="line"></span><br><span class="line"><span class="built_in">Map</span>.isMap(maybeMap: any): boolean</span><br></pre></td></tr></table></figure></p><p>长度<br>size</p><p>作用：获取List/Map的长度</p><p>数据读取<br>get() 、 getIn()</p><p>作用：获取数据结构中的数据</p><p>has() 、 hasIn()</p><p>作用:判断是否存在某一个key</p><p>用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).has(<span class="string">'0'</span>); <span class="comment">//true</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).has(<span class="string">'0'</span>); <span class="comment">//true</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).hasIn([<span class="number">3</span>,<span class="string">'b'</span>]) <span class="comment">//true</span></span><br><span class="line">includes()</span><br></pre></td></tr></table></figure></p><p>作用：判断是否存在某一个value</p><p>用法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).includes(<span class="number">2</span>); <span class="comment">//true</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).includes(<span class="string">'2'</span>); <span class="comment">//false 不包含字符2</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).includes(<span class="number">5</span>); <span class="comment">//false </span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).includes(&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;) <span class="comment">//false</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).includes(Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;)) <span class="comment">//true</span></span><br><span class="line">first() 、 last()</span><br></pre></td></tr></table></figure><p>作用：用来获取第一个元素或者最后一个元素，若没有则返回undefined<br>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).first()<span class="comment">//1</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).last()<span class="comment">//&#123;a:4,b:5&#125;</span></span><br><span class="line"></span><br><span class="line">Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>,<span class="attr">c</span>:&#123;<span class="attr">d</span>:<span class="number">3</span>,<span class="attr">e</span>:<span class="number">4</span>&#125;&#125;).first() <span class="comment">//1</span></span><br><span class="line">Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>,<span class="attr">c</span>:&#123;<span class="attr">d</span>:<span class="number">3</span>,<span class="attr">e</span>:<span class="number">4</span>&#125;&#125;).first() <span class="comment">//&#123;d:3,e:4&#125;</span></span><br></pre></td></tr></table></figure><p>数据修改<br>注：这里对于数据的修改，是对原数据进行操作后的值赋值给一个新的数据，并不会对原数据进行修改，因为Immutable是不可变的数据类型。</p><p>设置 set()</p><p>作用：设置第一层key、index的值</p><p>用法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set(index: number, <span class="attr">value</span>: T): List&lt;T&gt;</span><br><span class="line">set(key: K, <span class="attr">value</span>: V): <span class="keyword">this</span></span><br><span class="line">List在使用的时候，将index为number值设置为value。<span class="built_in">Map</span>在使用的时候，将key的值设置为value。</span><br></pre></td></tr></table></figure><p>在List中使用时，若传入的number为负数，则将index为size+index的值设置为value，例，若传入-1，则将size-1的值设为value。若传入的number的值超过了List的长度，则将List自动补全为传入的number的值，将number设置为value，其余用undefined补全。注：跟js中不同，List中不存在空位，[,,,],List中若没有值，则为undefined。</p><p>代码实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//////List</span></span><br><span class="line"><span class="keyword">const</span> originalList = List([ <span class="number">0</span> ]);</span><br><span class="line"><span class="comment">// List [ 0 ]</span></span><br><span class="line">originalList.set(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// List [ 0, 1 ]</span></span><br><span class="line">originalList.set(<span class="number">0</span>, <span class="string">'overwritten'</span>);</span><br><span class="line"><span class="comment">// List [ "overwritten" ]</span></span><br><span class="line">originalList.set(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// List [ 0, undefined, 2 ]</span></span><br><span class="line"></span><br><span class="line">List().set(<span class="number">50000</span>, <span class="string">'value'</span>).size;</span><br><span class="line"><span class="comment">// 50001</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//////Map</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="built_in">Map</span> &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</span><br><span class="line"><span class="keyword">const</span> originalMap = <span class="built_in">Map</span>()</span><br><span class="line"><span class="keyword">const</span> newerMap = originalMap.set(<span class="string">'key'</span>, <span class="string">'value'</span>)</span><br><span class="line"><span class="keyword">const</span> newestMap = newerMap.set(<span class="string">'key'</span>, <span class="string">'newer value'</span>)</span><br><span class="line"></span><br><span class="line">originalMap</span><br><span class="line"><span class="comment">// Map &#123;&#125;</span></span><br><span class="line">newerMap</span><br><span class="line"><span class="comment">// Map &#123; "key": "value" &#125;</span></span><br><span class="line">newestMap</span><br><span class="line"><span class="comment">// Map &#123; "key": "newer value" &#125;</span></span><br></pre></td></tr></table></figure></p><p>setIn()<br>作用：设置深层结构中某属性的值<br>用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setIn(keyPath: Iterable&lt;any&gt;, <span class="attr">value</span>: any): <span class="keyword">this</span></span><br><span class="line">用法与set()一样，只是第一个参数是一个数组，代表要设置的属性所在的位置</span><br></pre></td></tr></table></figure></p><p>删除 delete</p><p>作用：用来删除第一层结构中的属性</p><p>用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span>(index: number): List&lt;T&gt;  <span class="comment">//List</span></span><br><span class="line"><span class="keyword">delete</span>(key: K): <span class="keyword">this</span>  <span class="comment">//Map</span></span><br><span class="line">deleteIn()</span><br></pre></td></tr></table></figure></p><p>用来删除深层数据，用法参考setIn<br>deleteAll() (Map独有，List没有)<br>作用：用来删除Map中的多个key<br>用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deleteAll(keys: Iterable&lt;K&gt;): <span class="keyword">this</span></span><br></pre></td></tr></table></figure></p><p>代码示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> names = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="string">"Aaron"</span>, <span class="attr">b</span>: <span class="string">"Barry"</span>, <span class="attr">c</span>: <span class="string">"Connor"</span> &#125;)</span><br><span class="line">names.deleteAll([ <span class="string">'a'</span>, <span class="string">'c'</span> ])</span><br><span class="line"><span class="comment">// Map &#123; "b": "Barry" &#125;</span></span><br></pre></td></tr></table></figure></p><p>更新 update()<br>作用：对对象中的某个属性进行更新，可对原数据进行相关操作<br>用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update(index: number, <span class="attr">updater</span>: <span class="function">(<span class="params">value: T</span>) =&gt;</span> T): <span class="keyword">this</span> <span class="comment">//List</span></span><br><span class="line">update(key: K, <span class="attr">updater</span>: <span class="function">(<span class="params">value: V</span>) =&gt;</span> V): <span class="keyword">this</span>  <span class="comment">//Map</span></span><br></pre></td></tr></table></figure></p><p>代码示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">////List</span></span><br><span class="line"><span class="keyword">const</span> list = List([ <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span> ])</span><br><span class="line"><span class="keyword">const</span> result = list.update(<span class="number">2</span>, val =&gt; val.toUpperCase())</span><br><span class="line"></span><br><span class="line"><span class="comment">///Map</span></span><br><span class="line"><span class="keyword">const</span> aMap = <span class="built_in">Map</span>(&#123; <span class="attr">key</span>: <span class="string">'value'</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> newMap = aMap.update(<span class="string">'key'</span>, value =&gt; value + value)</span><br><span class="line">updateIn()</span><br></pre></td></tr></table></figure></p><p>用法参考setIn</p><p>清除 clear()</p><p>作用：清除所有数据</p><p>用法：clear(): this</p><p>代码示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Map</span>(&#123; <span class="attr">key</span>: <span class="string">'value'</span> &#125;).clear()  <span class="comment">//Map</span></span><br><span class="line">List([ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ]).clear()   <span class="comment">// List</span></span><br></pre></td></tr></table></figure></p><p>List中的各种删除与插入<br>List对应的数据结构是js中的数组，所以数组的一些方法在Immutable中也是通用的，比如push，pop,shift，unshift，insert。</p><p>push()：在List末尾插入一个元素<br>pop(): 在List末尾删除一个元素<br>unshift: 在List首部插入一个元素<br>shift: 在List首部删除一个元素<br>insert：在List的index处插入元素<br>代码实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">List([ <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ]).insert(<span class="number">6</span>, <span class="number">5</span>) </span><br><span class="line"><span class="comment">//List [ 0, 1, 2, 3, 4, 5 ]</span></span><br><span class="line">List([ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ]).push(<span class="number">5</span>)</span><br><span class="line"><span class="comment">// List [ 1, 2, 3, 4, 5 ]</span></span><br><span class="line">List([ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ]).pop()</span><br><span class="line"><span class="comment">// List[ 1, 2, 3 ]</span></span><br><span class="line">List([ <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).unshift(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// List [ 1, 2, 3, 4 ]</span></span><br><span class="line">List([ <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ]).shift();</span><br><span class="line"><span class="comment">// List [ 1, 2, 3, 4 ]</span></span><br><span class="line">List中还有一个特有的方法用法设置List的长度，setSize()</span><br><span class="line">List([]).setSize(<span class="number">2</span>).toJS() <span class="comment">//[undefined,undefined]</span></span><br></pre></td></tr></table></figure></p><p>关于merge<br>merge</p><p>作用：浅合并，新数据与旧数据对比，旧数据中不存在的属性直接添加，就数据中已存在的属性用新数据中的覆盖</p><p>mergrWith</p><p>作用：自定义浅合并，可自行设置某些属性的值</p><p>mergeIn</p><p>作用：对深层数据进行浅合并</p><p>mergeDeep</p><p>作用：深合并，新旧数据中同时存在的的属性为新旧数据合并之后的数据</p><p>mergeDeepIn</p><p>作用：对深层数据进行深合并</p><p>mergrDeepWith</p><p>作用:自定义深合并，可自行设置某些属性的值<br>这里用一段示例彻底搞懂merge，此示例为Map结构，List与Map原理相同<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Map1 = Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">111</span>,<span class="attr">b</span>:<span class="number">222</span>,<span class="attr">c</span>:&#123;<span class="attr">d</span>:<span class="number">333</span>,<span class="attr">e</span>:<span class="number">444</span>&#125;&#125;);</span><br><span class="line"><span class="keyword">const</span> Map2 = Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">111</span>,<span class="attr">b</span>:<span class="number">222</span>,<span class="attr">c</span>:&#123;<span class="attr">e</span>:<span class="number">444</span>,<span class="attr">f</span>:<span class="number">555</span>&#125;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Map3 = Map1.merge(Map2);</span><br><span class="line"> <span class="comment">//Map &#123;a:111,b:222,c:&#123;e:444,f:555&#125;&#125;</span></span><br><span class="line"><span class="keyword">const</span> Map4 = Map1.mergeDeep(Map2);</span><br><span class="line"> <span class="comment">//Map &#123;a:111,b:222,c:&#123;d:333,e:444,f:555&#125;&#125;</span></span><br><span class="line"><span class="keyword">const</span> Map5 = Map1.mergeWith(<span class="function">(<span class="params">oldData,newData,key</span>)=&gt;</span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(key === <span class="string">'a'</span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="number">666</span>;</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> newData</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,Map2);</span><br><span class="line"> <span class="comment">//Map &#123;a:666,b:222,c:&#123;e:444,f:555&#125;&#125;</span></span><br></pre></td></tr></table></figure></p><p>序列算法<br>concat()<br>作用：对象的拼接，用法与js数组中的concat()相同，返回一个新的对象。<br>用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> List = list1.concat(list2)</span><br></pre></td></tr></table></figure></p><p>map()<br>作用：遍历整个对象，对Map/List元素进行操作，返回一个新的对象。<br>用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Map</span>(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;).map(<span class="function"><span class="params">val</span>=&gt;</span><span class="number">10</span>*val)</span><br><span class="line"><span class="comment">//Map&#123;a:10,b:20&#125;</span></span><br></pre></td></tr></table></figure></p><p>Map特有的mapKey()<br>作用：遍历整个对象，对Map元素的key进行操作，返回一个新的对象。<br>用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Map</span>(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;).mapKey(<span class="function"><span class="params">val</span>=&gt;</span>val+<span class="string">'l'</span>)</span><br><span class="line"><span class="comment">//Map&#123;al:10,bl:20&#125;</span></span><br></pre></td></tr></table></figure></p><p>Map特有的mapEntries()</p><p>作用：遍历整个对象，对Map元素的key和value同时进行操作，返回一个新的对象。Map的map()也可实现此功能。<br>用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Map</span>(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;).map(<span class="function">(<span class="params">key,val</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [key+<span class="string">'l'</span>,val*<span class="number">10</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//Map&#123;al:10,bl:20&#125;</span></span><br></pre></td></tr></table></figure></p><p>过滤 filter<br>作用：返回一个新的对象，包括所有满足过滤条件的元素<br>用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Map</span>(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;).filter(<span class="function">(<span class="params">key,val</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> val == <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//Map&#123;b:2&#125;</span></span><br></pre></td></tr></table></figure></p><p>还有一个filterNot()方法，与此方法正好相反。<br>反转 reverse<br>作用：将数据的结构进行反转<br>代码示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]).reverse();</span><br><span class="line"><span class="comment">// List [5,4,3,2,1]</span></span><br><span class="line">Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:&#123;<span class="attr">c</span>:<span class="number">2</span>,<span class="attr">d</span>:<span class="number">3</span>&#125;,<span class="attr">e</span>:<span class="number">4</span>&#125;).recerse();</span><br><span class="line"><span class="comment">//Map &#123;e:4,b:&#123;c:2,d:3&#125;,a:1&#125;</span></span><br></pre></td></tr></table></figure></p><p>排序 sort &amp; sortBy<br>作用：对数据结构进行排序<br>代码示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///List</span></span><br><span class="line">Immutable.fromJS([<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">1</span>]).sort()</span><br><span class="line"><span class="comment">// List [1,2,3,4,5,6]</span></span><br><span class="line">Immutable.fromJS([<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">1</span>]).sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (a &lt; b) &#123; <span class="keyword">return</span> <span class="number">-1</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (a &gt; b) &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (a === b) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// List [1,2,3,4,5,6]</span></span><br><span class="line">Immutable.fromJS([&#123;<span class="attr">a</span>:<span class="number">3</span>&#125;,&#123;<span class="attr">a</span>:<span class="number">2</span>&#125;,&#123;<span class="attr">a</span>:<span class="number">4</span>&#125;,&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;]).sortBy(<span class="function">(<span class="params">val,index,obj</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> val.get(<span class="string">'a'</span>)</span><br><span class="line">&#125;,(a,b)=&gt;&#123;</span><br><span class="line">  <span class="keyword">if</span> (a &lt; b) &#123; <span class="keyword">return</span> <span class="number">-1</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (a &gt; b) &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (a === b) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//List  [ &#123;a:3&#125;, &#123;a:2&#125;, &#123;a:4&#125;, &#123;a:1&#125; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Map</span></span><br><span class="line"></span><br><span class="line">Immutable.fromJS( &#123;<span class="attr">b</span>:<span class="number">1</span>, <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">c</span>: <span class="number">2</span>, <span class="attr">d</span>:<span class="number">5</span>&#125; ).sort()</span><br><span class="line"><span class="comment">//Map &#123;b: 1, c: 2, a: 3, d: 5&#125;</span></span><br><span class="line">Immutable.fromJS( &#123;<span class="attr">b</span>:<span class="number">1</span>, <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">c</span>: <span class="number">2</span>, <span class="attr">d</span>:<span class="number">5</span>&#125; ).sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (a &lt; b) &#123; <span class="keyword">return</span> <span class="number">-1</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (a &gt; b) &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (a === b) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//Map &#123;b: 1, c: 2, a: 3, d: 5&#125;</span></span><br><span class="line">Immutable.fromJS( &#123;<span class="attr">b</span>:<span class="number">1</span>, <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">c</span>: <span class="number">2</span>, <span class="attr">d</span>:<span class="number">5</span>&#125; ).sortBy(<span class="function">(<span class="params">value, key, obj</span>)=&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> value</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//Map &#123;b: 1, c: 2, a: 3, d: 5&#125;</span></span><br></pre></td></tr></table></figure></p><p>分组 groupBy<br>作用：对数据进行分组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> listOfMaps = List([</span><br><span class="line">  <span class="built_in">Map</span>(&#123; <span class="attr">v</span>: <span class="number">0</span> &#125;),</span><br><span class="line">  <span class="built_in">Map</span>(&#123; <span class="attr">v</span>: <span class="number">1</span> &#125;),</span><br><span class="line">  <span class="built_in">Map</span>(&#123; <span class="attr">v</span>: <span class="number">1</span> &#125;),</span><br><span class="line">  <span class="built_in">Map</span>(&#123; <span class="attr">v</span>: <span class="number">0</span> &#125;),</span><br><span class="line">  <span class="built_in">Map</span>(&#123; <span class="attr">v</span>: <span class="number">2</span> &#125;)</span><br><span class="line">])</span><br><span class="line"><span class="keyword">const</span> groupsOfMaps = listOfMaps.groupBy(<span class="function"><span class="params">x</span> =&gt;</span> x.get(<span class="string">'v'</span>))</span><br><span class="line"><span class="comment">// Map &#123;</span></span><br><span class="line"><span class="comment">//   0: List [ Map&#123; "v": 0 &#125;, Map &#123; "v": 0 &#125; ],</span></span><br><span class="line"><span class="comment">//   1: List [ Map&#123; "v": 1 &#125;, Map &#123; "v": 1 &#125; ],</span></span><br><span class="line"><span class="comment">//   2: List [ Map&#123; "v": 2 &#125; ],</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure></p><p>查找数据<br>indexOf() 、 lastIndexOf Map不存在此方法<br>作用：和js数组中的方法相同，查找第一个或者最后一个value的index值，找不到则返回-1<br>用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).indexof(<span class="number">3</span>) <span class="comment">//2</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).lastIndexof(<span class="number">3</span>) <span class="comment">//2</span></span><br></pre></td></tr></table></figure></p><p>findIndex() 、 findLastIndex() Map不存在此方法<br>作用：查找满足要求的元素的index值<br>用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).findIndex(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value%<span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;)   <span class="comment">// 1</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).findLastIndex(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> index%<span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;)  <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></p><p>find() 、 findLast()<br>作用：查找满足条件的元素的value值<br>用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).find(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value%<span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;)  <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).findLast(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value%<span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;)  <span class="comment">// 4</span></span><br></pre></td></tr></table></figure></p><p>findKey() 、 findLastKey()<br>作用：查找满足条件的元素的key值<br>用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).findKey(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value%<span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;)  <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).findLastKey(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value%<span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;)  <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></p><p>findEntry() 、 findLastEntry()<br>作用：查找满足条件的元素的键值对 key:value<br>用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).findEntry(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value%<span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;)  <span class="comment">// [1,2]</span></span><br><span class="line"></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).findLastEntry(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value%<span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;)  <span class="comment">// [3,4]</span></span><br></pre></td></tr></table></figure></p><p>keyOf() lastKeyOf()<br>作用：查找某一个value对应的key值<br>用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).keyOf(<span class="number">2</span>) <span class="comment">//1</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).lastKeyOf(<span class="number">2</span>) <span class="comment">//1</span></span><br></pre></td></tr></table></figure></p><p>max() 、 maxBy()<br>作用：查找最大值<br>用法:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).max() <span class="comment">//4</span></span><br><span class="line"></span><br><span class="line">Immutable.fromJS([&#123;a;<span class="number">1</span>&#125;,&#123;<span class="attr">a</span>:<span class="number">2</span>&#125;,&#123;<span class="attr">a</span>: <span class="number">3</span>&#125;,&#123;<span class="attr">a</span>:<span class="number">4</span>&#125;]).maxBy(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value.get(<span class="string">'a'</span>)</span><br><span class="line">&#125;)  <span class="comment">//&#123;a:4&#125;</span></span><br></pre></td></tr></table></figure></p><p>min() 、 minBy()</p><p>作用：查找最小值<br>用法:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).min() <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">Immutable.fromJS([&#123;a;<span class="number">1</span>&#125;,&#123;<span class="attr">a</span>:<span class="number">2</span>&#125;,&#123;<span class="attr">a</span>: <span class="number">3</span>&#125;,&#123;<span class="attr">a</span>:<span class="number">4</span>&#125;]).minBy(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value.get(<span class="string">'a'</span>)</span><br><span class="line">&#125;)  <span class="comment">//&#123;a:1&#125;</span></span><br></pre></td></tr></table></figure></p><p>创建子集<br>slice()</p><p>作用： 和原生js中数组的slice数组一样，包含两个参数，start和end，start代表开始截取的位置，end代表结束的位置，不包括第end的元素。若不包括end，则返回整个对象，若end为负数，则返回（start，length-end）对应的数据。若start只有一个并且为负数，则返回最后的end个元素。</p><p>用法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).slice(<span class="number">0</span>); <span class="comment">//[1,2,3,4]</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).slice(<span class="number">0</span>,<span class="number">2</span>); <span class="comment">//[1,2]</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).slice(<span class="number">-2</span>); <span class="comment">//[3,4]</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).slice(<span class="number">0</span>,<span class="number">-2</span>); <span class="comment">//[1,2]</span></span><br></pre></td></tr></table></figure><p>rest()<br>作用：返回除第一个元素之外的所有元素<br>用法:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).rest()<span class="comment">//[2,3,4]</span></span><br></pre></td></tr></table></figure></p><p>butLast()<br>作用：返回除最后一个元素之外的所有元素<br>用法:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).rest()<span class="comment">//[1,2,3]</span></span><br></pre></td></tr></table></figure></p><p>skip()<br>作用：有一个参数n, 返回截掉前n个元素之后剩下的所有元素<br>用法:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).skip(<span class="number">1</span>)<span class="comment">//[2,3,4]</span></span><br></pre></td></tr></table></figure></p><p>skipLast()</p><p>作用：有一个参数n, 返回截掉最后n个元素之后剩下的所有元素</p><p>用法:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).skip(<span class="number">1</span>)<span class="comment">//[1,2,3]</span></span><br></pre></td></tr></table></figure><p>skipWhile()</p><p>作用：返回从第一次返回false之后的所有元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).skipWhile(list.skipWhile(<span class="function">(<span class="params">value,index,list</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">2</span>;</span><br><span class="line">&#125;))<span class="comment">// [1,2,3,4]</span></span><br></pre></td></tr></table></figure><p>skipUntil()</p><p>作用：返回从第一次返回true之后的所有元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).skipUntil(list.skipWhile(<span class="function">(<span class="params">value,index,list</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">2</span>;</span><br><span class="line">&#125;))<span class="comment">// [3,4]</span></span><br></pre></td></tr></table></figure><p>take()</p><p>作用：有一个参数n, 返回前n个元素</p><p>用法:Immutable.fromJS([1, 2, 3, 4]).take(2)//[1,2]</p><p>takeLast()</p><p>作用：有一个参数n, 返回最后n个元素</p><p>用法:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).takeLast(<span class="number">2</span>)<span class="comment">//[3,4]</span></span><br></pre></td></tr></table></figure></p><p>takeWhile()</p><p>作用：返回从第一次返回false之前的所有元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).skipWhile(list.takeWhile(<span class="function">(<span class="params">value,index,list</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">2</span>;</span><br><span class="line">&#125;))<span class="comment">// []</span></span><br></pre></td></tr></table></figure><p>takeUntil()</p><p>作用：返回从第一次返回true之前的所有元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).skipUntil(list.takeUntil(<span class="function">(<span class="params">value,index,list</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">2</span>;</span><br><span class="line">&#125;))<span class="comment">// [1,2]</span></span><br></pre></td></tr></table></figure><p>处理数据<br>reduce()</p><p>作用：和js中数组中的reduce相同,按索引升序的顺序处理元素</p><p>用法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).reduce(<span class="function">(<span class="params">pre,next,index,arr</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(pre+next)</span><br><span class="line">  <span class="keyword">return</span> pre+next; </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 3 6 10</span></span><br></pre></td></tr></table></figure><p>reduceRight()</p><p>作用：和js中数组中的reduce相同,按索引降序的顺序处理元素</p><p>用法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).reduceRight(<span class="function">(<span class="params">pre,next,index,arr</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(pre+next)</span><br><span class="line">  <span class="keyword">return</span> pre+next; </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 7 9 10</span></span><br></pre></td></tr></table></figure><p>every()</p><p>作用：判断整个对象总中所有的元素是不是都满足某一个条件，都满足返回true，反之返回false。</p><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).every(<span class="function">(<span class="params">value,index,arr</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">2</span></span><br><span class="line">&#125;) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>some()</p><p>作用：判断整个对象总中所有的元素是不是存在满足某一个条件的元素，若存在返回true，反之返回false。</p><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).some(<span class="function">(<span class="params">value,index,arr</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">2</span></span><br><span class="line">&#125;) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>join()</p><p>作用：同js中数组的join方法。把准换为字符串</p><p>用法：Immutable.fromJS([1,2,3,4]).join(‘,’) //1,2,3,4</p><p>isEmpty()</p><p>作用：判断是否为空</p><p>用法:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([]).isEmpty(); <span class="comment">// true</span></span><br><span class="line">Immutable.fromJS(&#123;&#125;).isEmpty(); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>count()</p><p>作用：返回元素个数，可自定义条件，返回满足条件的个数</p><p>用法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]);</span><br><span class="line"><span class="keyword">const</span> map = Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>,<span class="attr">c</span>:<span class="number">3</span>,<span class="attr">d</span>:<span class="number">4</span>&#125;);</span><br><span class="line"></span><br><span class="line">list.count(<span class="function">(<span class="params">value,index,list</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">2</span>;</span><br><span class="line">&#125;)    <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">map.count(<span class="function">(<span class="params">value,index,list</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">2</span>;</span><br><span class="line">&#125;)    <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>countBy()</p><p>作用：与count不同的是，countBy返回一个对象</p><p>用法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]);</span><br><span class="line"><span class="keyword">const</span> map = Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>,<span class="attr">c</span>:<span class="number">3</span>,<span class="attr">d</span>:<span class="number">4</span>&#125;);</span><br><span class="line">list.countBy(<span class="function">(<span class="params">value,index,list</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">2</span>;</span><br><span class="line">&#125; <span class="comment">//&#123;false: 2, true: 2&#125;</span></span><br><span class="line">map.countBy(<span class="function">(<span class="params">value,index,list</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">2</span>;</span><br><span class="line">&#125; <span class="comment">//&#123;false: 2, true: 2&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JavaScript 中的对象一般是可变的，因为Javascript为了节省内存，都是使用引用赋值，生成一个新对象如果简单的引用了原始对象，那对新对象作出的改变，也将影响到原始对象。平时简单的应用还不会特别明显，但是如果在复杂的应用中，对象的改变就会引起比较复杂的问题。往往
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
      <category term="immutable" scheme="http://yoursite.com/tags/immutable/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>redux 源码学习——createStore</title>
    <link href="http://yoursite.com/2018/05/11/redux-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E2%80%94createStore/"/>
    <id>http://yoursite.com/2018/05/11/redux-源码学习—createStore/</id>
    <published>2018-05-11T02:07:29.000Z</published>
    <updated>2018-05-14T09:59:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1>createStore 理解</h1><p>创建一个保存state树的Redux store，store，可以让你阅读state，发送actions，并订阅更改。改变store数据的唯一方法是调用<code>dispatch（）</code>方法。<br>应用中只能有一个store，指定state树的不同部分如何响应actions，可以通过使用<code>combineReducers</code>方法来组合多个reducer，将其转换为单个reducer。</p><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>createStore.js是redux的核心文件，对外暴露了一个createStore函数，函数执行后返回一个对象，这个对象包括四个方法，分别是dispatch, subscribe, getState, replaceReducer。这些方法都redux中store的关键方法，后面将慢慢的展开理解。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">createStore</span>(<span class="params">reducer, preloadedState, enhancer</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//other codes</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        dispatch,</span><br><span class="line">        subscribe,</span><br><span class="line">        getState,</span><br><span class="line">        replaceReducer,</span><br><span class="line">        [$$observable]: observable</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="createStore-的参数理解"><a href="#createStore-的参数理解" class="headerlink" title="createStore 的参数理解"></a>createStore 的参数理解</h2><p>createStore有三个参数：reducer, preloadedState, enhancer。</p><ul><li>reducer：reducer是一个函数，通过给定当前state树和要处理的actions，返回下一个state树。</li><li>preloadedState：初始state，初始状态。您可以选择指定它从应用程序的服务器中来融合state，或者还原先前序列化的用户会话。如果使用<code>combineReducers</code>来生成根reducer函数，则必须是一个与“combineReducers”键相同的对象。</li><li>enhancer：store增强器。您可以选择指定它通过第三方功能增强store，如中间件，时间旅行，持久化等。Redux附带的唯一store增强器是<code>applyMiddleware（）</code>方法。<br>这个参数特别有意思，如果该enhancer参数存在的话，会将当前的createStore函数作为参数传入enhancer函数，并且，enhancer执行之后得到一个新函数，该新函数其实就是一个加强版的createStore函数，新的函数会把之前的reducer和preloadeState作为参数传入并执行。这个enhancer参数为redux中间件提供了入口。</li></ul><h2 id="参数检查及异常处理"><a href="#参数检查及异常处理" class="headerlink" title="参数检查及异常处理"></a>参数检查及异常处理</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果没有传preloadedState参数，但是enhancer参数传了，把两者交换一下</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> preloadedState === <span class="string">'function'</span> &amp;&amp; <span class="keyword">typeof</span> enhancer === <span class="string">'undefined'</span>)          </span><br><span class="line">  &#123;</span><br><span class="line">    enhancer = preloadedState</span><br><span class="line">    preloadedState = <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//如果enhancer传了，但是不是函数，就抛出错误，否则执行enhancer函数，</span></span><br><span class="line"><span class="comment">//并继续执行enhancer函数返回的加强版的createStore函数，</span></span><br><span class="line"><span class="comment">//参数reducer以及preloadeState和原createStore函数保持一致</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> enhancer !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> enhancer !== <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Expected the enhancer to be a function.'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> enhancer(createStore)(reducer, preloadedState)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//如果reducer不是函数，则抛出错误</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> reducer !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Expected the reducer to be a function.'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定义局部变量"><a href="#定义局部变量" class="headerlink" title="定义局部变量"></a>定义局部变量</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> currentReducer = reducer <span class="comment">//保存了当前的reducer函数，该reducer函数可以被动态替换掉</span></span><br><span class="line"><span class="keyword">let</span> currentState = preloadedState <span class="comment">//保存了当前的state数据</span></span><br><span class="line"><span class="keyword">let</span> currentListeners = [] <span class="comment">//保存了当前注册的函数列表</span></span><br><span class="line"><span class="keyword">let</span> nextListeners = currentListeners</span><br><span class="line"><span class="keyword">let</span> isDispatching = <span class="literal">false</span>  <span class="comment">//是否正在dispatch一个action</span></span><br></pre></td></tr></table></figure><h2 id="定义返回store的方法"><a href="#定义返回store的方法" class="headerlink" title="定义返回store的方法"></a>定义返回store的方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//确保nextListeners和currentListeners不是同一个引用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ensureCanMutateNextListeners</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (nextListeners === currentListeners) &#123;</span><br><span class="line">    <span class="comment">//如果是同一个引用，则浅拷贝currentListeners到nextListeners</span></span><br><span class="line">    nextListeners = currentListeners.slice()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//getState函数，返回局部变量currentState，以获取当前状态</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getState</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> currentState</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册一个函数，将注册函数放入局部变量nextListeners数组里面</span></span><br><span class="line"><span class="comment">//注册函数的返回值是一个注销函数，注销函数执行可以将刚刚添加进nextListeners的listener函数又删除掉。这里很有意思，外部必须在调用subscribe执行现场保存好unsubscribe函数，否则将无法注销一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">subscribe</span>(<span class="params">listener</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//如果listener不是函数，直接报错</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> listener !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Expected listener to be a function.'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> isSubscribed = <span class="literal">true</span></span><br><span class="line">  <span class="comment">//确保nextListeners不是currentListeners，以保证修改的是nextListeners，而不是currentListeners</span></span><br><span class="line">  ensureCanMutateNextListeners()</span><br><span class="line">  <span class="comment">//将监听函数放入监听函数列表尾部</span></span><br><span class="line">  nextListeners.push(listener)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//返回一个函数，该函数可以从监听函数列表中删除刚刚注册的监听函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">unsubscribe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isSubscribed) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    isSubscribed = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    ensureCanMutateNextListeners()</span><br><span class="line">    <span class="keyword">const</span> index = nextListeners.indexOf(listener)</span><br><span class="line">    nextListeners.splice(index, <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//触发action的函数：每次触发一个action，currentListeners中的所有函数都要执行一遍</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">action</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//如果action不是普通的对象，直接报错</span></span><br><span class="line">  <span class="keyword">if</span> (!isPlainObject(action)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">      <span class="string">'Actions must be plain objects. '</span> +</span><br><span class="line">      <span class="string">'Use custom middleware for async actions.'</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//如果action没有type属性，直接报错：说明action对象必须要包含type字段</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> action.type === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">      <span class="string">'Actions may not have an undefined "type" property. '</span> +</span><br><span class="line">      <span class="string">'Have you misspelled a constant?'</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//如果当前正在触发另外一个action，直接报错</span></span><br><span class="line">  <span class="keyword">if</span> (isDispatching) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Reducers may not dispatch actions.'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//先将标志位置为true</span></span><br><span class="line">    isDispatching = <span class="literal">true</span></span><br><span class="line">    <span class="comment">//执行传入的reducer函数，该函数返回一个新的state对象，并赋值给currentState变量</span></span><br><span class="line">    currentState = currentReducer(currentState, action)</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//reducer函数执行完成后，将isDispatching恢复成false，方便下次action的触发</span></span><br><span class="line">    isDispatching = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//每一次触发一个action，所有的监听函数都要全部重新执行一遍，</span></span><br><span class="line">  <span class="comment">//并且把上次得到的新的监听函数列表赋值成为当前的监听函数列表。这是一个懒操作，并不是在subscribe的时候就操作了，而是在dispatch的时候才操作</span></span><br><span class="line">  <span class="keyword">const</span> listeners = currentListeners = nextListeners</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; listeners.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> listener = listeners[i]</span><br><span class="line">    listener()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//该dispatch函数的返回值是原来的action</span></span><br><span class="line">  <span class="keyword">return</span> action</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//替换reducer函数：这个函数允许运行时动态替换最开始调用createStore函数时传入的reducer，并且替换掉reducer之后，重新dispatch一个action，得到全新的currentState对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceReducer</span>(<span class="params">nextReducer</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//如果nextReducer不是函数，直接报错</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> nextReducer !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Expected the nextReducer to be a function.'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//把新的reducer赋值给当前的currentReducer变量，得到一个全新的currentReducer</span></span><br><span class="line">  currentReducer = nextReducer</span><br><span class="line">  <span class="comment">// 触发一个初始action：</span></span><br><span class="line">  <span class="comment">// 1.这样就可以完成一次监听函数列表的全部调用</span></span><br><span class="line">  <span class="comment">// 2.可以得到一个全新的currentState；</span></span><br><span class="line">  dispatch(&#123;<span class="attr">type</span>: ActionTypes.INIT&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observable</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> outerSubscribe = subscribe</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * The minimal observable subscription method.</span></span><br><span class="line"><span class="comment">      * @param &#123;Object&#125; observer Any object that can be used as an observer.</span></span><br><span class="line"><span class="comment">      * The observer object should have a `next` method.</span></span><br><span class="line"><span class="comment">      * @returns &#123;subscription&#125; An object with an `unsubscribe` method that can</span></span><br><span class="line"><span class="comment">      * be used to unsubscribe the observable from the store, and prevent further</span></span><br><span class="line"><span class="comment">      * emission of values from the observable.</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    subscribe(observer) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> observer !== <span class="string">'object'</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Expected the observer to be an object.'</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">observeState</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (observer.next) &#123;</span><br><span class="line">          observer.next(getState())</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      observeState()</span><br><span class="line">      <span class="keyword">const</span> unsubscribe = outerSubscribe(observeState)</span><br><span class="line">      <span class="keyword">return</span> &#123;unsubscribe&#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    [$$observable]() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化:"></a>初始化:</h2><p>初始化很简单，一句代码，直接调用一次dispatch，就会执行所有的注册函数，并且执行reducer函数，生成初始化的state<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//马上内部调用一次初始化的操作，根据传入的reducer函数，preloadedState生成一个全新的currentState和全新的reducer</span></span><br><span class="line">dispatch(&#123;<span class="attr">type</span>: ActionTypes.INIT&#125;)</span><br></pre></td></tr></table></figure></p><h1>总结</h1><ul><li>createStore函数定义了几个局部变量用于记录状态，主要包括currentState记录数据状态，currentListeners记录注册函数列表，currentReducer记录当前的reducer函数。</li><li>定义了几个函数用于修改上面的几个局部变量：主要包括getState函数用于获取currentState；replaceReducer用于替换currentReducer；subscribe用于修改currentListeners列表；dispatch用于触发currentReducer执行，生成新的currentState，并且，执行currentListeners列表中的每一个函数。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;createStore 理解&lt;/h1&gt;

&lt;p&gt;创建一个保存state树的Redux store，store，可以让你阅读state，发送actions，并订阅更改。改变store数据的唯一方法是调用&lt;code&gt;dispatch（）&lt;/code&gt;方法。&lt;br&gt;应用中只能有
      
    
    </summary>
    
      <category term="redux源码学习" scheme="http://yoursite.com/categories/redux%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="redux" scheme="http://yoursite.com/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>瀑布流布局</title>
    <link href="http://yoursite.com/2018/05/09/%E7%80%91%E5%B8%83%E6%B5%81%E5%B8%83%E5%B1%80/"/>
    <id>http://yoursite.com/2018/05/09/瀑布流布局/</id>
    <published>2018-05-09T09:17:52.000Z</published>
    <updated>2018-05-14T09:59:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>瀑布流布局</p><p>在知乎看到大佬说，学习前端的第一阶段要会一些js基本的特效，学习一下，做几个Demo来看看</p><p>好像有那么两种方法：<br>1、通过css来搞定瀑布流<br>2、通过js来控制</p><h2 id="CSS方法解决瀑布流"><a href="#CSS方法解决瀑布流" class="headerlink" title="CSS方法解决瀑布流"></a>CSS方法解决瀑布流</h2><p>因为css3有了一个新的属性:column<br>我们在图片或者需要瀑布流的模块的父元素设置column属性就可以达到这种瀑布流的效果。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">    <span class="comment">/*定位*/</span></span><br><span class="line">    <span class="comment">/*position: relative;*/</span></span><br><span class="line">    <span class="comment">/*多栏布局 设置栏宽度*/</span></span><br><span class="line">    <span class="attribute">-webkit-column-width</span>:<span class="number">202px</span>;</span><br><span class="line">    <span class="attribute">-moz-column-width</span>:<span class="number">202px</span>;</span><br><span class="line">    <span class="attribute">column-width</span>:<span class="number">202px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="JS方法来解决瀑布流布局"><a href="#JS方法来解决瀑布流布局" class="headerlink" title="JS方法来解决瀑布流布局"></a>JS方法来解决瀑布流布局</h2><p>首先先把html写出来：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>瀑布流布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://img4.imgtn.bdimg.com/it/u=3673652172,785167112&amp;fm=27&amp;gp=0.jpg"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://img1.imgtn.bdimg.com/it/u=2752884811,3342547378&amp;fm=27&amp;gp=0.jpg"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://img5.imgtn.bdimg.com/it/u=2573504723,2456120500&amp;fm=27&amp;gp=0.jpg"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://img0.imgtn.bdimg.com/it/u=3214770734,3861052448&amp;fm=27&amp;gp=0.jpg"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://img4.imgtn.bdimg.com/it/u=3407532446,2830180038&amp;fm=27&amp;gp=0.jpg"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://img0.imgtn.bdimg.com/it/u=30302420,912099376&amp;fm=27&amp;gp=0.jpg"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://img5.imgtn.bdimg.com/it/u=2347360460,2805552283&amp;fm=27&amp;gp=0.jpg"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在html里写了很多的图片（这里没有写出来，也可以从后台拉取数据）<br>然后对图片做一些样式的调整：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    * &#123;</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">0px</span>;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-id">#main</span> &#123;</span><br><span class="line">      <span class="attribute">position</span>: relative;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.wrap</span> &#123;</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">15px</span> <span class="number">0px</span> <span class="number">0px</span> <span class="number">15px</span>;</span><br><span class="line">      <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.img</span> &#123;</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">      <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#ccc</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.img</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">240px</span>;</span><br><span class="line">      <span class="attribute">height</span>: auto;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br></pre></td></tr></table></figure></p><p>对图片做一些操作，宽度确定，高度auto;<br>然后开始用js对这些图片做一些处理<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      waterFull(<span class="string">'main'</span>, <span class="string">'wrap'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">waterFull</span>(<span class="params">parent, children</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> oParent = <span class="built_in">document</span>.getElementById(parent);</span><br><span class="line">      <span class="keyword">var</span> oWraps = getByClass(oParent, children);</span><br><span class="line">      <span class="comment">//计算整个页面显示的列数</span></span><br><span class="line">      <span class="keyword">var</span> oWrapWeight = oWraps[<span class="number">0</span>].offsetWidth;</span><br><span class="line">      <span class="keyword">var</span> cols = <span class="built_in">Math</span>.floor(<span class="built_in">document</span>.documentElement.clientWidth / oWrapWeight);</span><br><span class="line">      <span class="comment">//设置main的宽度，并且居中</span></span><br><span class="line">      oParent.style.cssText = <span class="string">'width:'</span> + oWrapWeight * cols + <span class="string">'px; margin: 0 auto'</span>;</span><br><span class="line">      <span class="comment">//找出高度最小的图片，将下一个图片放在下面</span></span><br><span class="line">      <span class="comment">//定义一个数组，存放每一列的高度，初始化存的是第一行的所有列的高度</span></span><br><span class="line">      <span class="keyword">var</span> arrHeight = [];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; oWraps.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; cols) &#123;</span><br><span class="line">          arrHeight.push(oWraps[i].offsetHeight);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">var</span> minHeight = <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>, arrHeight);</span><br><span class="line">          <span class="keyword">var</span> minIndex = getMinhIndex(arrHeight, minHeight);</span><br><span class="line">          oWraps[i].style.position = <span class="string">'absolute'</span>;</span><br><span class="line">          oWraps[i].style.top = minHeight + <span class="string">'px'</span>;</span><br><span class="line">          oWraps[i].style.left = minIndex * oWrapWeight + <span class="string">'px'</span>;</span><br><span class="line">          arrHeight[minIndex] += oWraps[i].offsetHeight;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getByClass</span>(<span class="params">parent, className</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> boxArr = <span class="keyword">new</span> <span class="built_in">Array</span>();<span class="comment">//用来获取所有class为box的元素</span></span><br><span class="line">      oElement = parent.getElementsByTagName(<span class="string">'*'</span>);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; oElement.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (oElement[i].className == className) &#123;</span><br><span class="line">          boxArr.push(oElement[i]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">return</span> boxArr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取当前最小值得下标</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getMinhIndex</span>(<span class="params">array, min</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> array) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array[i] == min)</span><br><span class="line">          <span class="keyword">return</span> i;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>搞定～</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;瀑布流布局&lt;/p&gt;
&lt;p&gt;在知乎看到大佬说，学习前端的第一阶段要会一些js基本的特效，学习一下，做几个Demo来看看&lt;/p&gt;
&lt;p&gt;好像有那么两种方法：&lt;br&gt;1、通过css来搞定瀑布流&lt;br&gt;2、通过js来控制&lt;/p&gt;
&lt;h2 id=&quot;CSS方法解决瀑布流&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="Demo练习" scheme="http://yoursite.com/categories/Demo%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>react 16.0 新特性学习</title>
    <link href="http://yoursite.com/2018/05/09/react-16-0-%E6%96%B0%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/05/09/react-16-0-新特性学习/</id>
    <published>2018-05-09T02:23:39.000Z</published>
    <updated>2018-05-14T09:59:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、Fragment"><a href="#1、Fragment" class="headerlink" title="1、Fragment"></a>1、Fragment</h2><p>新版本的render可以返回数组、字符串、react组件、数字、boolean值<br>v15.x必须要一个标签来包裹<br><br>Before v16<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;label htmlFor=<span class="string">"name"</span>&gt;名字：&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">            &lt;input id="name" type="text" placeholder="请输入名字"/</span>&gt;</span><br><span class="line">            &lt;button&gt;搜索&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">    );</span><br></pre></td></tr></table></figure></p><p>When v16.0.0<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    [</span><br><span class="line">        &lt;label htmlFor=<span class="string">"name"</span>&gt;名字：&lt;<span class="regexp">/label&gt;,</span></span><br><span class="line"><span class="regexp">        &lt;input id="name" type="text" placeholder="请输入名字"/</span>&gt;,</span><br><span class="line">        &lt;button&gt;搜索&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    ]</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure></p><p>Now v16.2.0<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    &lt;React.Fragment&gt;</span><br><span class="line">       &lt;label htmlFor=<span class="string">"name"</span>&gt;名字：&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">       &lt;input id="name" type="text" placeholder="请输入名字"/</span>&gt;</span><br><span class="line">       &lt;button&gt;搜索&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>React.Fragment&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>片段(fragments) 可以让你将子元素列表添加到一个分组中，并且不会在DOM中增加额外节点。key 是唯一可以传递给 Fragment 的属性<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    &lt;dl&gt;</span><br><span class="line">      &#123;props.items.map(<span class="function"><span class="params">item</span> =&gt;</span> (</span><br><span class="line">        <span class="comment">// 没有`key`，将会触发一个key警告</span></span><br><span class="line">        &lt;React.Fragment key=&#123;item.id&#125;&gt;</span><br><span class="line">          &lt;dt&gt;&#123;item.term&#125;&lt;<span class="regexp">/dt&gt;</span></span><br><span class="line"><span class="regexp">          &lt;dd&gt;&#123;item.description&#125;&lt;/</span>dd&gt;</span><br><span class="line">        &lt;<span class="regexp">/React.Fragment&gt;</span></span><br><span class="line"><span class="regexp">      ))&#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>dl&gt;</span><br><span class="line">  );</span><br></pre></td></tr></table></figure></p><p>简明写法&lt;&gt;&lt;/&gt;，但是还没有被更多的工具支持，它不支持 键(keys) 或 属性(attributes)。<br>Further</p><p>babel v7.0.0+ , babel-plugin-transform-react-jsx-source or babel-preset-react</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">       &lt;label htmlFor=<span class="string">"name"</span>&gt;名字：&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">       &lt;input id="name" type="text" placeholder="请输入名字"/</span>&gt;</span><br><span class="line">       &lt;button&gt;搜索&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>DOM Fragment</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> select = <span class="built_in">document</span>.getElementById(<span class="string">'select'</span>)</span><br><span class="line"><span class="keyword">const</span> values = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> fragment = <span class="built_in">document</span>.createDocumentFragment()</span><br><span class="line">values.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> option = <span class="built_in">document</span>.createElement(<span class="string">'option'</span>)</span><br><span class="line">    option.value = item</span><br><span class="line">    option.innerHTML = <span class="string">`小明<span class="subst">$&#123;item&#125;</span>号`</span></span><br><span class="line">    fragment.appendChild(option)</span><br><span class="line">&#125;)</span><br><span class="line">select.appendChild(fragment)</span><br></pre></td></tr></table></figure><h2 id="2、Portals"><a href="#2、Portals" class="headerlink" title="2、Portals"></a>2、Portals</h2><p>Portals是reactjs16提供的官方解决方案，使得组件可以脱离父组件层级挂载在DOM树的任何位置。<br>普通情况下，组件的render函数返回的元素会被挂载在它的父级组件上。<br>然而，有些元素需要被挂载在更高层级的位置。最典型的应用场景：当父组件具有overflow: hidden或者z-index的样式设置时，组件有可能被其他元素遮挡，就可以考虑使用Portal使组件的挂载脱离父组件。<br>组件的挂载点虽然可以脱离父组件，但组件的事件通过冒泡机制仍可以传给父组件。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"bd"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;div id=<span class="string">"modal"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">render(</span><br><span class="line">  &lt;App&gt;</span><br><span class="line">    &lt;SearchBox&gt;</span><br><span class="line">      &lt;Modal&gt;</span><br><span class="line">        &lt;div&gt;模态框&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>Modal&gt;</span><br><span class="line">    &lt;<span class="regexp">/SearchBox&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>App&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'bd'</span>),</span><br><span class="line">  () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">    <span class="keyword">super</span>(options)</span><br><span class="line">    <span class="keyword">this</span>.handleClick = <span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    alert(<span class="string">'react component tree propagation!'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"app"</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;this.props.children&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modal</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">      <span class="keyword">super</span>(options)</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> createPortal(<span class="keyword">this</span>.props.children, <span class="built_in">document</span>.getElementById(<span class="string">'modal'</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"bd"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;label <span class="keyword">for</span>=<span class="string">"name"</span>&gt;名字：&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">        &lt;input type="text" id="name" placeholder="请输入名字"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button&gt;搜索&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;div id=<span class="string">"modal"</span>&gt;</span><br><span class="line">    &lt;div&gt;模态框&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;App&gt;</span><br><span class="line">    &lt;div className=&quot;app&quot; onClick=bound handleClick()&gt;</span><br><span class="line">        &lt;SearchBox&gt;</span><br><span class="line">            &lt;labelhtmlFor=&quot;name&quot;&gt;名字：&lt;/label&gt;</span><br><span class="line">            &lt;inputid=&quot;name&quot;type=&quot;text&quot;placeholder=&quot;请输入名字&quot;&gt;&lt;/input&gt;</span><br><span class="line">            &lt;button&gt;搜索&lt;/button&gt;</span><br><span class="line">            &lt;Modal&gt;</span><br><span class="line">                &lt;ReactPortal target=HTMLDivElement&#123;…&#125;&gt;</span><br><span class="line">                    &lt;div&gt;模态框&lt;/div&gt;</span><br><span class="line">                &lt;/ReactPortal&gt;</span><br><span class="line">            &lt;/Modal&gt;</span><br><span class="line">        &lt;/SearchBox&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/App&gt;</span><br></pre></td></tr></table></figure><p>Before portals</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ReactDom.render(reactChild, container, callback)</span><br><span class="line"></span><br><span class="line">ReactDom.unmountComponentAtNode(container)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ReactDom.unstable_renderSubtreeIntoContainer(</span><br><span class="line">    context,</span><br><span class="line">    reactChild,</span><br><span class="line">    domNode,</span><br><span class="line">    callback</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">ReactDom.unmountComponentAtNode(container)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">render: ReactMount._renderSubtreeIntoContainer(<span class="literal">null</span>, reactChild, container, callback )</span><br><span class="line"></span><br><span class="line">unstable_renderSubtreeIntoContainer: ReactMount._renderSubtreeIntoContainer(context, reactChild, container, callback)</span><br></pre></td></tr></table></figure><h2 id="3、Error-Boundaries"><a href="#3、Error-Boundaries" class="headerlink" title="3、Error Boundaries"></a>3、Error Boundaries</h2><p>之前react在渲染过程中或者是生命周期内出现了致命的错误，react会从根组件上把所有的组件都卸载下来，以防止展现错误的数据，但这不是最好的用户体验。React 16修复了这一点，引入了Error Boundary的概念，中文译为“错误边界”，当某个组件发生错误时，我们可以通过Error Boundary捕获到错误并对错误做优雅处理。（注：它并不能捕获runtime所有的错误，比如组件回调事件里的错误，可以把它想象成传统的try-catch语句）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ErrorBoundary</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">hasError</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 新增了componentDidCatch这个生命周期函数，它可以捕获自身及子树上的错误并对错误做优雅处理，包括上报错误日志、展示出错提示，而不是卸载整个组件树。</span></span><br><span class="line">  componentDidCatch(error, info) &#123;</span><br><span class="line">    <span class="comment">// 错误代理组件的展示与否</span></span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">hasError</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    <span class="comment">// 在这里我们可以对错误进行记录</span></span><br><span class="line">    logErrorToMyService(error, info);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state.hasError) &#123;</span><br><span class="line">      <span class="comment">// 在这里我们可以书写自己想要展示的ui组件</span></span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Something went wrong.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.props.children;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的组件是当页面中有错误时我们想要展示的效果，具体用法如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">render()&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;ErrorBoundary&gt;    <span class="comment">// 外层组件我们定义的错误组件</span></span><br><span class="line">        &lt;Profile user=&#123;<span class="keyword">this</span>.state.user&#125; /&gt;     <span class="comment">// 内层组件是我们将要监视的自定义组件</span></span><br><span class="line">      &lt;<span class="regexp">/ErrorBoundary&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;this.onClick&#125;&gt;Update&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><p>这个组件能够不仅仅能够监听到本组件的错误，连同它下面的子组件的错误也可以监听到</p><p>###不能捕获的错误</p><ul><li>事件处理 </li><li>异步回调 </li><li>服务端渲染 </li><li>error boundary组件自身抛出的错误（只能由父级捕获）<br>###<strong>react遇到未捕获的错误会怎么办</strong><br>对 React16 来说，一个未捕获的错误会导致整个应用不能被挂载</li></ul><h2 id="4、setState传入null时不会再触发更新"><a href="#4、setState传入null时不会再触发更新" class="headerlink" title="4、setState传入null时不会再触发更新"></a>4、setState传入null时不会再触发更新</h2><p>之前的setState不管传入什么只要调用了这么方法就会渲染<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">selectCity(e)&#123;</span><br><span class="line">  <span class="keyword">const</span> newValue = e.target.value;</span><br><span class="line">  <span class="keyword">this</span>.setState(<span class="function">(<span class="params">state</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(state.city===newValue)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">city</span>:newValue&#125;</span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><h2 id="5、v16-0支持自定义的dom属性"><a href="#5、v16-0支持自定义的dom属性" class="headerlink" title="5、v16.0支持自定义的dom属性"></a>5、v16.0支持自定义的dom属性</h2><p>之前的版本对于自定义属性react会在属性前加上data-**来进行处理，现在对于部分属性去除了这种写法，拥抱了原生dom，这样可以减少react的代码，提升了性能</p><h2 id="6、其他"><a href="#6、其他" class="headerlink" title="6、其他"></a>6、其他</h2><p>更好的服务器端渲染：React 16的SSR被完全重写，新的实现非常快，接近3倍性能于React 15，现在提供一种流模式streaming，可以更快地把渲染的字节发送到客户端。</p><p>react v16采用了最新的技术“Fiber.”</p><p>React Server Side Rendering 解决 SPA 应用的 SEO 问题</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、Fragment&quot;&gt;&lt;a href=&quot;#1、Fragment&quot; class=&quot;headerlink&quot; title=&quot;1、Fragment&quot;&gt;&lt;/a&gt;1、Fragment&lt;/h2&gt;&lt;p&gt;新版本的render可以返回数组、字符串、react组件、数字、boolea
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Event Loop 问题理解</title>
    <link href="http://yoursite.com/2018/05/09/Event-Loop-%E9%97%AE%E9%A2%98%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/05/09/Event-Loop-问题理解/</id>
    <published>2018-05-09T02:08:43.000Z</published>
    <updated>2018-05-14T09:59:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Q1:事件循环机制是什么？<br>A1:JavaScript 是典型的单线程单并发语言，即表示在同一时间内其只能执行单个任务，同域浏览器中 JavaScript 主线程拥有一个函数调用栈(主线程)以及多个任务队列。</p><p>Q2:什么是任务？<br>A2:任务分为两种，一种是同步任务，一种是异步任务。<br>      同步任务，就是主线程中排队执行的任务；<br>      异步任务，不先进入主线程，而是先进入“任务队列”的任务，只有任务队列通知了主线程，某个异步任务可以执行了，该任务才会进入主线程执行</p><p>Q3:事件循环（Event Loop）的原理是什么？<br>A3:首先，主线程会依次执行代码。<br>    当主线栈的函数调用栈为空时，即会根据事件循环（Event Loop）机制来从任务队列中提取出待执行的回调并执行。<br>    执行的过程同样会进行函数帧的入栈出栈操作。这样不断的循环往复，这就是事件循环（Event Loop）。<br>    只要主线程空了，就会去读取”任务队列”，这就是JavaScript的运行机制</p><p>Q4:任务队列中的任务有几种？<br>A4:任务队列中的任务分为两种：MacroTask (task) 和 MicroTask 。Event Loop 处理这两种任务。</p><p>Q5:MacroTask (task) 和 MicroTask各包含什么任务？<br>A5: </p><h2 id="microtasks"><a href="#microtasks" class="headerlink" title="microtasks:"></a>microtasks:</h2><pre><code>process.nextTickpromiseObject.observeMutationObserver</code></pre><h2 id="macrotasks"><a href="#macrotasks" class="headerlink" title="macrotasks:"></a>macrotasks:</h2><pre><code>setTimeoutsetIntervalsetImmediateI/OUI渲染</code></pre><p>Q6:MacroTask和MicroTask的运行机制是什么？<br>A6:事件循环的顺序，决定了JavaScript代码的执行顺序。它从script(整体代码)开始第一次循环。之后全局上下文进入函数调用栈。直到调用栈清空(只剩全局)，然后执行所有的microtask。当所有可执行的micro-task执行完毕之后。循环再次从macro-task开始，找到其中一个任务队列执行完毕，然后再执行所有的micro-task，这样一直循环下去。<br>一句话说，microtask将会被添加到任务队列末尾进行处理。</p><p>MacroTask运行机制<br><img src="https://github.com/kaisa911/studyNotes/blob/master/public/image/macroTask.png?raw=true" alt="MacroTask运行机制"><br>MicroTask运行机制<br><img src="https://github.com/kaisa911/studyNotes/blob/master/public/image/microTask.png?raw=true" alt="MicroTask运行机制"><br>Q7:来尝试一道面试题<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'start'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> interval = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;  </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'setInterval'</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;  </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'setTimeout 1'</span>)</span><br><span class="line">  <span class="built_in">Promise</span>.resolve()</span><br><span class="line">      .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'promise 3'</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">      .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'promise 4'</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">      .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'setTimeout 2'</span>)</span><br><span class="line">          <span class="built_in">Promise</span>.resolve()</span><br><span class="line">              .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'promise 5'</span>)</span><br><span class="line">              &#125;)</span><br><span class="line">              .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'promise 6'</span>)</span><br><span class="line">              &#125;)</span><br><span class="line">              .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                clearInterval(interval)</span><br><span class="line">              &#125;)</span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve()</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;  </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'promise 1'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'promise 2'</span>)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></p><p>A7:start<br>promise 1<br>promise 2<br>setInterval<br>setTimeout 1<br>promise 3<br>promise 4<br>setInterval<br>setTimeout 2<br>promise 5<br>promise 6</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Q1:事件循环机制是什么？&lt;br&gt;A1:JavaScript 是典型的单线程单并发语言，即表示在同一时间内其只能执行单个任务，同域浏览器中 JavaScript 主线程拥有一个函数调用栈(主线程)以及多个任务队列。&lt;/p&gt;
&lt;p&gt;Q2:什么是任务？&lt;br&gt;A2:任务分为两种
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>PWA 之Q&amp;A</title>
    <link href="http://yoursite.com/2018/05/08/PWA-%E4%B9%8BQ-A/"/>
    <id>http://yoursite.com/2018/05/08/PWA-之Q-A/</id>
    <published>2018-05-08T08:11:07.000Z</published>
    <updated>2018-05-14T09:59:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>——吉吉《PWA初窥》学习笔记</p><p>Q1：什么是PWA？<br>A1: PWA全称Progressive Web App，即渐进式WEB应用。一个 PWA 应用首先是一个网页, 可以通过 Web 技术编写出一个网页应用. 随后添加上 App Manifest 和 Service Worker 来实现 PWA 的安装和离线等功能</p><p>Q2: PWA解决了什么问题？<br>A2:  1)  可以添加至主屏幕，点击主屏幕图标可以实现启动动画以及隐藏地址栏<br>       2）实现离线缓存功能，即使用户手机没有网络，依然可以使用一些离线功能<br>       3）实现了消息推送</p><p>Q3:  App Manifest 是什么，有什么用？<br>A3:  Web应用程序清单在一个JSON文本文件中提供有关应用程序的信息（如名称，作者，图标和描述）。manifest 的目的是将Web应用程序安装到设备的主屏幕，为用户提供更快的访问和更丰富的体验。</p><p>Q4:  什么是service worker，有什么作用？<br>A4:  Service Worker 是 Chrome 团队提出和力推的一个 WEB API，用于给 web 应用提供高级的可持续的后台处理能力。<br>        Service Workers 就像介于服务器和网页之间的拦截器，能够拦截进出的HTTP 请求，从而完全控制你的网站。</p><p>Q5:  service worker 有什么特点？<br>A5：1）resource caching and push notifications<br>        2）client-side programmable proxy between web app and the outside world<br>        3）service workers run independent of the application they are associated with<br>        4）the primary uses for a service workers are to act as a caching agent to handle network requests<br>        5）and to store content for offline use and secondly to handle push messaging the<br>        6）information that you need to persist and reuse across restartswork with IndexedDB databases<br>        7）promise-based<br>        8）only available on secure origins(https)</p><p>Q6: HTTP缓存与service worker缓存有什么区别<br>A6: HTTP缓存<br>       Web 服务器可以使用 Expires 首部来通知 Web 客户端，它可以使用资源的当前副本，直到指定的“过期<br>       时间”。反过来，浏览器可以缓存此资源，并且只有在有效期满后才会再次检查新版本。<br>       使用 HTTP 缓存意味着你要依赖服务器来告诉你何时缓存资源和何时过期。<br>       service worker缓存<br>       Service Workers 的强大在于它们拦截 HTTP 请求的能力<br>       进入任何传入的 HTTP 请求，并决定想要如何响应。在你的 Service Worker 中，可以编写逻辑来决定<br>       想要缓存的资源，以及需要满足什么条件和资源需要缓存多久。一切尽归你掌控！<br>       <img src="https://github.com/kaisa911/studyNotes/blob/master/public/image/hc.png?raw=true" alt="service worker缓存"></p><p>Q7: service worker的生命周期是怎样的？<br>A7: <img src="https://github.com/kaisa911/studyNotes/blob/master/public/image/lifecycle.png?raw=true" alt="生命周期"></p><p>Q8: 怎么配置一个PWA<br>A8: 1）准备一个html文件，以及相应的css等：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Minimal PWA<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, user-scalable=no"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"main.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"manifest"</span> <span class="attr">href</span>=<span class="string">"manifest.json"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Revision 1<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main-text"</span>&gt;</span>Minimal PWA, open Console for more~~~<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>2）添加manifest.json文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"Minimal app to try PWA"</span>,</span><br><span class="line">  <span class="attr">"short_name"</span>: <span class="string">"Minimal PWA"</span>,</span><br><span class="line">  <span class="attr">"display"</span>: <span class="string">"standalone"</span>,</span><br><span class="line">  <span class="attr">"start_url"</span>: <span class="string">"/"</span>,</span><br><span class="line">  <span class="attr">"theme_color"</span>: <span class="string">"#8888ff"</span>,</span><br><span class="line">  <span class="attr">"background_color"</span>: <span class="string">"#aaaaff"</span>,</span><br><span class="line">  <span class="attr">"icons"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"e.png"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"256x256"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"image/png"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3)添加Service Worker<br><br>Service Worker 在网页已经关闭的情况下还可以运行, 用来实现页面的缓存和离线, 后台通知等等功能。sw.js 文件需要在 HTML 当中引入:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">if</span> (navigator.serviceWorker != <span class="literal">null</span>) &#123;</span></span><br><span class="line"><span class="javascript">    navigator.serviceWorker.register(<span class="string">'sw.js'</span>)</span></span><br><span class="line"><span class="javascript">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">registration</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">'Registered events at scope: '</span>, registration.scope);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>4)处理静态缓存<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cacheStorageKey = <span class="string">'minimal-pwa-1'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cacheList = [</span><br><span class="line">  <span class="string">'/'</span>,</span><br><span class="line">  <span class="string">"index.html"</span>,</span><br><span class="line">  <span class="string">"main.css"</span>,</span><br><span class="line">  <span class="string">"e.png"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>借助 Service Worker, 可以在注册完成安装 Service Worker 时, 抓取资源写入缓存:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">self.addEventListener(<span class="string">'install'</span>, e =&gt; &#123;</span><br><span class="line">  e.waitUntil(</span><br><span class="line">    caches.open(cacheStorageKey)</span><br><span class="line">    .then(<span class="function"><span class="params">cache</span> =&gt;</span> cache.addAll(cacheList))</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> self.skipWaiting())</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>调用 self.skipWaiting() 方法是为了在页面更新的过程当中, 新的 Service Worker 脚本能立即激活和生效。<br>5）处理动态缓存<br>网页抓取资源的过程中, 在 Service Worker 可以捕获到 fetch 事件, 可以编写代码决定如何响应资源的请求:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">self.addEventListener(<span class="string">'fetch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.respondWith(</span><br><span class="line">    caches.match(e.request).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (response != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> fetch(e.request.url)</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>真实的项目当中, 可以根据资源的类型, 站点的特点, 可以专门设计复杂的策略。fetch 事件当中甚至可以手动生成 Response 返回给页面。<br>6)更新静态资源<br>缓存的资源随着版本的更新会过期, 所以会根据缓存的字符串名称(这里变量为 cacheStorageKey, 值用了 “minimal-pwa-1”)清除旧缓存, 可以遍历所有的缓存名称逐一判断决决定是否清除(备注: 简化的写法, Promise.all 中 return undefined 可能出错, 见评论):</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">self.addEventListener(<span class="string">'activate'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.waitUntil(</span><br><span class="line">   <span class="built_in">Promise</span>.all(</span><br><span class="line">        cacheNames.filter(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> name !== cacheStorageKey</span><br><span class="line">        &#125;).map(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> caches.delete(name)</span><br><span class="line">        &#125;)</span><br><span class="line">      ).then(<span class="function"><span class="params">()</span> =&gt;</span> self.clients.claim())</span><br><span class="line">     &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在新安装的 Service Worker 中通过调用 self.clients.claim() 取得页面的控制权, 这样之后打开页面都会使用版本更新的缓存。旧的 Service Worker 脚本不再控制着页面之后会被停止。</p><p>相关文章：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/25459319" target="_blank" rel="noopener">PWA 入门: 写个非常简单的 PWA 页面</a></li><li><a href="https://segmentfault.com/a/1190000012353473" target="_blank" rel="noopener">讲讲PWA</a></li><li><a href="https://developers.google.cn/web/fundamentals/codelabs/your-first-pwapp/" target="_blank" rel="noopener">您的第一个 Progressive Web App</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;——吉吉《PWA初窥》学习笔记&lt;/p&gt;
&lt;p&gt;Q1：什么是PWA？&lt;br&gt;A1: PWA全称Progressive Web App，即渐进式WEB应用。一个 PWA 应用首先是一个网页, 可以通过 Web 技术编写出一个网页应用. 随后添加上 App Manifest 和 
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
</feed>
