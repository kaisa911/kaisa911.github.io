<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Milestone</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-14T12:52:53.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>啪叽</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>身份证校验规则</title>
    <link href="http://yoursite.com/2019/03/14/%E8%BA%AB%E4%BB%BD%E8%AF%81%E6%A0%A1%E9%AA%8C%E8%A7%84%E5%88%99/"/>
    <id>http://yoursite.com/2019/03/14/身份证校验规则/</id>
    <published>2019-03-14T12:41:35.000Z</published>
    <updated>2019-03-14T12:52:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>把身份证校验规则整理一下，以后万一能用的到呢。。。</p> <a id="more"></a> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> powers = [</span><br><span class="line">  <span class="string">'7'</span>,</span><br><span class="line">  <span class="string">'9'</span>,</span><br><span class="line">  <span class="string">'10'</span>,</span><br><span class="line">  <span class="string">'5'</span>,</span><br><span class="line">  <span class="string">'8'</span>,</span><br><span class="line">  <span class="string">'4'</span>,</span><br><span class="line">  <span class="string">'2'</span>,</span><br><span class="line">  <span class="string">'1'</span>,</span><br><span class="line">  <span class="string">'6'</span>,</span><br><span class="line">  <span class="string">'3'</span>,</span><br><span class="line">  <span class="string">'7'</span>,</span><br><span class="line">  <span class="string">'9'</span>,</span><br><span class="line">  <span class="string">'10'</span>,</span><br><span class="line">  <span class="string">'5'</span>,</span><br><span class="line">  <span class="string">'8'</span>,</span><br><span class="line">  <span class="string">'4'</span>,</span><br><span class="line">  <span class="string">'2'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> parityBit = [<span class="string">'1'</span>, <span class="string">'0'</span>, <span class="string">'X'</span>, <span class="string">'9'</span>, <span class="string">'8'</span>, <span class="string">'7'</span>, <span class="string">'6'</span>, <span class="string">'5'</span>, <span class="string">'4'</span>, <span class="string">'3'</span>, <span class="string">'2'</span>];</span><br><span class="line"><span class="comment">// 校验身份证号码的主调用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> validId18 = <span class="function"><span class="params">_id</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> id = _id;</span><br><span class="line">  id += <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">const</span> num = id.substr(<span class="number">0</span>, <span class="number">17</span>);</span><br><span class="line">  <span class="keyword">const</span> IparityBit = id.substr(<span class="number">17</span>);</span><br><span class="line">  <span class="comment">// let IparityBit = id.substr(17); // 如果允许小写x</span></span><br><span class="line">  <span class="keyword">let</span> power = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">17</span>; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 校验每一位的合法性</span></span><br><span class="line">    <span class="keyword">if</span> (num.charAt(i) &lt; <span class="string">'0'</span> || num.charAt(i) &gt; <span class="string">'9'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 加权</span></span><br><span class="line">    power += <span class="built_in">parseInt</span>(num.charAt(i), <span class="number">10</span>) * <span class="built_in">parseInt</span>(powers[i], <span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 取模</span></span><br><span class="line">  <span class="keyword">const</span> mod = <span class="built_in">parseInt</span>(power, <span class="number">10</span>) % <span class="number">11</span>;</span><br><span class="line">  <span class="comment">//如果小写x也支持</span></span><br><span class="line">  <span class="comment">// if(IparityBit==='x')&#123; IparityBit = 'X'; &#125;</span></span><br><span class="line">  <span class="keyword">if</span> (parityBit[mod] === IparityBit) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validId15</span>(<span class="params">_id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> id = _id;</span><br><span class="line">  id += <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; id.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 校验每一位的合法性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (id.charAt(i) &lt; <span class="string">'0'</span> || id.charAt(i) &gt; <span class="string">'9'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> year = id.substr(<span class="number">6</span>, <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">const</span> month = id.substr(<span class="number">8</span>, <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">const</span> day = id.substr(<span class="number">10</span>, <span class="number">2</span>);</span><br><span class="line">  <span class="comment">// 校验年份位</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (year &lt; <span class="string">'01'</span> || year &gt; <span class="string">'90'</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// 校验月份</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (month &lt; <span class="string">'01'</span> || month &gt; <span class="string">'12'</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// 校验日</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (day &lt; <span class="string">'01'</span> || day &gt; <span class="string">'31'</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint consistent-return: 0 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validId</span>(<span class="params">_id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> id = _id;</span><br><span class="line">  <span class="keyword">if</span> (id === <span class="string">''</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">let</span> valid = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (id.length === <span class="number">15</span>) &#123;</span><br><span class="line">    valid = validId15(id);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (id.length === <span class="number">18</span>) &#123;</span><br><span class="line">    valid = validId18(id);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> valid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> validId;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;把身份证校验规则整理一下，以后万一能用的到呢。。。&lt;/p&gt;
    
    </summary>
    
      <category term="Demo练习" scheme="http://yoursite.com/categories/Demo%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>搭一个ts-react-webpack框架的步骤</title>
    <link href="http://yoursite.com/2019/03/04/%E6%90%AD%E4%B8%80%E4%B8%AA%E6%A1%86%E6%9E%B6%E7%9A%84%E6%AD%A5%E9%AA%A4/"/>
    <id>http://yoursite.com/2019/03/04/搭一个框架的步骤/</id>
    <published>2019-03-04T08:13:24.000Z</published>
    <updated>2019-03-09T03:17:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>1、<code>npm init</code><br>2、创建文件夹：client，webpack，html，和 public<br>3、在 html 文件里，创建一个 index.html;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"x-ua-compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,Chrome=1"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">      <span class="attr">name</span>=<span class="string">"viewport"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">content</span>=<span class="string">"width=device-width,minimum-scale=1,maximum-scale=1,initial-scale=1,user-scalable=no"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">title</span> %&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"bd"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">"global"</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4、在 client 文件里，创建一个 index.tsx 文件，内容先留空。<br>5、安装 react，react-dom，react-router，react-router-dom，redux，react-redux, redux-thunk<br>6、安装 webpack，webpack-cli，webpack-dev-server<br>7、安装@types/react,@types/react-dom,@types/react-redux,@types/react-router-dom,@types/redux<br>8、安装开发时的依赖：awesome-typescript-loader 和 source-map-loader。<br>9、在 client 文件夹里创建一个 root.tsx 文件，创建 pages，components，route 文件夹<br>10、在 pages 里创建一个 index.tsx 内容为</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 'HelloProps' describes the shape of props.</span></span><br><span class="line"><span class="comment">// State is never set so we use the '&#123;&#125;' type.</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> Hello <span class="keyword">extends</span> React.Component&lt;&#123;&#125;&gt; &#123;</span><br><span class="line">  <span class="keyword">public</span> render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Hello TypeScript!&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div&gt;lalala&lt;/</span>div&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>11、在 route 里创建一个 app.tsx 的路由文件</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter, Redirect, Route, Switch &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Index <span class="keyword">from</span> <span class="string">'../pages/index'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> App <span class="keyword">extends</span> React.Component&lt;&#123;&#125;&gt; &#123;</span><br><span class="line">  <span class="keyword">public</span> render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;BrowserRouter&gt;</span><br><span class="line">        &lt;React.Fragment&gt;</span><br><span class="line">          &lt;Switch&gt;</span><br><span class="line">            &lt;Route path=<span class="string">"/index"</span> component=&#123;Index&#125; /&gt;</span><br><span class="line">            &lt;Route path=<span class="string">"/"</span> exact component=&#123;Index&#125; /&gt;</span><br><span class="line">          &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>React.Fragment&gt;</span><br><span class="line">      &lt;<span class="regexp">/BrowserRouter&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><p>12、在 root.tsx 里添加内容：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./route/App'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="built_in">document</span>.getElementById(<span class="string">'bd'</span>);</span><br><span class="line"><span class="keyword">const</span> render = <span class="function">(<span class="params">Component: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">  ReactDOM.render(&lt;Component /&gt;, root);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">render(App);</span><br></pre></td></tr></table></figure><p>13、在根目录添加 tsconfig.json 文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"outDir"</span>: <span class="string">"./dist/"</span>,</span><br><span class="line">    <span class="attr">"sourceMap"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"noImplicitAny"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"moduleResolution"</span>: <span class="string">"node"</span>,</span><br><span class="line">    <span class="attr">"module"</span>: <span class="string">"commonjs"</span>,</span><br><span class="line">    <span class="attr">"target"</span>: <span class="string">"es5"</span>,</span><br><span class="line">    <span class="attr">"jsx"</span>: <span class="string">"react"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"include"</span>: [<span class="string">"./client/**/*"</span>],</span><br><span class="line">  <span class="attr">"exclude"</span>: [<span class="string">"node_modules"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>14、配置 webpack，在 webpack 文件夹里创建 webpack.dev.js<br>安装：@types/webpack-env，@types/node html-webpack-plugin</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> packageObj = <span class="built_in">require</span>(<span class="string">'../package.json'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> publicPath = <span class="string">'/'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="comment">// 入口</span></span><br><span class="line">  entry: &#123;</span><br><span class="line">    index: path.join(__dirname, <span class="string">'../client/Root.tsx'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 输出</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.join(__dirname, <span class="string">'../dist'</span>), <span class="comment">// 文件的存放路径</span></span><br><span class="line">    publicPath,</span><br><span class="line">    filename: <span class="string">'[name].[hash:8].js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 解析</span></span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">'.ts'</span>, <span class="string">'.tsx'</span>, <span class="string">'.js'</span>, <span class="string">'.json'</span>], <span class="comment">// 添加对应的扩展名</span></span><br><span class="line">    modules: [<span class="string">'node_modules'</span>, path.resolve(__dirname, <span class="string">'client'</span>)], <span class="comment">// modules 包括node_modules 和client</span></span><br><span class="line">    alias: &#123;</span><br><span class="line">      client: path.resolve(__dirname, <span class="string">'client/'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.tsx?$/</span>, <span class="attr">loader</span>: <span class="string">'awesome-typescript-loader'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">enforce</span>: <span class="string">'pre'</span>, <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, <span class="attr">loader</span>: <span class="string">'source-map-loader'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  devtool: <span class="string">'eval-source-map'</span>,</span><br><span class="line">  mode: <span class="string">'development'</span>,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    host: <span class="string">'0.0.0.0'</span>,</span><br><span class="line">    compress: <span class="literal">true</span>,</span><br><span class="line">    clientLogLevel: <span class="string">'none'</span>,</span><br><span class="line">    hot: <span class="literal">true</span>, <span class="comment">// 热更替</span></span><br><span class="line">    historyApiFallback: &#123;</span><br><span class="line">      disableDotRule: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    stats: <span class="string">'minimal'</span>, <span class="comment">//信息</span></span><br><span class="line">    disableHostCheck: <span class="literal">true</span>, <span class="comment">// 不检查host</span></span><br><span class="line">    proxy: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// 把打包好的js注入到html里</span></span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./html/index.html'</span>,</span><br><span class="line">      filename: <span class="string">'index.html'</span>,</span><br><span class="line">      <span class="comment">//html 模版的参数</span></span><br><span class="line">      templateParameters: &#123;</span><br><span class="line">        title: packageObj.name,</span><br><span class="line">        environment: <span class="string">'dev'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      inject: <span class="literal">true</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">//HotModuleReplacementPlugin 插件是告诉我们用热加载</span></span><br><span class="line">    <span class="comment">//NamedModulesPlugin 是用来清空编译日志的，这样只会显示我们入口文件信息。</span></span><br><span class="line">    <span class="keyword">new</span> webpack.NamedModulesPlugin(),</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure><p>15、修改 Root.tsx,添加热更替</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 好几个坑，第一个是要在tslint里面加上 "moduleResolution": "node",</span></span><br><span class="line"><span class="comment"> * 第二个：hot不能显示，需要安装@types/webpack-env</span></span><br><span class="line"><span class="comment"> * 第三个，module.hot.accept 函数接收两个参数，第一个是string类型的url，另一个是一个cb</span></span><br><span class="line"><span class="comment"> * 第四个，export default的module，require需要用.default 来引入</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">module</span>.hot) &#123;</span><br><span class="line">  <span class="built_in">module</span>.hot.accept(<span class="string">'./route/App'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> NextApp = <span class="built_in">require</span>(<span class="string">'./route/App'</span>).default;</span><br><span class="line">    render(NextApp);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>16、添加 tslint tslint-config-prettier tslint-eslint-rules tslint-react 等插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i tslint tslint-config-prettier tslint-eslint-rules tslint-react</span><br></pre></td></tr></table></figure><p>17、在根目录下创建并配置 tslint.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"extends"</span>: [</span><br><span class="line">    <span class="string">"tslint:recommended"</span>,</span><br><span class="line">    <span class="string">"tslint-react"</span>,</span><br><span class="line">    <span class="string">"tslint-eslint-rules"</span>,</span><br><span class="line">    <span class="string">"tslint-config-prettier"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"linterOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"exclude"</span>: [<span class="string">"node_modules/**/*.ts"</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"defaultSeverity"</span>: <span class="string">"error"</span>,</span><br><span class="line">  <span class="attr">"rules"</span>: &#123;</span><br><span class="line">    <span class="attr">"no-implicit-dependencies"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"no-submodule-imports"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"no-console"</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>18、添加一个类型检查和编译的分开的插件’fork-ts-checker-webpack-plugin’</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i fork-ts-checker-webpack-plugin</span><br></pre></td></tr></table></figure><p>webpack.dev.js 需要加入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ForkTsCheckerWebpackPlugin = <span class="built_in">require</span>(<span class="string">'fork-ts-checker-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="keyword">new</span> ForkTsCheckerWebpackPlugin(&#123;</span><br><span class="line">      <span class="keyword">async</span>: <span class="literal">false</span>,</span><br><span class="line">      watch: <span class="string">'../client'</span>,</span><br><span class="line">      tsconfig: path.resolve(__dirname, <span class="string">'../tsconfig.json'</span>),</span><br><span class="line">      tslint: path.resolve(__dirname, <span class="string">'../tslint.json'</span>)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>一个 ts-react-webpack 的框架就搭的差不多了。。哈哈哈<br>然后开始加一些其他的东西比如 redux</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、&lt;code&gt;npm init&lt;/code&gt;&lt;br&gt;2、创建文件夹：client，webpack，html，和 public&lt;br&gt;3、在 html 文件里，创建一个 index.html;&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;tabl
      
    
    </summary>
    
      <category term="Demo练习" scheme="http://yoursite.com/categories/Demo%E7%BB%83%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>CommonJS 和ES6 模块的区别</title>
    <link href="http://yoursite.com/2019/03/04/CommonJS-%E5%92%8CES6-%E6%A8%A1%E5%9D%97%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2019/03/04/CommonJS-和ES6-模块的区别/</id>
    <published>2019-03-04T06:08:04.000Z</published>
    <updated>2019-03-04T06:42:28.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>ES6 模块输出的是值的引用，CommonJS 模块输出的是一个值的拷贝</li><li>ES6 模块是编译时输出接口，CommonJS 模块是运行时加载。</li><li>ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。而 CommonJS 加载的是一个对象（即 module.exports 属性），该对象只有在脚本运行完才会生成。</li></ul><p>ES6 模块的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在运行时确定这些东西。比如，CommonJS 模块就是对象，输入时必须查找对象属性。</p><p>es6 {<br>　　export : ‘可以输出多个，输出方式为 {}’ ，<br>　　export default : ‘ 只能输出一个 ，可以与 export 同时输出，但是不建议这么做’，<br>　　解析阶段确定对外输出的接口，解析阶段生成接口，<br>　　模块不是对象，加载的不是对象，<br>　　可以单独加载其中的某个接口（方法），<br>　　静态分析，动态引用，输出的是值的引用，值改变，引用也改变，即原来模块中的值改变则该加载的值也改变，<br>　　this 指向 undefined<br>}<br>commonJS {<br>　　module.exports = … : ‘只能输出一个，且后面的会覆盖上面的’ ，<br>　　exports. … : ‘ 可以输出多个’，<br>　　运行阶段确定接口，运行时才会加载模块，<br>　　模块就是对象，加载的是该对象，<br>　　加载的是整个模块，即将所有的接口全部加载进来，<br>　　输出的是值的拷贝，即原来模块中的值改变不会影响已经加载的该值，<br>　　this 指向当前模块<br>}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;ES6 模块输出的是值的引用，CommonJS 模块输出的是一个值的拷贝&lt;/li&gt;
&lt;li&gt;ES6 模块是编译时输出接口，CommonJS 模块是运行时加载。&lt;/li&gt;
&lt;li&gt;ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。而 
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>给Linux服务器安装node</title>
    <link href="http://yoursite.com/2019/02/26/%E7%BB%99Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85node/"/>
    <id>http://yoursite.com/2019/02/26/给Linux服务器安装node/</id>
    <published>2019-02-26T05:11:09.000Z</published>
    <updated>2019-03-06T05:12:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>新买了一个腾讯云的服务器，需要给新服务器搞定一大些东西，准备记录一下，方便以后更换服务器的时候不用再谷歌了</p><p>步骤 1、安装 nvm ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash</span><br></pre></td></tr></table></figure><p>source ~/.bashrc</p><p>步骤 2、nvm –version 查看安装的 nvm 的版本</p><p>步骤 3、nvm ls-remote 可查看 node 所有版本</p><p>步骤 4、nvm install <version>(版本号)例如：nvm install v10.6.0</version></p><p>步骤 5、node -v ,npm -v 查看版本</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;新买了一个腾讯云的服务器，需要给新服务器搞定一大些东西，准备记录一下，方便以后更换服务器的时候不用再谷歌了&lt;/p&gt;
&lt;p&gt;步骤 1、安装 nvm ：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt
      
    
    </summary>
    
      <category term="服务器配置" scheme="http://yoursite.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>从输入url到页面加载完成都发生了什么？</title>
    <link href="http://yoursite.com/2019/02/11/%E4%BB%8E%E8%BE%93%E5%85%A5url%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%8A%A0%E8%BD%BD%E5%AE%8C%E6%88%90%E9%83%BD%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <id>http://yoursite.com/2019/02/11/从输入url到页面加载完成都发生了什么？/</id>
    <published>2019-02-11T06:48:52.000Z</published>
    <updated>2019-03-04T06:38:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>这个问题是一个比较经典的问题，答案如下：<br>1、浏览器的地址栏输入URL并按下回车。<br>2、浏览器查找当前URL是否存在缓存，并比较缓存是否过期。<br>3、DNS解析URL对应的IP。<br>4、根据IP建立TCP连接（三次握手）。<br>5、发起HTTP请求。<br>6、服务器处理请求，浏览器接收HTTP响应。<br>7、渲染页面，构建DOM树。<br>8、关闭TCP连接（四次挥手）。</p><ul><li>缓存，通过cache-control来控制。</li><li>DNS解析是指把域名URL转成对应的ip</li><li>TCP连接<br>　　在通过第一步的DNS域名解析后，获取到了服务器的IP地址，在获取到IP地址后，便会开始建立一次连接，这是由TCP协议完成的，主要通过三次握手进行连接。<br>　　第一次握手： 建立连接时，客户端发送syn包（syn=j）到服务器，并进入SYN_SENT状态，等待服务器确认；<br>　　第二次握手： 服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；<br>　　第三次握手： 客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。<br>　　完成三次握手，客户端与服务器开始传送数据。</li></ul><p>三次握手，如果某一次握手莫名的失败，tcp会把同样的包再发送一次</p><ul><li><p>浏览器向服务器发送HTTP请求<br>　　完整的HTTP请求包含请求起始行、请求头部、请求主体三部分。</p></li><li><p>渲染页面包括：解析和渲染，生成DOM树和CSSOM树。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这个问题是一个比较经典的问题，答案如下：&lt;br&gt;1、浏览器的地址栏输入URL并按下回车。&lt;br&gt;2、浏览器查找当前URL是否存在缓存，并比较缓存是否过期。&lt;br&gt;3、DNS解析URL对应的IP。&lt;br&gt;4、根据IP建立TCP连接（三次握手）。&lt;br&gt;5、发起HTTP请求。&lt;
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>把整数转成2进制表示</title>
    <link href="http://yoursite.com/2019/02/06/%E6%8A%8A%E6%95%B0%E5%AD%97%E8%BD%AC%E6%88%902%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA/"/>
    <id>http://yoursite.com/2019/02/06/把数字转成2进制表示/</id>
    <published>2019-02-06T12:43:34.000Z</published>
    <updated>2019-03-04T06:38:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>把整数转成 2 进制，负数转成补码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">Number</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">if</span> (n &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">  str = n.toString(<span class="number">2</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> num = <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">32</span>) + n;</span><br><span class="line">  str = (<span class="built_in">Array</span>(<span class="number">32</span>).join(<span class="string">'0'</span>) + num.toString(<span class="number">2</span>)).slice(<span class="number">-32</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;把整数转成 2 进制，负数转成补码&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>js字符与ASCII的互换方法</title>
    <link href="http://yoursite.com/2019/01/28/js%E5%AD%97%E7%AC%A6%E4%B8%8EASCII%E7%9A%84%E4%BA%92%E6%8D%A2%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/01/28/js字符与ASCII的互换方法/</id>
    <published>2019-01-28T06:36:23.000Z</published>
    <updated>2019-03-04T06:38:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>大写字母 A-Z 对应的 ASCII 码值是 65-90<br>小写字母 a-z 对应的 ASCII 码值是 97-122</p><p>将字母转为 ASCII 码的方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> string = <span class="string">'A'</span>;</span><br><span class="line">string.charCodeAt(); <span class="comment">// 65</span></span><br></pre></td></tr></table></figure><p>将 ASCII 码转为对应字母的方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="number">97</span>;</span><br><span class="line"><span class="built_in">String</span>.fromCharCode(number); <span class="comment">// 'a'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;大写字母 A-Z 对应的 ASCII 码值是 65-90&lt;br&gt;小写字母 a-z 对应的 ASCII 码值是 97-122&lt;/p&gt;
&lt;p&gt;将字母转为 ASCII 码的方法：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>async和await</title>
    <link href="http://yoursite.com/2019/01/11/async%E5%92%8Cawait/"/>
    <id>http://yoursite.com/2019/01/11/async和await/</id>
    <published>2019-01-11T08:29:52.000Z</published>
    <updated>2019-03-04T06:38:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="async-有什么作用"><a href="#async-有什么作用" class="headerlink" title="async 有什么作用"></a>async 有什么作用</h2><p><code>async</code> 函数（包含函数语句、函数表达式、Lambda 表达式）会返回一个 Promise 对象，如果在函数中 return 一个直接量，<code>async</code> 会把这个直接量通过<code>Promise.resolve()</code>封装成 Promise 对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'1'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(test()); <span class="comment">// -&gt; Promise &#123;&lt;resolved&gt;: "1"&#125;</span></span><br></pre></td></tr></table></figure><p>如果<code>async</code>函数没有返回值，它会返回 <code>Promise.resolve(undefined)</code>。</p><p>Promise 的特点——无等待，所以在没有<code>await</code>的情况下执行<code>async</code>函数，它会立即执行，返回一个 Promise 对象，并且，绝不会阻塞后面的语句。这和普通返回 Promise 对象的函数并无二致。</p><h2 id="await-有什么作用"><a href="#await-有什么作用" class="headerlink" title="await 有什么作用"></a>await 有什么作用</h2><p><code>await</code>等待的是一个表达式，这个表达式的计算结果是 Promise 对象或者其它值（换句话说，就是没有特殊限定）。</p><p>因为<code>async</code>函数返回一个 Promise 对象，所以<code>await</code> 可以用于等待一个<code>async</code>函数的返回值——这也可以说是<code>await</code>在等<code>async</code>函数，但要清楚，它等的实际是一个返回值。注意到<code>await</code>不仅仅用于等 Promise 对象，它可以等任意表达式的结果，所以，<code>await</code> 后面实际是可以接普通函数调用或者直接量的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line">  a = a + (<span class="keyword">await</span> <span class="number">10</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'1'</span>, a); <span class="comment">// -&gt; '1' 10</span></span><br><span class="line">  a = (<span class="keyword">await</span> <span class="number">10</span>) + a;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'2'</span>, a); <span class="comment">// -&gt; '2' 20</span></span><br><span class="line">&#125;;</span><br><span class="line">b();</span><br></pre></td></tr></table></figure><p>await 表达式的运算结果取决于它等的东西。<br>如果<code>await</code>后的表达式不是一个 Promise 对象，那<code>await</code> 表达式的运算结果就是它的结果。</p><p>如果<code>await</code>后的表达式是一个 Promise 对象，<code>await</code> 会阻塞后面的代码，等着 Promise 对象<code>resolve</code>，然后得到<code>resolve</code>的值，作为<code>await</code>表达式的运算结果。</p><p><code>await</code> 只能用在 async 里面</p><h2 id="async-await-做了什么事？"><a href="#async-await-做了什么事？" class="headerlink" title="async/await 做了什么事？"></a>async/await 做了什么事？</h2><p><code>async</code>会将其后的函数的返回值封装成一个 Promise 对象，而 <code>await</code>会等待这个 Promise 完成，并将其<code>resolve</code> 的结果返回出来。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'finish'</span>);</span><br><span class="line">      resolve(<span class="string">'sleep'</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> value = <span class="keyword">await</span> sleep();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'object'</span>);</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br></pre></td></tr></table></figure><p>在这个函数里，<code>await</code>会等待 sleep() 返回一个值，先打印<code>finish</code>，然后再打印<code>object</code>。</p><h2 id="一段代码"><a href="#一段代码" class="headerlink" title="一段代码"></a>一段代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  a = a + (<span class="keyword">await</span> <span class="number">10</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'2'</span>, a); <span class="comment">// -&gt; '2' 10</span></span><br><span class="line">  a = (<span class="keyword">await</span> <span class="number">10</span>) + a;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'3'</span>, a); <span class="comment">// -&gt; '3' 20</span></span><br><span class="line">&#125;;</span><br><span class="line">b();</span><br><span class="line">a++;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'1'</span>, a); <span class="comment">// -&gt; '1' 1</span></span><br></pre></td></tr></table></figure><p>首先函数 b 先执行，在执行到 await 10 之前变量 a 还是 0，因为在 await 内部实现了 generators ，generators 会保留堆栈中东西，所以这时候 a = 0 被保存了下来<br></p><p>因为 await 是异步操作，遇到 await 就会立即返回一个 pending 状态的 Promise 对象，暂时返回执行代码的控制权，使得函数外的代码得以继续执行，所以会先执行 console.log(‘1’, a)<br></p><p>这时候同步代码执行完毕，开始执行异步代码，将保存下来的值拿出来使用，这时候 a = 10<br></p><p>然后后面就是常规执行代码了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;async-有什么作用&quot;&gt;&lt;a href=&quot;#async-有什么作用&quot; class=&quot;headerlink&quot; title=&quot;async 有什么作用&quot;&gt;&lt;/a&gt;async 有什么作用&lt;/h2&gt;&lt;p&gt;&lt;code&gt;async&lt;/code&gt; 函数（包含函数语句、函数表达式
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>函数防抖与节流</title>
    <link href="http://yoursite.com/2019/01/10/%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81/"/>
    <id>http://yoursite.com/2019/01/10/函数防抖与节流/</id>
    <published>2019-01-10T08:03:35.000Z</published>
    <updated>2019-03-04T06:38:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h1><p>函数节流的核心是，让一个函数不要执行得太频繁，减少一些过快的调用来节流。</p><p>函数去抖就是对于一定时间段的连续的函数调用，只让其执行一次。</p><h2 id="应用条件"><a href="#应用条件" class="headerlink" title="应用条件"></a>应用条件</h2><p>发送一个 ajax 表单，给一个 button 绑定 click 事件，并且监听触发 ajax 请求。如果是 debounce，则用户不管点多少次，都只会发送一次请求；如果是 throttle，不断点击的过程中会间隔发送请求。这时候最好使用 debounce.<br>监听滚动事件判断是否到页面底部自动加载更多，如果是 debounce，则只有在用户停止滚动的时候的才会判断是否到了底部，如果是 throttle，则页面滚动的过程中会间隔判断是否到达底部。 此时最好使用 throttle</p><h2 id="函数防抖"><a href="#函数防抖" class="headerlink" title="函数防抖"></a>函数防抖</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 防抖函数，返回函数连续调用时，空闲时间必须大于或等于 wait，func 才会执行</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param  &#123;function&#125; func        回调函数</span></span><br><span class="line"><span class="comment"> * @param  &#123;number&#125;   wait        表示时间窗口的间隔</span></span><br><span class="line"><span class="comment"> * @param  &#123;boolean&#125;  immediate   设置为ture时，是否立即调用函数</span></span><br><span class="line"><span class="comment"> * @return &#123;function&#125;             返回客户调用函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> debounce = <span class="function">(<span class="params">func, wait = <span class="number">1000</span>, immediate = <span class="literal">true</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> timer;</span><br><span class="line">  <span class="keyword">let</span> context;</span><br><span class="line">  <span class="keyword">let</span> args;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 延迟执行函数</span></span><br><span class="line">  <span class="keyword">const</span> later = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 延迟函数执行完毕，清空缓存的定时器序号</span></span><br><span class="line">      timer = <span class="literal">null</span>;</span><br><span class="line">      <span class="comment">// 延迟执行的情况下，函数会在延迟函数中执行</span></span><br><span class="line">      <span class="comment">// 使用到之前缓存的参数和上下文</span></span><br><span class="line">      <span class="keyword">if</span> (!immediate) &#123;</span><br><span class="line">        func.apply(context, args);</span><br><span class="line">        context = <span class="literal">null</span>;</span><br><span class="line">        args = <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, wait);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这里返回的函数是每次实际调用的函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...params</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 如果没有创建延迟执行函数（later），就创建一个</span></span><br><span class="line">    <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">      timer = later();</span><br><span class="line">      <span class="comment">// 如果是立即执行，调用函数</span></span><br><span class="line">      <span class="comment">// 否则缓存参数和调用上下文</span></span><br><span class="line">      <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">        func.apply(<span class="keyword">this</span>, params);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        context = <span class="keyword">this</span>;</span><br><span class="line">        args = params;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果已有延迟执行函数（later），调用的时候清除原来的并重新设定一个</span></span><br><span class="line">      <span class="comment">// 这样做延迟函数会重新计时</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      clearTimeout(timer);</span><br><span class="line">      timer = later();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> debounce;</span><br></pre></td></tr></table></figure><h2 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> throttle = <span class="function">(<span class="params">func, delay</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> last;</span><br><span class="line">  <span class="keyword">let</span> deferTimer;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> now = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">if</span> (last &amp;&amp; now &lt; last + delay) &#123;</span><br><span class="line">      clearTimeout(deferTimer);</span><br><span class="line">      deferTimer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        last = now;</span><br><span class="line">        func.apply(<span class="keyword">this</span>, args);</span><br><span class="line">      &#125;, delay);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      last = now;</span><br><span class="line">      func.apply(<span class="keyword">this</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> throttle;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;防抖和节流&quot;&gt;&lt;a href=&quot;#防抖和节流&quot; class=&quot;headerlink&quot; title=&quot;防抖和节流&quot;&gt;&lt;/a&gt;防抖和节流&lt;/h1&gt;&lt;p&gt;函数节流的核心是，让一个函数不要执行得太频繁，减少一些过快的调用来节流。&lt;/p&gt;
&lt;p&gt;函数去抖就是对于一定时间段的
      
    
    </summary>
    
      <category term="面试锦囊" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95%E9%94%A6%E5%9B%8A/"/>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>HTTP status</title>
    <link href="http://yoursite.com/2019/01/09/HTTP-status/"/>
    <id>http://yoursite.com/2019/01/09/HTTP-status/</id>
    <published>2019-01-09T07:33:58.000Z</published>
    <updated>2019-03-04T06:38:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HttpStatus"><a href="#HttpStatus" class="headerlink" title="HttpStatus"></a>HttpStatus</h1><h2 id="Http-Status-Code-分类"><a href="#Http-Status-Code-分类" class="headerlink" title="Http Status Code 分类"></a>Http Status Code 分类</h2><p>1XX 信息，服务器收到请求，需要请求者继续执行操作<br>2XX 成功，操作被成功接收并处理<br>3XX 重定向，需要进一步的操作以完成请求<br>4XX 客户端错误，请求包含语法错误或无法完成请求<br>5XX 服务器错误，服务器在处理请求的过程中发生了错误</p><h2 id="1XX-相关具体的内容"><a href="#1XX-相关具体的内容" class="headerlink" title="1XX 相关具体的内容"></a>1XX 相关具体的内容</h2><p><img src="https://github.com/kaisa911/Shrek/blob/master/HTTP/images/1xx.png?raw=true"></p><h2 id="2XX-相关具体的内容"><a href="#2XX-相关具体的内容" class="headerlink" title="2XX 相关具体的内容"></a>2XX 相关具体的内容</h2><p><img src="https://github.com/kaisa911/Shrek/blob/master/HTTP/images/2xx.png?raw=true"></p><h2 id="3XX-相关具体的内容"><a href="#3XX-相关具体的内容" class="headerlink" title="3XX 相关具体的内容"></a>3XX 相关具体的内容</h2><p><img src="https://github.com/kaisa911/Shrek/blob/master/HTTP/images/3xx.png?raw=true"></p><h2 id="4XX-相关具体的内容"><a href="#4XX-相关具体的内容" class="headerlink" title="4XX 相关具体的内容"></a>4XX 相关具体的内容</h2><p><img src="https://github.com/kaisa911/Shrek/blob/master/HTTP/images/4xx-1.png?raw=true"><br><img src="https://github.com/kaisa911/Shrek/blob/master/HTTP/images/4xx-2.png?raw=true"></p><h2 id="5XX-相关具体的内容"><a href="#5XX-相关具体的内容" class="headerlink" title="5XX 相关具体的内容"></a>5XX 相关具体的内容</h2><p><img src="https://github.com/kaisa911/Shrek/blob/master/HTTP/images/5xx.png?raw=true"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HttpStatus&quot;&gt;&lt;a href=&quot;#HttpStatus&quot; class=&quot;headerlink&quot; title=&quot;HttpStatus&quot;&gt;&lt;/a&gt;HttpStatus&lt;/h1&gt;&lt;h2 id=&quot;Http-Status-Code-分类&quot;&gt;&lt;a href=&quot;#Ht
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>react 相关知识整理</title>
    <link href="http://yoursite.com/2018/12/11/react-%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2018/12/11/react-相关知识整理/</id>
    <published>2018-12-11T05:50:22.000Z</published>
    <updated>2019-03-04T06:38:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>整理一下脑图里关于 react 的相关的知识。</p><h2 id="react-的思想"><a href="#react-的思想" class="headerlink" title="react 的思想"></a>react 的思想</h2><h3 id="Just-The-UI"><a href="#Just-The-UI" class="headerlink" title="Just The UI"></a>Just The UI</h3><p>react 只是一个 UI 库，可以当作一个模板引擎，用在各种 mv*的框架中作为 view 层</p><h3 id="Virtual-DOM"><a href="#Virtual-DOM" class="headerlink" title="Virtual DOM"></a>Virtual DOM</h3><h4 id="什么是-Virtual-DOM"><a href="#什么是-Virtual-DOM" class="headerlink" title="什么是 Virtual DOM"></a>什么是 Virtual DOM</h4><p>在 React 中，render 执行的结果得到的并不是真正的 DOM 节点，而是轻量级的 JavaScript 对象，我们称之为 virtual DOM。</p><h4 id="Virtual-DOM-为什么能提高性能"><a href="#Virtual-DOM-为什么能提高性能" class="headerlink" title="Virtual DOM 为什么能提高性能"></a>Virtual DOM 为什么能提高性能</h4><p>react 在内存中维护 virtual DOM 来处理我们数据的改变，通过 diff 算法，得到一个 patch，然后将这个 patch 放到一个队列里，然后批量的更新这些 patch 到真实 DOM 里。</p><p>真实 DOM 的的工作流程：<br>大致分 5 步：创建 DOM tree –&gt; 创建 Style Rules -&gt; 构建 Render tree -&gt; 布局 Layout –&gt; 绘制 Painting<br>操作 DOM，浏览器会从构建 DOM 树开始从头到尾执行一遍流程。然而 DOM 的批量操作不会被合并，只会第一个 DOM 操作处理完之后再重新从构建 DOM 树开始第二个操作，一直到最后一个操作结束。</p><p>Virtrual DOM 的工作流程：<br>Virtrual DOM 会对批量的操作合并到 Virtrual DOM 树上，然后根据 diff 算法，查看哪一部分发生了变化，然后将 diff 的内容保存到本地的一个 js 对象里，然后这个对象再 attach 到 DOM 树上，通知浏览器重新绘制。</p><h4 id="diff-算法"><a href="#diff-算法" class="headerlink" title="diff 算法"></a>diff 算法</h4><p>React 通过制定大胆的策略，将 O(n^3) 复杂度的问题转换成 O(n) 复杂度的问题。</p><p><strong>diff 策略</strong><br>1、Web UI 中 DOM 节点跨层级的移动操作特别少，可以忽略不计。<br>2、拥有相同类的两个组件将会生成相似的树形结构，拥有不同类的两个组件将会生成不同的树形结构。<br>3、对于同一层级的一组子节点，它们可以通过唯一 id 进行区分。</p><p>基于以上三个前提策略，React 分别对 tree diff、component diff 以及 element diff 进行算法优化，事实也证明这三个前提策略是合理且准确的，它保证了整体界面构建的性能。</p><ul><li><strong>tree diff</strong><br>基于策略一，React 对树的算法进行了简洁明了的优化，即对树进行分层比较，两棵树只会对同一层次的节点进行比较。<br>React 通过 updateDepth 对 Virtual DOM 树进行层级控制，只会对相同颜色方框内的 DOM 节点进行比较，即同一个父节点下的所有子节点。当发现节点已经不存在，则该节点及其子节点会被完全删除掉，不会用于进一步的比较。这样只需要对树进行一次遍历，便能完成整个 DOM 树的比较。</li><li><strong>component diff</strong><br>React 是基于组件构建应用的，对于组件间的比较所采取的策略也是简洁高效。<br>如果是同一类型的组件，按照原策略继续比较 virtual DOM tree。<br>如果不是，则将该组件判断为 dirty component，从而替换整个组件下的所有子节点。<br>对于同一类型的组件，有可能其 Virtual DOM 没有任何变化，如果能够确切的知道这点那可以节省大量的 diff 运算时间，因此 React 允许用户通过 shouldComponentUpdate() 来判断该组件是否需要进行 diff。</li><li><strong>element diff</strong><br>当节点处于同一层级时，React diff 提供了三种节点操作，分别为：INSERT_MARKUP（插入）、MOVE_EXISTING（移动）和 REMOVE_NODE（删除）。<br>INSERT_MARKUP，新的 component 类型不在老集合里， 即是全新的节点，需要对新节点执行插入操作。<br>MOVE_EXISTING，在老集合有新 component 类型，且 element 是可更新的类型，generateComponentChildren 已调用 receiveComponent，这种情况下 prevChild=nextChild，就需要做移动操作，可以复用以前的 DOM 节点。<br>REMOVE_NODE，老 component 类型，在新集合里也有，但对应的 element 不同则不能直接复用和更新，需要执行删除操作，或者老 component 不在新集合里的，也需要执行删除操作。</li></ul><h3 id="Data-Flow"><a href="#Data-Flow" class="headerlink" title="Data Flow"></a>Data Flow</h3><p>单向数据流，只需要关心从数据怎么得出界面就行。由数据驱动页面的方式，可以轻松让用户界面和数据保持一致。<br>更新 DOM 的数据总是从顶层流下来，用户事件不直接操作 DOM，而是操作顶层数据</p><h2 id="react-解决了前端哪些痛点"><a href="#react-解决了前端哪些痛点" class="headerlink" title="react 解决了前端哪些痛点"></a>react 解决了前端哪些痛点</h2><p>1、组件化，模块化 ：react 组件化，和基于 webpack 可以使用 Es6 或 CommonJs 的写法实现模块化代码<br>2、开发效率：React 的代码基本就是组件的组合，分而治之的方式让代码的可阅读性很高，容易理解<br>3、运行效率：React 使用 Virtual DOM，通过 diff 算法，更新特定的 dom，加快了效率<br>4、可维护性：维护性强<br>5、用户体验：spa</p><h2 id="react-生命周期"><a href="#react-生命周期" class="headerlink" title="react 生命周期"></a>react 生命周期</h2><h3 id="react-完整的生命周期"><a href="#react-完整的生命周期" class="headerlink" title="react 完整的生命周期"></a>react 完整的生命周期</h3><p>react 的生命周期包括：<br><img src="https://github.com/kaisa911/studyNotes/blob/master/public/image/react-lifecycle.jpg?raw=true" alt="react生命周期"></p><h3 id="数据请求"><a href="#数据请求" class="headerlink" title="数据请求"></a>数据请求</h3><p>react 在 16.3 中，将 componentWillMount 标为不安全的生命周期函数，所以需要在 componentDidMount 里面获取数据。<br><strong>为什么不在 constructor？</strong><br>constructor 被调用是在组件准备要挂载的最一开始，所以此时组件尚未挂载到网页上，而且在未渲染的时候，数据获取到也不会存在。</p><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><p>shouldComponentUpdate ：<br>组件接受到新属性或者新状态的时候（可以返回 false，接收数据后不更新，阻止 render 调用，后面的函数不会被继续执行了）</p><p>这个方法用来判断是否需要调用 render 方法重新描绘 dom。因为 dom 的描绘非常消耗性能，如果我们能在 shouldComponentUpdate 方法中能够写出更优化的 dom diff 算法，可以极大的提高性能。</p><h2 id="JSX-相关"><a href="#JSX-相关" class="headerlink" title="JSX 相关"></a>JSX 相关</h2><h3 id="JSX-怎么被浏览器认识"><a href="#JSX-怎么被浏览器认识" class="headerlink" title="JSX 怎么被浏览器认识"></a>JSX 怎么被浏览器认识</h3><p>JSX 是 React 对 JS 语法的拓展，需要编译后才能正确使用它，JSX 的构建非常简洁明</p><p>JSX 是需要编译才能被浏览器识别的，它就是被 Babel 编译的，具体说来是被 babel-preset-react 来编译的。不过 Babel 的最主要目的其实并非编译 JSX，Babel 应该算是一个编译平台，其主要目的是转换你在代码中使用了的 ES6 甚至 ES7 语法为浏览器识别的 ES5 语法（babel-core,babel-preset-es2015 模块）。</p><p>Babel 转译器会把 JSX 转换成一个名为 React.createElement() 的方法调用。</p><p>本质上来讲，JSX 只是为 React.createElement(component, props, …children) 方法提供的语法糖。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">"greeting"</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line"><span class="keyword">const</span> element = React.createElement(<span class="string">'h1'</span>, &#123; <span class="attr">className</span>: <span class="string">'greeting'</span> &#125;, <span class="string">'Hello, world!'</span>);</span><br></pre></td></tr></table></figure><h3 id="JSX-组件的首字母为什么要大写"><a href="#JSX-组件的首字母为什么要大写" class="headerlink" title="JSX 组件的首字母为什么要大写"></a>JSX 组件的首字母为什么要大写</h3><p>当元素类型以小写字母开头时，它表示一个内置的组件，<br>如 <code>&lt;div&gt;</code> 或 <code>&lt;span&gt;</code>，并将字符串 ‘div’ 或 ‘span’ 传 递给 React.createElement。 以大写字母开头的类型，如 <foo> 编译为 React.createElement(Foo)，并它正对应于你在 JavaScript 文件中定义或导入的组件。</foo></p><h2 id="函数绑定-this"><a href="#函数绑定-this" class="headerlink" title="函数绑定 this"></a>函数绑定 this</h2><p>react 中函数绑定 this 有那么几种方法：<br>1、箭头函数<br>不管是在类里面，还是在 render 里面，都可以用箭头函数，箭头函数会自动绑定 this。</p><p>2、在构造函数里绑定 this</p><p>3、在 render 里用.bind(this)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.handleClick3 = <span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'this &gt; '</span>, <span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  handleClick2 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'this &gt; '</span>, <span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  handleClick3() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'this &gt; '</span>, <span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  handleClick4() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'this &gt; '</span>, <span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div onClick=&#123;<span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>)&#125;&gt;test&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div onClick=&#123;this.handleClick2&#125;&gt;test2&lt;/</span>div&gt;</span><br><span class="line">      &lt;div onClick=&#123;<span class="keyword">this</span>.handleClick3&#125;&gt;test3&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div onClick=&#123;e=&gt;handleClick4(e)&#125;&gt;test4&lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="组件的三种定义方法"><a href="#组件的三种定义方法" class="headerlink" title="组件的三种定义方法"></a>组件的三种定义方法</h3><p>1、纯函数组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HelloComponent</span>(<span class="params">props <span class="regexp">/* context */</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello &#123;props.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、使用 React.createClass 创建组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> InputControlES5 = React.createClass(&#123;</span><br><span class="line">  propTypes: &#123;</span><br><span class="line">    <span class="comment">//定义传入props中的属性各种类型</span></span><br><span class="line">    initialValue: React.PropTypes.string</span><br><span class="line">  &#125;,</span><br><span class="line">  defaultProps: &#123;</span><br><span class="line">    <span class="comment">//组件默认的props对象</span></span><br><span class="line">    initialValue: <span class="string">''</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 设置 initial state</span></span><br><span class="line">  getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//组件相关的状态对象</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      text: <span class="keyword">this</span>.props.initialValue || <span class="string">'placeholder'</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  handleChange: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      <span class="comment">//this represents react component instance</span></span><br><span class="line">      text: event.target.value</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        Type something:</span><br><span class="line">        &lt;input onChange=&#123;<span class="keyword">this</span>.handleChange&#125; value=&#123;<span class="keyword">this</span>.state.text&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br></pre></td></tr></table></figure><p>3、使用 ES6 的类，继承 React.Component 来创建组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InputControlES6</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      text: props.initialValue || <span class="string">'placeholder'</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleChange = <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      text: event.target.value</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        Type something:</span><br><span class="line">        &lt;input onChange=&#123;<span class="keyword">this</span>.handleChange&#125; value=&#123;<span class="keyword">this</span>.state.text&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;整理一下脑图里关于 react 的相关的知识。&lt;/p&gt;
&lt;h2 id=&quot;react-的思想&quot;&gt;&lt;a href=&quot;#react-的思想&quot; class=&quot;headerlink&quot; title=&quot;react 的思想&quot;&gt;&lt;/a&gt;react 的思想&lt;/h2&gt;&lt;h3 id=&quot;Just-T
      
    
    </summary>
    
      <category term="面试锦囊" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95%E9%94%A6%E5%9B%8A/"/>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>作用域及闭包</title>
    <link href="http://yoursite.com/2018/12/06/%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%8F%8A%E9%97%AD%E5%8C%85/"/>
    <id>http://yoursite.com/2018/12/06/作用域及闭包/</id>
    <published>2018-12-06T04:03:36.000Z</published>
    <updated>2019-03-04T06:38:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>想搞一个大事情！</p><p>开篇点题，嗯，这个题目真的是一个大事情。感觉要准备好多东西，要理解很多东西。</p><h2 id="什么是作用域"><a href="#什么是作用域" class="headerlink" title="什么是作用域"></a>什么是作用域</h2><p>作用域，看了一些书啊，文章啊，似乎对作用域的解释都是那么几句话，比如<br>《你不知道的 JavaScript（上）》里说，作用域就是一套设计良好的用来存储变量规则 。<br>mqyqingfeng (冴羽) 说，作用域是指程序源代码中定义变量的区域。</p><p>嗯，反正就是一个区域，用来定义变量，存储变量，在需要的时候找到变量的地方。</p><h2 id="为什么需要作用域"><a href="#为什么需要作用域" class="headerlink" title="为什么需要作用域"></a>为什么需要作用域</h2><p>为什么需要作用域呢？有一个最小访问原则。<br>设置作用域的一个优势，是为你的代码提供了一个安全层级。计算机安全中，有个常规的原则是：用户只能访问他们当前需要的东西。这叫做最小访问原则。这个原则应用于编程语言设计，在大多数编程语言（包括 JavaScript）中就被称为作用域。<br>当然，设置作用域还有一些提高性能，减少 bug 的优势，还能解决不同范围内的同名变量命名的问题等。</p><h2 id="JS-中的作用域"><a href="#JS-中的作用域" class="headerlink" title="JS 中的作用域"></a>JS 中的作用域</h2><p>JavaScript 中的采用的是词法作用域，也就是静态作用域。<br>JavaScript 中的作用域包括</p><ul><li>全局作用域</li><li>函数作用域</li><li>块级作用域</li><li>词法作用域（静态作用域）</li><li>动态作用域</li></ul><h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><p>直接编写在 script 标签中的 JS 代码，都在全局作用域。<br>变量的生命周期：在页面打开时创建，在页面关闭时销毁，<br>全局作用域中，创建变量都会作为 window 对象的属性保存，创建的函数都会作为 window 对象的方法保存，<br>全局作用域中的变量和函数都是全局变量，在页面的任何部分都可以访问的到</p><p>在函数中，未使用var关键字定义的变量都是全局变量。</p><h3 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h3><h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><h3 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h3><h3 id="动态作用域"><a href="#动态作用域" class="headerlink" title="动态作用域"></a>动态作用域</h3><h2 id="闭包作用域"><a href="#闭包作用域" class="headerlink" title="闭包作用域"></a>闭包作用域</h2><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;想搞一个大事情！&lt;/p&gt;
&lt;p&gt;开篇点题，嗯，这个题目真的是一个大事情。感觉要准备好多东西，要理解很多东西。&lt;/p&gt;
&lt;h2 id=&quot;什么是作用域&quot;&gt;&lt;a href=&quot;#什么是作用域&quot; class=&quot;headerlink&quot; title=&quot;什么是作用域&quot;&gt;&lt;/a&gt;什么是作用域
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>react 主要概念笔记</title>
    <link href="http://yoursite.com/2018/11/08/react-%E4%B8%BB%E8%A6%81%E6%A6%82%E5%BF%B5%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/11/08/react-主要概念笔记/</id>
    <published>2018-11-08T06:15:22.000Z</published>
    <updated>2019-03-14T09:17:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>React v16.5.2 文档学习</p><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>React 应用的构成模块：元素和组件</p><h2 id="JSX-简介"><a href="#JSX-简介" class="headerlink" title="JSX 简介"></a>JSX 简介</h2><p>JSX 是一种 JavaScript 的语法扩展，推荐在 React 中使用 JSX 来描述用户界面。<br>可以在 JSX 中任意的使用 JS 表达式，但是 JS 表达式要放在大括号里。</p><p>JSX 本身也是一种表达式，在编译之后，JSX 会被转化成普通的 JS 对象。<br>JSX 的中，ReactDOM 使用小驼峰来命名。</p><p>JSX 防注入攻击，因为 React DOM 在渲染之前默认会过滤所有传入的值，所有的内容在渲染之前都被转换成了字符串。可以有效的防止 XSS 攻击。</p><p>JSX 代表 Objects，Babel 转译器会把 JSX 专换成一个名为<code>React.createElement()</code>的方法调用。<br><code>React.createElement()</code>会返回一个对象，这个对象被称为“React 元素”。React 通过读取这些对象来构建 DOM 并且保持数据一致。</p><h2 id="元素渲染"><a href="#元素渲染" class="headerlink" title="元素渲染"></a>元素渲染</h2><p>元素是构成 React 应用的最小单位。<br>元素用来描述在屏幕上看到的东西，React 中的元素是普通的 JS 对象，ReactDOM 可以确保浏览器 DOM 的数据和 react 元素保持一致。</p><p>在 Html 页面里定义一个<code>id=&quot;root&quot;</code>根节点。<br>然后通过<code>ReactDOM.render()</code>方法，将 React 元素渲染到根 DOM 里。</p><p>更新元素渲染，是创建一个新的元素，然后用<code>ReactDOM.render()</code>方法，将 React 元素渲染到根 DOM 里。<br>但是，React DOM 会比较元素内容先后的不同，然后在渲染过程中，只更新改变了的部分。</p><h2 id="组件-amp-props"><a href="#组件-amp-props" class="headerlink" title="组件&amp;props"></a>组件&amp;props</h2><p>组件是独立的可复用的 ui 部件，从概念上看就像是函数，可以接受任意的输入值（props），并返回一个 React 元素。</p><p>定义组件，可以是一个 JavaScript 函数或者用一个 ES6 的 class 来定义一个组件。<br>React 元素可以是 DOM 标签，也可以是自定义的组件。<br>组件名称必须以大写字母开头。并且在使用组件时，需要引入或者定义它。<br>组件可以在输出中引用其他组件，但是组件的返回值只能有一个根元素。</p><p>Props 的只读性，无论是使用函数或者时类来声明一个组件，它不允许修改自己的 props。所有的 React 组件必须像纯函数那样使用它们的 props。</p><h2 id="State-amp-生命周期"><a href="#State-amp-生命周期" class="headerlink" title="State&amp;生命周期"></a>State&amp;生命周期</h2><p>使用类来声明一个组件，可以允许使用局部状态，生命周期钩子等。<br>使用类声明组件时，使用<code>constructor</code>把 props 传递到组件里:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">  <span class="keyword">super</span>(props);</span><br><span class="line">  <span class="keyword">this</span>.state = &#123;<span class="attr">date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生命周期：<br>当组件第一次加载到 DOM 中的时候，称为挂载；<br>当组件生成的 DOM 被移除时，称为卸载。</p><p>正确的使用状态：<br>1、不要直接更新状态，直接更新不会重新渲染组件，应使用<code>this.setState({})</code>来更新。<br>2、状态更新可能是异步的。<br>3、状态更新合并，也可以独立更新。</p><p>数据自顶向下流动。<br>父组件和子组件都不知道某一个组件是否有状态，所以状态被称为局部状态，除了拥有并设置它的组件外，其他组件不可访问。组件可以选择状态，当作属性传给子组件。这被称为单向数据流。<br>任何状态始终由某些特定组件所有，并且从该状态导出的任何数据或 UI 只能影响树中下方的组件。</p><p>在 React 应用程序中，组件是有状态还是无状态被认为是可能随时间而变化的组件的实现细节。 可以在有状态组件中使用无状态组件，反之亦然。</p><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><p>React 的事件绑定属性的命名采用驼峰式写法，并为其赋值一个事件处理函数。<br>在函数中，要调用<code>preventDefault()</code>方法来阻止默认行为。</p><p>事件绑定 this：<br>因为类的方法不会默认绑定 this，所以用 ES5 写函数的时候，在调用的时候，需要在 constructor 里绑定 this。<br>也可以用 ES6 的箭头函数来写。</p><p>用 ES6 class 语法来定义一个组件的时候，事件处理器会成为类的一个方法</p><p>向事件处理程序传递参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;(e) =&gt; <span class="keyword">this</span>.deleteRow(id, e)&#125;&gt;Delete Row&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button onClick=&#123;this.deleteRow.bind(this, id)&#125;&gt;Delete Row&lt;/</span>button&gt;</span><br></pre></td></tr></table></figure><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><p>可以使用 if..else..语句来条件渲染。<br>可以使用与运算符 &amp;&amp;来条件渲染<br>可以使用 JavaScript 的条件运算符 condition ? true : false 来条件渲染</p><p>阻止条件渲染，可以用三目运算符，让 render 方法返回 null 而不是它的渲染结果即可实现。<br>组件的 render 方法返回 null 并不会影响该组件生命周期方法的回调。</p><h2 id="列表-amp-Keys"><a href="#列表-amp-Keys" class="headerlink" title="列表 &amp; Keys"></a>列表 &amp; Keys</h2><p>使用 map()函数，让每一个元素返回一个标签或者组件。</p><p>Keys 可以在 DOM 中的某些元素被增加或删除的时候帮助 React 识别哪些元素发生了变化。因此你应当给列表中的每一个元素赋予一个确定的标识</p><p>元素的 key 在他的兄弟元素之间应该唯一</p><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><p>其值由 React 控制的输入表单元素称为“受控组件”</p><p>通过受控组件，来构造一个处理提交表单并可访问用户输入表单数据的函数<br>在 react 中，受控组件需要使用 this.setState 来进行更新。<br>使用”受控组件”,每个状态的改变都有一个与之相关的处理函数。这样就可以直接修改或验证用户输入。</p><h2 id="状态提升"><a href="#状态提升" class="headerlink" title="状态提升"></a>状态提升</h2><p>使用 react 经常会遇到几个组件需要共用状态数据的情况。这种情况下，我们最好将这部分共享的状态提升至他们最近的父组件当中进行管理。<br>在 React 应用中，对应任何可变数据理应只有一个单一“数据源”。通常，状态都是首先添加在需要渲染数据的组件中。此时，如果另一个组件也需要这些数据，你可以将数据提升至离它们最近的父组件中。你应该在应用中保持 自上而下的数据流，而不是尝试在不同组件中同步状态。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;React v16.5.2 文档学习&lt;/p&gt;
&lt;h2 id=&quot;Hello-World&quot;&gt;&lt;a href=&quot;#Hello-World&quot; class=&quot;headerlink&quot; title=&quot;Hello World&quot;&gt;&lt;/a&gt;Hello World&lt;/h2&gt;&lt;p&gt;React 应用
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>linux 服务器安装nginx及配置</title>
    <link href="http://yoursite.com/2018/11/02/linux-%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85nginx/"/>
    <id>http://yoursite.com/2018/11/02/linux-服务器安装nginx/</id>
    <published>2018-11-02T02:53:39.000Z</published>
    <updated>2019-03-06T05:07:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 linux 服务器上安装 nginx，是想把自己写的项目配置到服务器上, 于是就研究了一下 nginx</p><h2 id="安装-nginx"><a href="#安装-nginx" class="headerlink" title="安装 nginx"></a>安装 nginx</h2><p>我是用 yum 安装的 nginx，简单快捷，命令也简单</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">yum -y install nginx;</span><br><span class="line"></span><br><span class="line">已加载插件：fastestmirror, security</span><br><span class="line">设置安装进程</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">解决依赖关系</span><br><span class="line">--&gt; 执行事务检查</span><br><span class="line">---&gt; Package nginx.i686 0:1.0.15-12.el6 will be 安装</span><br><span class="line">--&gt; 完成依赖关系计算</span><br><span class="line"></span><br><span class="line">依赖关系解决</span><br><span class="line"></span><br><span class="line">========================================================================================================================================</span><br><span class="line"> 软件包                        架构                         版本                                     仓库                          大小</span><br><span class="line">========================================================================================================================================</span><br><span class="line">正在安装:</span><br><span class="line"> nginx                         i686                         1.0.15-12.el6                            epel                         410 k</span><br><span class="line"></span><br><span class="line">事务概要</span><br><span class="line">========================================================================================================================================</span><br><span class="line">Install       1 Package(s)</span><br><span class="line"></span><br><span class="line">总下载量：410 k</span><br><span class="line">Installed size: 1.1 M</span><br><span class="line">下载软件包：</span><br><span class="line">nginx-1.0.15-12.el6.i686.rpm                                                                                     | 410 kB     00:00</span><br><span class="line">运行 rpm_check_debug</span><br><span class="line">执行事务测试</span><br><span class="line">事务测试成功</span><br><span class="line">执行事务</span><br><span class="line">Warning: RPMDB altered outside of yum.</span><br><span class="line">  正在安装   : nginx-1.0.15-12.el6.i686                                                                                             1/1</span><br><span class="line">  Verifying  : nginx-1.0.15-12.el6.i686                                                                                             1/1</span><br><span class="line"></span><br><span class="line">已安装:</span><br><span class="line">  nginx.i686 0:1.0.15-12.el6</span><br><span class="line"></span><br><span class="line">完毕！</span><br></pre></td></tr></table></figure><p>然后可以查看一下 nginx 的版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx -v</span><br><span class="line">nginx version: nginx/1.12.2</span><br></pre></td></tr></table></figure><p>然后记一下 nginx 的启动，停止，和重启的问题就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 启动服务</span><br><span class="line">service nginx start</span><br><span class="line"></span><br><span class="line">// 关闭服务</span><br><span class="line">service nginx stop</span><br><span class="line"></span><br><span class="line">// 重启服务</span><br><span class="line">service nginx restart</span><br></pre></td></tr></table></figure><p>然后把项目记得放在／usr 目录下，然后你就需要配置 nginx.conf 了</p><p>我的 nginx.conf 是放在/etc/nginx/目录下，打开目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim nginx.conf</span><br></pre></td></tr></table></figure><p>然后可以在 vim 里处理 nginx.conf 文件</p><p>默认配置可以不动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// 由于是单页应用虚拟路由的原因，需要将nginx的所有请求都转发到index.html页面，所以需要修改配置文件：</span><br><span class="line">server &#123;</span><br><span class="line">        listen       80 default_server;</span><br><span class="line">        listen       [::]:80 default_server;</span><br><span class="line">        server_name  _;</span><br><span class="line">        root         /usr/project/projectName/dist;</span><br><span class="line"></span><br><span class="line">        # Load configuration files for the default server block.</span><br><span class="line">        include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        location ~* html &#123;</span><br><span class="line">            rewrite .* /index.html break;</span><br><span class="line">            root /usr/project/projectName/dist/;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 404 /404.html;</span><br><span class="line">            location = /index.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 500 502 503 504 /50x.html;</span><br><span class="line">            location = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然后重启nginx服务，在浏览器里输入ip地址就可以看到你的项目啦～</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 linux 服务器上安装 nginx，是想把自己写的项目配置到服务器上, 于是就研究了一下 nginx&lt;/p&gt;
&lt;h2 id=&quot;安装-nginx&quot;&gt;&lt;a href=&quot;#安装-nginx&quot; class=&quot;headerlink&quot; title=&quot;安装 nginx&quot;&gt;&lt;/a&gt;安
      
    
    </summary>
    
      <category term="服务器配置" scheme="http://yoursite.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>前端性能优化</title>
    <link href="http://yoursite.com/2018/10/10/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2018/10/10/前端性能优化/</id>
    <published>2018-10-10T07:14:35.000Z</published>
    <updated>2019-03-04T06:38:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在整理前端面试的一些知识点，感觉前端的性能优化是一个很重要的方面，还是得好好整理一下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">问题：前端优化有那些解决方案？</span><br></pre></td></tr></table></figure><p>前端性能优化的原则以<b>更好的用户体验为标准</b>,具体就是要实现以下两个目标</p><ul><li>多使用内存、缓存或者其他方法</li><li>减少 CPU 和GPU 计算，更快展现</li></ul><p>而前端优化的方向有两个：</p><ul><li>减少页面体积，提升网络加载</li><li>优化页面渲染</li></ul><p>具体的方案有：</p><h2 id="减少页面体积，提升网络加载："><a href="#减少页面体积，提升网络加载：" class="headerlink" title="减少页面体积，提升网络加载："></a>减少页面体积，提升网络加载：</h2><p>1、静态资源压缩合并<br>    webpack 打包，把js，css，等文件压缩打包<br>2、静态资源缓存</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在整理前端面试的一些知识点，感觉前端的性能优化是一个很重要的方面，还是得好好整理一下。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端性能优化" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Javascript原型学习</title>
    <link href="http://yoursite.com/2018/10/09/Javascript%E5%8E%9F%E5%9E%8B%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/10/09/Javascript原型学习/</id>
    <published>2018-10-09T03:21:29.000Z</published>
    <updated>2019-03-04T06:38:57.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p><code>prototype</code>是函数才有的一个属性。</p></li><li><p>函数的 prototype 属性指向了一个对象，这个对象正是<b>调用该构造函数而创建的<i>实例</i></b>的原型。</p></li><li><p>原型可以理解成：每一个 JS 对象（null 除外），在创建的时候，就会与之关联另一个对象，这个对象就是我们说的原型。每个对象都会从原型继承属性。</p></li><li><p>每一个 JS 对象（null 除外）都有一个<code>_proto_</code>的属性，该属性指向该对象的原型。</p></li><li><p>每一个原型都会有一个<code>constructor</code>属性，指向关联的构造函数。</p></li><li><p>原型也是一个对象，是通过<code>Object()</code>构造函数生成的。</p></li><li><p><code>Object.prototype</code>没有原型</p></li><li><p>关系图<br><img src="https://github.com/mqyqingfeng/Blog/raw/master/Images/prototype5.png" alt="关系图"></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;prototype&lt;/code&gt;是函数才有的一个属性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;函数的 prototype 属性指向了一个对象，这个对象正是&lt;b&gt;调用该构造函数而创建的&lt;i&gt;实例&lt;/i&gt;&lt;/b&gt;的原型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>for 循环作用域的探究</title>
    <link href="http://yoursite.com/2018/09/29/for-%E5%BE%AA%E7%8E%AF%E4%BD%9C%E7%94%A8%E5%9F%9F%E7%9A%84%E6%8E%A2%E7%A9%B6/"/>
    <id>http://yoursite.com/2018/09/29/for-循环作用域的探究/</id>
    <published>2018-09-29T06:22:18.000Z</published>
    <updated>2019-03-04T06:38:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前看到这么一个题，问最后输出什么？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="function">(<span class="params">setTimeout((</span>) =&gt;</span> <span class="built_in">console</span>.log(i), <span class="number">2333</span>), <span class="number">0</span>); i &lt; <span class="number">2</span>; i++) &#123;&#125;</span><br></pre></td></tr></table></figure><p>答案是在 2333ms 之后，输出了 0。</p><p>一直在想什么原因。今天闲着没事重新在看阮一峰 es6 入门，然后想起来这个问题。</p><p>es6 入门的 let 和 const 的那一章里，他说了一个问题：</p><p><b>for 循环还有一个特别之处，就是设置循环变量的那部分是一个父作用域，而循环体内部是一个单独的子作用域。</b></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="string">'abc'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// abc</span></span><br><span class="line"><span class="comment">// abc</span></span><br><span class="line"><span class="comment">// abc</span></span><br></pre></td></tr></table></figure><p><strong> 因为输出了 3 遍 abc，这表明函数内部的变量 i 与循环变量 i 不在同一个作用域，有各自单独的作用域。</strong></p><p>我 google 了一下，发现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br></pre></td></tr></table></figure><p>在声明的（）内存在一个变量 i，会存在 JavaScript 引擎内部。 每一次循环的时候， JavaScript 引擎内部会记住上一轮循环的值，然后将新的 i 的值赋值给 i。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="string">'abc'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在循环体里面，这是一个新的作用域，重新声明一个 i；不会影响（）里 i 的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  i = <span class="string">'abc'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// abc</span></span><br></pre></td></tr></table></figure><p>但是如果不声明 i，直接给 i 赋值，会影响（）里 i 的值，说明（）是循环体的上一级作用域，在循环体里直接改变 i 的值会影响上一级作用域里的 i 值。</p><p>回到最初的那道题里面：</p><p>for 循环有三个语句：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (语句 <span class="number">1</span>; 语句 <span class="number">2</span>; 语句 <span class="number">3</span>)</span><br><span class="line">  &#123;</span><br><span class="line">  被执行的代码块</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>语句 1 在循环（代码块）开始前执行，就是 for()之前开始执行，只会执行一次。并且在 js 引擎里记住这个变量，他的值随着条件改变。</p><p>语句 2 定义运行循环（代码块）的条件。</p><p>语句 3 在循环（代码块）已被执行之后执行。</p><p>语句1如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="function">(<span class="params">setTimeout((</span>) =&gt;</span> <span class="built_in">console</span>.log(i), <span class="number">2333</span>), <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>这个表达式，同步执行的时候，因为括号里是逗号表达式，所以返回了 0，i=0；同时把 setTimeout 放到了 macrotasks 中。并继续向下执行。</p><p>这个题目，就会变成这样了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> o = <span class="function">(<span class="params">setTimeout((</span>) =&gt;</span> <span class="built_in">console</span>.log(o), <span class="number">2333</span>), <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = o; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> j = i;</span><br><span class="line">    <span class="built_in">console</span>.log(j);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就好理解了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前看到这么一个题，问最后输出什么？&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
      
    
    </summary>
    
      <category term="Demo练习" scheme="http://yoursite.com/categories/Demo%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>实现一个解构数组的方法</title>
    <link href="http://yoursite.com/2018/09/10/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%A7%A3%E6%9E%84%E6%95%B0%E7%BB%84%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/09/10/实现一个解构数组的方法/</id>
    <published>2018-09-10T06:48:28.000Z</published>
    <updated>2019-03-04T06:38:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>一道笔试题：</p><p>实现 destructuringArray 方法，<br>达到如下效果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// destructuringArray( [1,[2,4],3], "[a,[b],c]" );</span></span><br><span class="line"><span class="comment">// result</span></span><br><span class="line"><span class="comment">// &#123; a:1, b:2, c:3 &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> targetArray = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> formater = <span class="string">'[a, [b], c]'</span>;</span><br><span class="line"><span class="keyword">const</span> formaterArray = [<span class="string">'a'</span>, [<span class="string">'b'</span>], <span class="string">'c'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> destructuringArray = <span class="function">(<span class="params">values, keys</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> keys === <span class="string">'string'</span>) &#123;</span><br><span class="line">      keys = <span class="built_in">JSON</span>.parse(keys.replace(<span class="regexp">/\w+/g</span>, <span class="string">'"$&amp;"'</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> iterate = <span class="function">(<span class="params">values, keys</span>) =&gt;</span></span><br><span class="line">      keys.forEach(<span class="function">(<span class="params">key, i</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(key)) iterate(values[i], key);</span><br><span class="line">        <span class="keyword">else</span> obj[key] = values[i];</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">    iterate(values, keys);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(e.message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.dir(destructuringArray(targetArray, formater));</span><br><span class="line"><span class="built_in">console</span>.dir(destructuringArray(targetArray, formaterArray));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一道笔试题：&lt;/p&gt;
&lt;p&gt;实现 destructuringArray 方法，&lt;br&gt;达到如下效果&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class
      
    
    </summary>
    
      <category term="面试锦囊" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95%E9%94%A6%E5%9B%8A/"/>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>如何判断一个整数是否在40亿个整数中？</title>
    <link href="http://yoursite.com/2018/09/10/%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E6%95%B4%E6%95%B0%E6%98%AF%E5%90%A6%E5%9C%A840%E4%BA%BF%E4%B8%AA%E6%95%B4%E6%95%B0%E4%B8%AD%EF%BC%9F/"/>
    <id>http://yoursite.com/2018/09/10/如何判断一个整数是否在40亿个整数中？/</id>
    <published>2018-09-10T06:47:45.000Z</published>
    <updated>2019-03-04T06:38:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>题目：我有 40 亿个整数，再给一个新的整数，我需要判断新的整数是否在 40 亿个整数中，你会怎么做（每个整数是32位的）？</p><p>一个数在不在就是两个状态，在或者不在，就可以用1个位来代表。<br>每个整数是32位的，那么所有的整数也就2^32个，大概42亿个数左右。<br>可以申请2^32的位，把每一个整数都覆盖了，40亿个数的位分别为1，剩下的位为0。<br>新的整数，就可以跟进它的大小来判断相应的位，比如1245，就去看1245位是1还是0来判断是否在这40亿个整数中。</p><p>2^32个位，就是2^29个字节，也就是500M左右。</p><p>位图法（bitmap）</p><p>链接：<br><a href="https://mp.weixin.qq.com/s/XC7Wpc5ZdvcT_7h3I956RQ" target="_blank" rel="noopener">漫画：如何判断一个数是否在 40 亿个整数中</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目：我有 40 亿个整数，再给一个新的整数，我需要判断新的整数是否在 40 亿个整数中，你会怎么做（每个整数是32位的）？&lt;/p&gt;
&lt;p&gt;一个数在不在就是两个状态，在或者不在，就可以用1个位来代表。&lt;br&gt;每个整数是32位的，那么所有的整数也就2^32个，大概42亿个数左
      
    
    </summary>
    
      <category term="面试锦囊" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95%E9%94%A6%E5%9B%8A/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>关于xss和csrf</title>
    <link href="http://yoursite.com/2018/09/06/%E5%85%B3%E4%BA%8Exss%E5%92%8Ccsrf/"/>
    <id>http://yoursite.com/2018/09/06/关于xss和csrf/</id>
    <published>2018-09-06T08:10:57.000Z</published>
    <updated>2019-03-04T06:38:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><p>xss 是跨网站指令码，是代码注入的一种，它允许恶意使用者将程式码注入到网页上，其他使用者在观看网页时就会受到影响。这类攻击通常包含了 HTML 以及使用者端脚本语言。</p><p>攻击方式: XSS 通过修改 HTML 节点或者执行 JS 代码来攻击网站。比如通过 url 来在页面上添加 html 后者 js 文件。</p><p>防止: 最普遍的方法，是将输出的内容进行转义，比如对于引号，尖括号，斜杠进行转义等，再就是设置白名单或者黑名单等。比如只允许加载本站资源等。。</p><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><p>csrf 跨站请求伪造，是一种挟制用户在当前已登录的 Web 应用程序上执行非本意的操作的攻击方法。简单点说，CSRF 就是利用用户的登录态发起恶意请求。</p><p>防止：防范 CSRF 可以遵循以下几种规则：</p><ul><li>Get 请求不对数据进行修改</li><li>不让第三方网站访问到用户 Cookie</li><li>阻止第三方网站请求接口</li><li>请求时附带验证信息，比如验证码或者 token</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;XSS&quot;&gt;&lt;a href=&quot;#XSS&quot; class=&quot;headerlink&quot; title=&quot;XSS&quot;&gt;&lt;/a&gt;XSS&lt;/h2&gt;&lt;p&gt;xss 是跨网站指令码，是代码注入的一种，它允许恶意使用者将程式码注入到网页上，其他使用者在观看网页时就会受到影响。这类攻击通常包含
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端安全" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
</feed>
