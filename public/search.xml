<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>for 循环作用域的探究</title>
      <link href="/2018/09/29/for-%E5%BE%AA%E7%8E%AF%E4%BD%9C%E7%94%A8%E5%9F%9F%E7%9A%84%E6%8E%A2%E7%A9%B6/"/>
      <url>/2018/09/29/for-%E5%BE%AA%E7%8E%AF%E4%BD%9C%E7%94%A8%E5%9F%9F%E7%9A%84%E6%8E%A2%E7%A9%B6/</url>
      <content type="html"><![CDATA[<p>之前看到这么一个题，问最后输出什么？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="function">(<span class="params">setTimeout((</span>) =&gt;</span> <span class="built_in">console</span>.log(i), <span class="number">2333</span>), <span class="number">0</span>); i &lt; <span class="number">2</span>; i++) &#123;&#125;</span><br></pre></td></tr></table></figure><p>答案是在 2333ms 之后，输出了 0。</p><p>一直在想什么原因。今天闲着没事重新在看阮一峰 es6 入门，然后想起来这个问题。</p><p>es6 入门的 let 和 const 的那一章里，他说了一个问题：</p><p><b>for 循环还有一个特别之处，就是设置循环变量的那部分是一个父作用域，而循环体内部是一个单独的子作用域。</b></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="string">'abc'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// abc</span></span><br><span class="line"><span class="comment">// abc</span></span><br><span class="line"><span class="comment">// abc</span></span><br></pre></td></tr></table></figure><p><strong> 因为输出了 3 遍 abc，这表明函数内部的变量 i 与循环变量 i 不在同一个作用域，有各自单独的作用域。</strong></p><p>我 google 了一下，发现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br></pre></td></tr></table></figure><p>在声明的（）内存在一个变量 i，会存在 JavaScript 引擎内部。 每一次循环的时候， JavaScript 引擎内部会记住上一轮循环的值，然后将新的 i 的值赋值给 i。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="string">'abc'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在循环体里面，这是一个新的作用域，重新声明一个 i；不会影响（）里 i 的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  i = <span class="string">'abc'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// abc</span></span><br></pre></td></tr></table></figure><p>但是如果不声明 i，直接给 i 赋值，会影响（）里 i 的值，说明（）是循环体的上一级作用域，在循环体里直接改变 i 的值会影响上一级作用域里的 i 值。</p><p>回到最初的那道题里面：</p><p>for 循环有三个语句：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (语句 <span class="number">1</span>; 语句 <span class="number">2</span>; 语句 <span class="number">3</span>)</span><br><span class="line">  &#123;</span><br><span class="line">  被执行的代码块</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>语句 1 在循环（代码块）开始前执行，就是 for()之前开始执行，只会执行一次。并且在 js 引擎里记住这个变量，他的值随着条件改变。</p><p>语句 2 定义运行循环（代码块）的条件。</p><p>语句 3 在循环（代码块）已被执行之后执行。</p><p>语句1如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="function">(<span class="params">setTimeout((</span>) =&gt;</span> <span class="built_in">console</span>.log(i), <span class="number">2333</span>), <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>这个表达式，同步执行的时候，因为括号里是逗号表达式，所以返回了 0，i=0；同时把 setTimeout 放到了 macrotasks 中。并继续向下执行。</p><p>这个题目，就会变成这样了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> o = <span class="function">(<span class="params">setTimeout((</span>) =&gt;</span> <span class="built_in">console</span>.log(o), <span class="number">2333</span>), <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = o; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> j = i;</span><br><span class="line">    <span class="built_in">console</span>.log(j);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就好理解了</p>]]></content>
      
      <categories>
          
          <category> Demo练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>实现一个解构数组的方法</title>
      <link href="/2018/09/10/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%A7%A3%E6%9E%84%E6%95%B0%E7%BB%84%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2018/09/10/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%A7%A3%E6%9E%84%E6%95%B0%E7%BB%84%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>一道笔试题：</p><p>实现 destructuringArray 方法，<br>达到如下效果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// destructuringArray( [1,[2,4],3], "[a,[b],c]" );</span></span><br><span class="line"><span class="comment">// result</span></span><br><span class="line"><span class="comment">// &#123; a:1, b:2, c:3 &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> targetArray = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> formater = <span class="string">'[a, [b], c]'</span>;</span><br><span class="line"><span class="keyword">const</span> formaterArray = [<span class="string">'a'</span>, [<span class="string">'b'</span>], <span class="string">'c'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> destructuringArray = <span class="function">(<span class="params">values, keys</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> keys === <span class="string">'string'</span>) &#123;</span><br><span class="line">      keys = <span class="built_in">JSON</span>.parse(keys.replace(<span class="regexp">/\w+/g</span>, <span class="string">'"$&amp;"'</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> iterate = <span class="function">(<span class="params">values, keys</span>) =&gt;</span></span><br><span class="line">      keys.forEach(<span class="function">(<span class="params">key, i</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(key)) iterate(values[i], key);</span><br><span class="line">        <span class="keyword">else</span> obj[key] = values[i];</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">    iterate(values, keys);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(e.message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.dir(destructuringArray(targetArray, formater));</span><br><span class="line"><span class="built_in">console</span>.dir(destructuringArray(targetArray, formaterArray));</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 面试锦囊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何判断一个整数是否在40亿个整数中？</title>
      <link href="/2018/09/10/%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E6%95%B4%E6%95%B0%E6%98%AF%E5%90%A6%E5%9C%A840%E4%BA%BF%E4%B8%AA%E6%95%B4%E6%95%B0%E4%B8%AD%EF%BC%9F/"/>
      <url>/2018/09/10/%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E6%95%B4%E6%95%B0%E6%98%AF%E5%90%A6%E5%9C%A840%E4%BA%BF%E4%B8%AA%E6%95%B4%E6%95%B0%E4%B8%AD%EF%BC%9F/</url>
      <content type="html"><![CDATA[<p>题目：我有 40 亿个整数，再给一个新的整数，我需要判断新的整数是否在 40 亿个整数中，你会怎么做（每个整数是32位的）？</p><p>一个数在不在就是两个状态，在或者不在，就可以用1个位来代表。<br>每个整数是32位的，那么所有的整数也就2^32个，大概42亿个数左右。<br>可以申请2^32的位，把每一个整数都覆盖了，40亿个数的位分别为1，剩下的位为0。<br>新的整数，就可以跟进它的大小来判断相应的位，比如1245，就去看1245位是1还是0来判断是否在这40亿个整数中。</p><p>2^32个位，就是2^29个字节，也就是500M左右。</p><p>位图法（bitmap）</p><p>链接：<br><a href="https://mp.weixin.qq.com/s/XC7Wpc5ZdvcT_7h3I956RQ" target="_blank" rel="noopener">漫画：如何判断一个数是否在 40 亿个整数中</a></p>]]></content>
      
      <categories>
          
          <category> 面试锦囊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于xss和csrf</title>
      <link href="/2018/09/06/%E5%85%B3%E4%BA%8Exss%E5%92%8Ccsrf/"/>
      <url>/2018/09/06/%E5%85%B3%E4%BA%8Exss%E5%92%8Ccsrf/</url>
      <content type="html"><![CDATA[<h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><p>xss 是跨网站指令码，是代码注入的一种，它允许恶意使用者将程式码注入到网页上，其他使用者在观看网页时就会受到影响。这类攻击通常包含了 HTML 以及使用者端脚本语言。</p><p>攻击方式: XSS 通过修改 HTML 节点或者执行 JS 代码来攻击网站。比如通过 url 来在页面上添加 html 后者 js 文件。</p><p>防止: 最普遍的方法，是将输出的内容进行转义，比如对于引号，尖括号，斜杠进行转义等，再就是设置白名单或者黑名单等。比如只允许加载本站资源等。。</p><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><p>csrf 跨站请求伪造，是一种挟制用户在当前已登录的 Web 应用程序上执行非本意的操作的攻击方法。简单点说，CSRF 就是利用用户的登录态发起恶意请求。</p><p>防止：防范 CSRF 可以遵循以下几种规则：</p><ul><li>Get 请求不对数据进行修改</li><li>不让第三方网站访问到用户 Cookie</li><li>阻止第三方网站请求接口</li><li>请求时附带验证信息，比如验证码或者 token</li></ul>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端安全 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一些JS小技巧</title>
      <link href="/2018/08/23/%E4%B8%80%E4%BA%9BJS%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
      <url>/2018/08/23/%E4%B8%80%E4%BA%9BJS%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<p>整理一些自己遇到的 js 小技巧，希望以后能变成一个炫技派，哈哈哈～</p><p>0、对象深拷贝的小方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj));</span><br></pre></td></tr></table></figure><p>1、数组去重</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> deleteSame = <span class="function"><span class="params">array</span> =&gt;</span> [...new <span class="built_in">Set</span>(array)];</span><br></pre></td></tr></table></figure><p>去重只能基本数据类型的，String，Number，Boolean, undefined, null, Symbol。<br>如果是对象，都不会去重。</p><p>2、用<code>Object.is(a, b)</code> 代替 <code>===</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">Object</span>.is(a, b)) &#123;</span><br><span class="line">  <span class="comment">//TODO</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、用<code>+ a</code>操作符去代替<code>Number(a)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="string">'123'</span>;</span><br><span class="line"><span class="keyword">typeof</span> a; <span class="comment">// "string"</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">Number</span>(a); <span class="comment">// "number"</span></span><br><span class="line"><span class="keyword">typeof</span> +a; <span class="comment">// "number"</span></span><br></pre></td></tr></table></figure><p>4、短路操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!foo) &#123;</span><br><span class="line">  foo = bar;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo = foo || bar;</span><br></pre></td></tr></table></figure><p>5、通过!!确认 bool 值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (!!foo) &#123;</span><br><span class="line">  <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、判断变量的类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString.call(data);</span><br><span class="line"><span class="comment">// "[object String]"</span></span><br><span class="line"><span class="comment">// "[object Array]"</span></span><br><span class="line"><span class="comment">// "[object Number]"</span></span><br><span class="line"><span class="comment">// "[object Object]"</span></span><br><span class="line"><span class="comment">// "[object Function]"</span></span><br><span class="line"><span class="comment">// "[object Undefined]"</span></span><br><span class="line"><span class="comment">// "[object RegExp]"</span></span><br></pre></td></tr></table></figure><p>7、<code>str.trim()</code>来清除前后空格</p><p>8、遍历对象的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="string">'0'</span>: <span class="string">'a'</span>, <span class="string">'1'</span>: <span class="string">'b'</span>, <span class="string">'2'</span>: <span class="string">'c'</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.keys(obj).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key, obj[key]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>9、删除数组里的某个元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">const</span> target = <span class="number">3</span>;</span><br><span class="line">arr = arr.filter(<span class="function"><span class="params">v</span> =&gt;</span> !<span class="built_in">Object</span>.is(v, target));</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>react 是怎样工作的</title>
      <link href="/2018/08/23/react-%E6%98%AF%E6%80%8E%E6%A0%B7%E5%B7%A5%E4%BD%9C%E7%9A%84/"/>
      <url>/2018/08/23/react-%E6%98%AF%E6%80%8E%E6%A0%B7%E5%B7%A5%E4%BD%9C%E7%9A%84/</url>
      <content type="html"><![CDATA[<p>占坑</p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>理解虚拟DOM</title>
      <link href="/2018/08/23/%E7%90%86%E8%A7%A3%E8%99%9A%E6%8B%9FDOM/"/>
      <url>/2018/08/23/%E7%90%86%E8%A7%A3%E8%99%9A%E6%8B%9FDOM/</url>
      <content type="html"><![CDATA[<ul><li>什么是虚拟 DOM</li></ul><p>Virtual DOM 就是一个模拟 DOM 树的 Javascript 的对象。</p><ul><li>虚拟的 DOM 的核心思想</li></ul><p>对复杂的文档 DOM 结构，提供一种方便的工具，进行最小化地 DOM 操作。</p><ul><li>React 工作原理</li></ul><p>React 使用了虚拟 DOM，每次状态更新，React 比较虚拟 DOM 的差异之后，再更改变化的内容，最后统一由 React 去修改真实 DOM、完成页面的更新、渲染。</p><ul><li>Virtrual DOM 和真实 DOM 的区别</li></ul><p>真实 DOM 的的工作流程：<br>大致分 5 步：创建 DOM tree –&gt; 创建 Style Rules -&gt; 构建 Render tree -&gt; 布局 Layout –&gt; 绘制 Painting</p><p>第一步，用 HTML 分析器，分析 HTML 的各种元素，构建一颗 DOM 树。</p><p>第二步：用 CSS 分析器，分析 CSS 文件和元素上的 inline 样式，生成页面的样式表。</p><p>第三步：将上面的 DOM 树和样式表，关联起来，构建一颗 Render 树。这一过程又称为 Attachment。每个 DOM 节点都有 attach 方法，接受样式信息，返回一个 render 对象（又名 renderer）。这些 render 对象最终会被构建成一颗 Render 树。</p><p>第四步：有了 Render 树后，浏览器开始布局，会为每个 Render 树上的节点确定一个在显示屏上出现的精确坐标值。</p><p>第五步：Render 数有了，节点显示的位置坐标也有了，最后就是调用每个节点的 paint 方法，让它们显示出来。</p><p>然而操作 DOM，浏览器会从构建 DOM 树开始从头到尾执行一遍流程。然而 DOM 的批量操作不会被合并，只会第一个 DOM 操作处理完之后再重新从构建 DOM 树开始第二个操作，一直到最后一个操作结束。</p><p>Virtrual DOM 的工作流程：<br>Virtrual DOM 会对批量的操作合并到 Virtrual DOM 树上，然后根据 diff 算法，查看哪一部分发生了变化，然后将 diff 的内容保存到本地的一个 js 对象里，然后这个对象再 attach 到 DOM 树上，通知浏览器重新绘制。</p><ul><li>实现一个 Virtrual DOM</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//虚拟dom，参数分别为标签名、属性对象、子DOM列表</span></span><br><span class="line"><span class="keyword">const</span> VElement = <span class="function">(<span class="params">tagName, props, children</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//保证只能通过如下方式调用：new VElement</span></span><br><span class="line">  <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> VElement)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> VElement(tagName, props, children);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//可以通过只传递tagName和children参数</span></span><br><span class="line">  <span class="keyword">if</span> (util.isArray(props)) &#123;</span><br><span class="line">    children = props;</span><br><span class="line">    props = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//设置虚拟dom的相关属性</span></span><br><span class="line">  <span class="keyword">this</span>.tagName = tagName;</span><br><span class="line">  <span class="keyword">this</span>.props = props || &#123;&#125;;</span><br><span class="line">  <span class="keyword">this</span>.children = children || [];</span><br><span class="line">  <span class="keyword">this</span>.key = props ? props.key : <span class="keyword">void</span> <span class="number">666</span>;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  util.each(<span class="keyword">this</span>.children, (child, i) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (child <span class="keyword">instanceof</span> VElement) &#123;</span><br><span class="line">      count += child.count;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      children[i] = <span class="string">""</span> + child;</span><br><span class="line">    &#125;</span><br><span class="line">    count++;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">this</span>.count = count;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">VElement.prototype.render = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//创建标签</span></span><br><span class="line">  <span class="keyword">const</span> el = <span class="built_in">document</span>.createElement(<span class="keyword">this</span>.tagName);</span><br><span class="line">  <span class="comment">//设置标签的属性</span></span><br><span class="line">  <span class="keyword">const</span> props = <span class="keyword">this</span>.props;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> propName <span class="keyword">in</span> props) &#123;</span><br><span class="line">    <span class="keyword">const</span> propValue = props[propName];</span><br><span class="line">    util.setAttr(el, propName, propValue);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//依次创建子节点的标签</span></span><br><span class="line">  util.each(<span class="keyword">this</span>.children, child =&gt; &#123;</span><br><span class="line">    <span class="comment">//如果子节点仍然为velement，则递归的创建子节点，否则直接创建文本类型节点</span></span><br><span class="line">    <span class="keyword">const</span> childEl = child <span class="keyword">instanceof</span> VElement ? child.render() : <span class="built_in">document</span>.createTextNode(child);</span><br><span class="line">    el.appendChild(childEl);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> el;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对一个虚拟的 DOM 对象 VElement，调用其原型的 render 方法，就可以产生一颗真实的 DOM 树</p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>偷得浮生半日闲</title>
      <link href="/2018/08/19/%E5%81%B7%E5%BE%97%E6%B5%AE%E7%94%9F%E5%8D%8A%E6%97%A5%E9%97%B2/"/>
      <url>/2018/08/19/%E5%81%B7%E5%BE%97%E6%B5%AE%E7%94%9F%E5%8D%8A%E6%97%A5%E9%97%B2/</url>
      <content type="html"><![CDATA[<ul><li>没有什么事情是理所应当的，所有的结果都是之前付出努力的一种回报。</li><li>我是比较相信这样的努力和付出的论点的。毕竟付出努力，肯定会有回报，不一定会是在你期望的方面，但是他也会有结果，也许是另一个方面的回报。</li><li>这只是我的一段碎碎念。</li></ul><p>工作的第 8 个月零 1 天，感觉我需要更多方面的进步了。感觉到了很大的压力，最近整个人都比较的佛系，靠着工作，拿着薪水，奋斗的动力感觉少了很多。当工作忙的时候，就没时间写博客了，时间都浪费在了铺页面，联调，提测，改 bug 的过程中。我觉得我需要有一些规划，让自己能在工作期间，也能学习到一些东西。</p><p>前几天，还被说每天三个小时的通勤时间，竟然还不搬家。平时都不觉得，路上的时间总觉得都过的很快，但是有一天，突然想了一下，就是觉得，每天三个小时通勤时间确实好长啊，每天好累啊 balaba，但是又一想，唉，每天这 3 个小时都被我浪费掉了。有时候在书签里存了好多想看的书啊，想看的网页啊，教程啊，到了地铁上，就没了兴趣，游戏真好玩，虎扑真好玩，知乎真好玩，歌真好听等等等等。</p><p><blockquote> 我觉得一个人的自制力或者自控力，是不会随着长大逐渐提高的，除非有什么事情逼迫着你。</blockquote></p><div></div><p>这就是一种个人的体验，也算是一种总结吧。<br>觉得自己会写好多东西出来。其实我也写不动了。<br>但是我想我可以没事给自己打一点鸡血，让自己兴奋一些。</p><p>加油吧，少年（也许已经不是少年了）。</p><p>想想 2018 年来的时候，我还在票圈里说，我出生的时候就比别的孩子长得老，2017 过去了，我很想念它。<br>希望不要在 2019 年来的时候，继续怀念 2018.</p>]]></content>
      
      <categories>
          
          <category> 浮生小记 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>axios jquery.ajax fetch 区别</title>
      <link href="/2018/08/03/axios-jquery-ajax-fetch-%E5%8C%BA%E5%88%AB/"/>
      <url>/2018/08/03/axios-jquery-ajax-fetch-%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<p>最近项目在用 axios，好像出现好久了，才开始学习。</p><p>这三个都是发起 http 请求的东西,都算是对原生 XHR 的封装。从 XHR -&gt; Jquery ajax() -&gt; fetch -&gt; axios<br>现在来分别看一下这三个东西</p><ul><li>Jquery ajax<br>它是对原生 XHR 的封装，支持 JsonP，是 MVC 编程的一种请求方式，已经逐渐的不适应前端的 MVVM 框架的潮流了。<br>而且，在项目中使用的时候，要使用 ajax，就得把 jquery 都引进来，很冗余。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  type: <span class="string">"POST"</span>,</span><br><span class="line">  url: url,</span><br><span class="line">  data: data,</span><br><span class="line">  dataType: dataType,</span><br><span class="line">  success: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  error: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>fetch</li></ul><p>fetch 是一个出现比较久的，但是依旧有好多不兼容的 ajax 的替代品。<br>采用了 es 的 promise。<br>fetch 不会默认的传 cookies，需要添加配置项<code>credentials: &#39;include&#39;</code><br>fetch 只会对网络请求错误报错，400，500 等问题会进入 then，而不会进入 catch。<br>fetch 不支持超时的问题。<br>fetch 不能监听请求的进度，而 XHR 可以。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> response = <span class="keyword">await</span> fetch(url);</span><br><span class="line">  <span class="keyword">let</span> data = response.json();</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Oops, error"</span>, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>axios 是一个很高档的东西。它不仅支持浏览器的数据请求，还支持 node 创建 http 请求。<br>它和 fetch 一样，也是基于 Promise 的 API，能够从客户端支持防止 CSRF，提供了很多接口，可以并发等。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">  method: <span class="string">"GET"</span>,</span><br><span class="line">  url: url</span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>react-router 4.0使用笔记</title>
      <link href="/2018/07/23/react-router-4-0%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/07/23/react-router-4-0%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>最近项目里的 react-router 从 3.0 更新到了 4.0，重新学习了一下 react-router 的东西，感觉从 3 到 4，变化还是很多的。通过<a href="http://reacttraining.cn/" target="_blank" rel="noopener">react-router 4.0 中文文档</a>和一些其他的教程，大概学会了如何使用。记下来防止以后忘记了。。</p><p>v3 的时候，是把所有的路由都写在一个地方，通常就是组件和路由分开。<br>到了 v4，路由就变成了一个和 UI 组件并列的组件，在你需要的地方把路由组件写在合适的地方。不在需要用<route>组件的嵌套来实现路由嵌套。</route></p><h2 id="exact"><a href="#exact" class="headerlink" title="exact"></a>exact</h2><p>exact 关键字，可以让路由只匹配一个 path，path 为’/‘的路由将不会匹配’/xxx’的</p><h2 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h2><p>可以使用 Switch 组件，来启用排他性的路由。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Switch&gt;</span><br><span class="line">  &lt;Route path=<span class="string">"/"</span> exact component=&#123;Home&#125; /&gt;</span><br><span class="line">  &lt;Route path=<span class="string">"/about"</span> component=&#123;About&#125; /&gt;</span><br><span class="line">  &lt;Route path=<span class="string">"/user"</span> component=&#123;User&#125; /&gt;</span><br><span class="line">&lt;<span class="regexp">/Switch&gt;</span></span><br></pre></td></tr></table></figure><h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><p>如果需要嵌套路由，在 app 组件中可以把嵌套路由的父组件<route path="/xx" component="{xxx}"> /&gt;，在 xxx 组件中，在根据父组件来匹配路由。</route></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XXX</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; history, match &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Layout&gt;</span><br><span class="line">        &lt;Layout.Content style=&#123;&#123; <span class="attr">padding</span>: <span class="string">"0 50px"</span> &#125;&#125;&gt;</span><br><span class="line">          &lt;div style=&#123;&#123; <span class="attr">background</span>: <span class="string">"#fff"</span>, <span class="attr">padding</span>: <span class="number">24</span> &#125;&#125;&gt;</span><br><span class="line">            &lt;Divider /&gt;</span><br><span class="line">            &lt;Route</span><br><span class="line">              exact</span><br><span class="line">              path=&#123;<span class="string">`<span class="subst">$&#123;match.path&#125;</span>/loan-info`</span>&#125;</span><br><span class="line">              component=&#123;LoanInfo&#125;</span><br><span class="line">            /&gt;</span><br><span class="line">            &lt;Route exact path=&#123;<span class="string">`<span class="subst">$&#123;match.path&#125;</span>/img-info`</span>&#125; component=&#123;ImgInfo&#125; /&gt;</span><br><span class="line">            &lt;Route exact path=&#123;<span class="string">`<span class="subst">$&#123;match.path&#125;</span>`</span>&#125; component=&#123;LoanInfo&#125; /&gt;</span><br><span class="line">          &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Layout.Content&gt;</span><br><span class="line">      &lt;<span class="regexp">/Layout&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="withRouter"><a href="#withRouter" class="headerlink" title="withRouter"></a>withRouter</h2><p>想通过代码跳转子路由，可以用 withRouter,包装 react 组件,让它获得 history 属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; withRouter &#125; <span class="keyword">from</span> <span class="string">"react-router"</span>;</span><br><span class="line">withRouter(MyComponent);</span><br></pre></td></tr></table></figure><p>然后用<code>this.props.history</code>来跳转。</p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react-router </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>BOM 学习</title>
      <link href="/2018/07/10/BOM-%E5%AD%A6%E4%B9%A0/"/>
      <url>/2018/07/10/BOM-%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>这是js高程的第8章，这是我第一次系统的学习bom，以前都是随便用，也没有成体系的东西，这次要好好学习一下。<br>主要内容：<br> 理解 window 对象——BOM 的核心<br> 控制窗口、框架和弹出窗口<br> 利用 location 对象中的页面信息<br> 使用 navigator 对象了解浏览器</p><h2 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h2><p>BOM的核心对象是window，它表示浏览器的一个实例。在浏览器中，window对象有双重角色，它既是通过JavaScript访问浏览器窗口的一个接口，又是ECMAScript规定的Global对象</p><p>1、1全局作用域<br>由于 window 对象同时扮演着 ECMAScript 中 Global 对象的角色，因此所有在全局作用域中声明的变量、函数都会变成 window 对象的属性和方法</p>]]></content>
      
      <categories>
          
          <category> JS高程填坑笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>科学上网小记</title>
      <link href="/2018/07/10/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E5%B0%8F%E8%AE%B0/"/>
      <url>/2018/07/10/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E5%B0%8F%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>整理一下前一段时间研究科学上网的方法。<br><b style="font-size: 20px;"><i>科学上网需要购买国外的服务器, 会有一定的花费, 请自行判断<i></i></i></b></p><h2 id="购买服务器"><a href="#购买服务器" class="headerlink" title="购买服务器"></a>购买服务器</h2><p>科学上网是通过 VPS，搭建 ss 或者 ssr 服务器（梯子）来实现的。<br>vps 服务器需要选择国外的（毕竟要翻墙）。一般都会在搬瓦工或者 vultr 购买服务器。<br>我是看了同事在 vultr 买的，我也就在这里买的,感觉还不错，能够随时改变和删除服务器。<br>网站：<code>https://www.vultr.com/</code></p><p>1、注册账号<br><img src="https://github.com/kaisa911/studyNotes/blob/master/public/image/zhucezhanghao.png?raw=true" alt="注册账号"><br>2、充值<br>因为可以用支付宝，我就选择了支付宝支付。<br><img src="https://github.com/kaisa911/studyNotes/blob/master/public/image/chongzhi.png?raw=true" alt="充值"><br>3、购买服务器<br>vultr 官方最近进行了调整，2.5 美元套餐只提供 ipv6，可以用来上 BT，教育网等，但是不能实用 ipv4 的流量，如果你有 ipv4 需求，那么你至少要买 5 美元的套餐。<br>3.1 选择地区<br><img src="https://github.com/kaisa911/studyNotes/blob/master/public/image/fuwuqi01.png?raw=true" alt="选择地区"><br>3.2 选择服务器种类<br>我选的 ubuntu 16.04 x64 版本的，当然也可以选其他的种类，<br><img src="https://github.com/kaisa911/studyNotes/blob/master/public/image/fuwuqi02.png?raw=true" alt="选择服务器种类"><br>3.3 选择服务器大小<br>我当时选的$2.5/mo 的，现在貌似得选$5/mo 的了。。<br><img src="https://github.com/kaisa911/studyNotes/blob/master/public/image/fuwuqi03.png?raw=true" alt="选择服务器大小"><br>然后就可以买了。会得到一个服务器。。<br>服务器列表<br><img src="https://github.com/kaisa911/studyNotes/blob/master/public/image/fuwuqi04.png?raw=true" alt="服务器列表"><br>服务器详情<br><img src="https://github.com/kaisa911/studyNotes/blob/master/public/image/fuwuqi05.png?raw=true" alt="服务器详情"><br>开启 ipv6<br><img src="https://github.com/kaisa911/studyNotes/blob/master/public/image/fuwuqi06.png?raw=true" alt="开启ipv6"></p><p>到这里，购买服务器就一步就可以了。</p><h2 id="搭建-ss-服务"><a href="#搭建-ss-服务" class="headerlink" title="搭建 ss 服务"></a>搭建 ss 服务</h2><p>1、首先需要连接到服务器，可以先 ping 一下 ip 地址看看，能 ping 通应该就可以用，没有 ping 通，就把刚才的服务器换一个。mac 可以用终端直接连接，windows 可以用 git bash，Xshell，Putty 等也都可以<br>连接到远程服务器的方法是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@ip</span><br></pre></td></tr></table></figure><p>ip 就是你新买服务器的 ip，然后会提示让你输入密码，可以把密码复制进去就可以登陆了.<br><img src="https://github.com/kaisa911/studyNotes/blob/master/public/image/lianjie01.png?raw=true" alt="连接服务器"></p><p>2、搭建 ss 服务器<br>我是使用的 ubuntu 的服务器，其他服务器可以 google 其他教程。<br>在刚刚连接的命令行里</p><ul><li><p>安装pip前需要前置安装setuptools</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate  https://pypi.python.org/packages/source/s/setuptools/setuptools-19.6.tar.gz#md5=c607dd118eae682c44ed146367a17e26</span><br><span class="line"></span><br><span class="line">tar -zxvf setuptools-19.6.tar.gz</span><br><span class="line"></span><br><span class="line">cd setuptools-19.6</span><br><span class="line"></span><br><span class="line">python3 setup.py build</span><br><span class="line"></span><br><span class="line">python3 setup.py install</span><br></pre></td></tr></table></figure></li><li><p>安装 pip<br>首先安装 pip3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python3-pip</span><br></pre></td></tr></table></figure></li><li><p>安装 Shadowsocks<br>安装最新版的 Shadowsocks：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install https://github.com/shadowsocks/shadowsocks/archive/master.zip</span><br></pre></td></tr></table></figure><p>查看 Shadowsocks 的版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ssserver --version</span><br></pre></td></tr></table></figure></li><li><p>创建配置文件<br>创建 Shadowsocks 配置文件所在文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /etc/shadowsocks</span><br></pre></td></tr></table></figure><p>创建配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/shadowsocks/config.json</span><br></pre></td></tr></table></figure><p>复制粘贴如下内容（注意修改密码“password”,服务器端口号也可以自行修改）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;server&quot;:&quot;::&quot;,</span><br><span class="line">  &quot;server_port&quot;:8388,</span><br><span class="line">  &quot;local_address&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">  &quot;local_port&quot;:1080,</span><br><span class="line">  &quot;password&quot;:&quot;mypassword&quot;,</span><br><span class="line">  &quot;timeout&quot;:300,</span><br><span class="line">  &quot;method&quot;:&quot;aes-256-cfb&quot;,</span><br><span class="line">  &quot;fast_open&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后按 Ctrl + O 保存文件，Ctrl + X 退出。</p></li><li><p>测试 Shadowsocks 配置<br>测试下 Shadowsocks 能不能正常工作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks/config.json</span><br></pre></td></tr></table></figure><p>测试完毕，按 Ctrl + C 关闭 Shadowsocks。</p></li><li><p>配置 Systemd 管理 Shadowsocks<br>新建 Shadowsocks 管理文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/systemd/system/shadowsocks-server.service</span><br></pre></td></tr></table></figure><p>复制粘贴：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Shadowsocks Server</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/local/bin/ssserver -c /etc/shadowsocks/config.json</span><br><span class="line">Restart=on-abort</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>Ctrl + O 保存文件，Ctrl + X 退出<br>启动 Shadowsocks：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start shadowsocks-server</span><br></pre></td></tr></table></figure><p>设置开机启动 Shadowsocks：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable shadowsocks-server</span><br></pre></td></tr></table></figure></li><li><p>优化（主要就是开启 BBR）<br>BBR 系 Google 最新开发的 TCP 拥塞控制算法，目前有着较好的带宽提升效果。</p><p>升级 Linux 内核<br>  BBR 在 Linux kernel 4.9 引入。首先检查服务器 kernel 版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure><p>如果其显示版本在 4.9.0 之下，则需要升级 Linux 内核，否则请忽略下文。</p><p>更新包管理器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>查看可用的 Linux 内核版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-cache showpkg linux-image</span><br></pre></td></tr></table></figure><p>找到一个你想要升级的 Linux 内核版本，如“linux-image-4.10.0-22-generic”：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install linux-image-4.10.0-22-generic</span><br></pre></td></tr></table></figure><p>等待安装完成后重启服务器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><p>删除老的 Linux 内核：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo purge-old-kernels</span><br></pre></td></tr></table></figure><p>开启 BBR<br>  运行 <code>lsmod | grep bbr</code>，如果结果中没有 <code>tcp_bbr</code>，则先运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">modprobe tcp_bbr</span><br><span class="line">echo &quot;tcp_bbr&quot; &gt;&gt; /etc/modules-load.d/modules.conf</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;net.core.default_qdisc=fq&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">echo &quot;net.ipv4.tcp_congestion_control=bbr&quot; &gt;&gt; /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><p>保存生效。运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sysctl net.ipv4.tcp_available_congestion_control</span><br><span class="line">sysctl net.ipv4.tcp_congestion_control</span><br></pre></td></tr></table></figure><p>若均有 bbr，则开启 BBR 成功。<br>至此，Shadowsock服务器端的基本配置已经全部完成了！</p></li></ul><h2 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h2><p>需要下载shadowsocks客户端<br>mac下载地址：<code>https://github.com/shadowsocks/ShadowsocksX-NG/releases</code><br>windows下载地址：<code>https://github.com/shadowsocks/shadowsocks-windows/releases</code></p><p>在Shadowsocks客户端添加服务器，如果你使用的是我提供的那个配置文件的话，地址填写你的IPv4地址或IPv6地址，端口号为8388，加密方法为aes-256-cfb，密码为你设置的密码。然后设置客户端使用全局模式，浏览器登录Google试试应该能直接打开了。<br>mac下的配置：<br><img src="https://github.com/kaisa911/studyNotes/blob/master/public/image/kehuduan01.png?raw=true" alt="mac下的配置"><br>windows下的配置<br><img src="https://github.com/kaisa911/studyNotes/blob/master/public/image/kehuduan02.png?raw=true" alt="win下的配置"></p><p>在mac下可能需要在偏好设置里设置一下socket5和http代理<br><img src="https://github.com/kaisa911/studyNotes/blob/master/public/image/macpeizhi01.png?raw=true" alt="win下的配置"><br><img src="https://github.com/kaisa911/studyNotes/blob/master/public/image/macpeizhi02.png?raw=true" alt="win下的配置"></p><p>在mac下需要全局模式才能科学上网。可以直接上bt。<br>在window下，代理模式可以科学上网，但是全局模式，外加需要设置一下ut才可以上bt<br>设置utorrent<br>打开设置 -&gt; 连接<br>代理服务选择Http，代理127.0.0.1，端口1080，勾选通过代理服务器解析主机名 和 对于点对点连接使用代理服务器<br>然后点应用，就可以上网了。<br><img src="https://github.com/kaisa911/studyNotes/blob/master/public/image/bt01.png?raw=true" alt="mac上bt"></p>]]></content>
      
      <categories>
          
          <category> Demo练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科学上网 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>函数表达式</title>
      <link href="/2018/07/09/%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2018/07/09/%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>JS 高程第 7 章，主要讲函数的表达式。主要内容有下面几个：</p><ul><li>函数表达式的特征</li><li>递归</li><li>闭包等问题</li></ul><p>一、函数表达的式的特征：<br>1、函数声明提升<br>具名函数会有函数生命提升，匿名函数，函数表达式，箭头函数声明不能被提升</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数声明提升</span></span><br><span class="line">sayHi();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hi'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayHi();</span><br><span class="line"><span class="keyword">const</span> sayHi = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hi'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//Uncaught ReferenceError: sayHi is not defined</span></span><br><span class="line"></span><br><span class="line">sayHi();</span><br><span class="line"><span class="keyword">const</span> sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hi'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//Uncaught ReferenceError: sayHi is not defined</span></span><br><span class="line"></span><br><span class="line">sayHi()(<span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hi'</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>二、递归<br>递归函数就是一个函数通过名字调用自身的情况下构成的</p><p>三、闭包<br>闭包是指有权访问另一个函数作用域中变量的函数。常见的闭包创建方式，是在函数内创建另一个函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">plusFive</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + <span class="number">5</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>四、模拟块级作用域<br>ES5 中，可以用匿名函数来模拟块级作用域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//这里是块级作用域</span></span><br><span class="line">&#125;)();</span><br><span class="line"><span class="keyword">var</span> someFunction = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//这里是块级作用域</span></span><br><span class="line">&#125;;</span><br><span class="line">someFunction();</span><br></pre></td></tr></table></figure><p>五、私有变量<br>严格来讲，JS没有私有成员的概念，所有的属性都是公有的，不过，倒是有一个私有变量的概念<br>任何在函数中定义的变量，都可以认为是私有变量，因为不能在函数的外部访问这些变量。 私有变量包括函数的参数、局部变量和在函数内部定义的其他函数。</p>]]></content>
      
      <categories>
          
          <category> JS高程填坑笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>圣杯布局，双飞翼布局</title>
      <link href="/2018/07/03/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%EF%BC%8C%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/"/>
      <url>/2018/07/03/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%EF%BC%8C%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/</url>
      <content type="html"><![CDATA[<p>等待填坑</p>]]></content>
      
      <categories>
          
          <category> 面试锦囊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>变量、作用域和内存问题</title>
      <link href="/2018/06/28/%E5%8F%98%E9%87%8F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98/"/>
      <url>/2018/06/28/%E5%8F%98%E9%87%8F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>这是JS高程的第四章，讲的是变量，作用域，以及JS的内存问题。<br>现在来填坑<br>本节包括三个部分</p><ul><li>基本类型和引用类型</li><li>执行环境</li><li>垃圾收集</li></ul><h2 id="基本类型和引用类型"><a href="#基本类型和引用类型" class="headerlink" title="基本类型和引用类型"></a>基本类型和引用类型</h2><ul><li>基本类型值：简单的数据段，Undefined，Null，number，string，boolean五种基本类型，在操作的时候，可以操作保存在变量中实际的值。</li><li>引用类型的值是保存在内存中的对象。Js不允许直接访问内存的位置，也就是不允许直接操作对象的内存空间，在操作对象时，复制对象时，操作的时对象的引用，在为对象添加属性时，操作的是对象</li><li>传递参数<br>ES中所有的参数都是按值传递的。基本类型传的值就是变量的值，引用类型传的值是引用内存的地址。</li></ul><h2 id="执行环境与作用域"><a href="#执行环境与作用域" class="headerlink" title="执行环境与作用域"></a>执行环境与作用域</h2><p>全局执行环境，是最外围的一个执行环境。<br>每一个函数都会有自己的执行环境。当执行流进入一个函数时，函数的环境就会被推入一个环境栈中，而在环境执行结束后，栈将其环境弹出，把控制权返回之前的执行环境。<br>当代码在一个环境中执行时，会产生一个作用域链。作用域链的用途，是保证对执行环境有权访问的所有变量和函数的有序访问</p><p>可以通过try-catch 和 with语句来延长作用域链</p><h2 id="垃圾收集"><a href="#垃圾收集" class="headerlink" title="垃圾收集"></a>垃圾收集</h2><p>垃圾收集一般有两个策略：<br>标记清楚，进入环境和弹出环境分别有标记，清除弹出环境标记的变量或者函数。<br>引用计数，引用为0的会被清除</p>]]></content>
      
      <categories>
          
          <category> JS高程填坑笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>对象深拷贝方法</title>
      <link href="/2018/06/25/%E5%AF%B9%E8%B1%A1%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%96%B9%E6%B3%95/"/>
      <url>/2018/06/25/%E5%AF%B9%E8%B1%A1%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>分享大佬写的深拷贝的方法。。<br>1、JSON.parse(JSON.stringify(obj))<br>这个小方法可以把 obj 里的除了 RegExp 和 function 的属性拷贝下来。function 就忽略了，RegExp 转成{}</p><p>2、大佬们写的两个方法。。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> deepClone = <span class="function"><span class="params">obj</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> innerIterator = <span class="function">(<span class="params">v, key, nb</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (v <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> result = v.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (item <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(item);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">          <span class="keyword">typeof</span> item === <span class="string">'function'</span> ||</span><br><span class="line">          item === <span class="literal">null</span> ||</span><br><span class="line">          <span class="keyword">typeof</span> item !== <span class="string">'object'</span></span><br><span class="line">        ) &#123;</span><br><span class="line">          <span class="keyword">return</span> item;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> innerIterator(item);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> reduceKeys(item)();</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span> key &amp;&amp; nb ? &#123; ...nb, [key]: result &#125; : result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> newObj = reduceKeys(v)();</span><br><span class="line">    <span class="keyword">return</span> &#123; ...nb, [key]: newObj &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> reduceKeys = <span class="function"><span class="params">value</span> =&gt;</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> ks = <span class="built_in">Object</span>.keys(value);</span><br><span class="line">    <span class="keyword">return</span> ks.reduce(<span class="function">(<span class="params">pre, current</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> v = value[current];</span><br><span class="line">      <span class="keyword">if</span> (v <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; ...pre, [current]: <span class="keyword">new</span> <span class="built_in">RegExp</span>(v) &#125;;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">        v === <span class="literal">null</span> ||</span><br><span class="line">        <span class="keyword">typeof</span> v === <span class="string">'function'</span> ||</span><br><span class="line">        <span class="keyword">typeof</span> v !== <span class="string">'object'</span></span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; ...pre, [current]: v &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> innerIterator(v, current, pre);</span><br><span class="line">    &#125;, &#123;&#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> reduceKeys(obj)();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> deepClone = <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> notIn = [<span class="string">'[object Function]'</span>, <span class="string">'[object Object]'</span>, <span class="string">'[object Array]'</span>];</span><br><span class="line">  <span class="keyword">const</span> getType = <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(data);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> isObject = <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getType(data) === <span class="string">'[object Object]'</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> isArray = <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getType(data) === <span class="string">'[object Array]'</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> isFunction = <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getType(data) === <span class="string">'[object Function]'</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> result;</span><br><span class="line">  <span class="keyword">if</span> (isObject(data)) &#123;</span><br><span class="line">    result = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> data) &#123;</span><br><span class="line">      <span class="keyword">if</span> (notIn.includes(getType(data[p]))) &#123;</span><br><span class="line">        result[p] = deepClone(data[p]);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result[p] = data[p];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isArray(data)) &#123;</span><br><span class="line">    result = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">of</span> data) &#123;</span><br><span class="line">      <span class="keyword">if</span> (notIn.includes(getType(i))) &#123;</span><br><span class="line">        result.push(deepClone(i));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result.push(i);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isFunction(data)) &#123;</span><br><span class="line">    result = data;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Demo练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>项目action封装</title>
      <link href="/2018/06/25/%E9%A1%B9%E7%9B%AEaction%E5%B0%81%E8%A3%85/"/>
      <url>/2018/06/25/%E9%A1%B9%E7%9B%AEaction%E5%B0%81%E8%A3%85/</url>
      <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> callApi <span class="keyword">from</span> <span class="string">'../../utils/callApi'</span>;</span><br><span class="line"><span class="keyword">import</span> api <span class="keyword">from</span> <span class="string">'../../api'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * callApi</span></span><br><span class="line"><span class="comment"> * @param dispatch</span></span><br><span class="line"><span class="comment"> * @param formData </span></span><br><span class="line"><span class="comment"> * @param requestUrl</span></span><br><span class="line"><span class="comment"> * @param type  设置action的type</span></span><br><span class="line"><span class="comment"> * @returns &#123;function(*)&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> commonCallApi = <span class="function">(<span class="params">dispatch, formData, requestUrl, type</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> callApi.post(requestUrl, formData).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.code === <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> data = type</span><br><span class="line">        ? dispatch(&#123;</span><br><span class="line">            type,</span><br><span class="line">            data: res.data</span><br><span class="line">          &#125;)</span><br><span class="line">        : res;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(res);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 公共action</span></span><br><span class="line"><span class="comment"> * @param requestUrl</span></span><br><span class="line"><span class="comment"> * @param formData</span></span><br><span class="line"><span class="comment"> * @param type  设置action的type</span></span><br><span class="line"><span class="comment"> * @returns &#123;function(*)&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> commonAction = <span class="function">(<span class="params">requestUrl, formData, type</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">dispatch</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> commonCallApi(dispatch, requestUrl, formData, type);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取列表</span></span><br><span class="line"><span class="comment"> * @param formData</span></span><br><span class="line"><span class="comment"> * @returns &#123;function(*)&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> getList = <span class="function"><span class="params">formData</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> commonAction(api.getList, formData, <span class="string">'get_list'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  getList</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Demo练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript redux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>对象字面量声明和构造函数声明的比较</title>
      <link href="/2018/06/20/%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F%E5%A3%B0%E6%98%8E%E5%92%8C%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E%E7%9A%84%E6%AF%94%E8%BE%83/"/>
      <url>/2018/06/20/%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F%E5%A3%B0%E6%98%8E%E5%92%8C%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E%E7%9A%84%E6%AF%94%E8%BE%83/</url>
      <content type="html"><![CDATA[<p>去某家面试的时候，在笔试的时候，看到了这个问题，回来研究一下。<br>JS 中有很多种对象的声明方式，一般我用到的也就是这两种，通过字面量来声明对象和通过构造函数来声明对象。</p><h2 id="用字面量来声明对象"><a href="#用字面量来声明对象" class="headerlink" title="用字面量来声明对象"></a>用字面量来声明对象</h2><p>我们可以直接在创建对象的时候添加功能</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  name: <span class="string">'paji'</span>,</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  sex: <span class="string">'male'</span>,</span><br><span class="line">  speak: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'大家好'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>或者在一开始先声明一个空的对象，当然这个空对象也不是空对象，也是从 object 上继承了好多 object 的属性，只是没有自有属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;&#125;,</span><br><span class="line">person.name = <span class="string">'paji'</span>;</span><br><span class="line">person.age = <span class="number">18</span>;</span><br><span class="line">person.sex = <span class="string">'male'</span>;</span><br><span class="line">person.speak = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'大家好'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用构造函数声明对象"><a href="#用构造函数声明对象" class="headerlink" title="用构造函数声明对象"></a>用构造函数声明对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">person.name = <span class="string">'paji'</span>;</span><br><span class="line">person.age = <span class="number">18</span>;</span><br><span class="line">person.sex = <span class="string">'male'</span>;</span><br><span class="line">person.speak = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'大家好'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="字面量的优势"><a href="#字面量的优势" class="headerlink" title="字面量的优势"></a>字面量的优势</h2><ul><li>代码量更少，更易读</li><li>强调对象就是一个简单的可变的散列表，而不必一定派生自某个类</li><li>对象字面量运行速度更快，因为它们可以在解析的时候被优化：它们不需要”作用域解析(scope resolution)”；因为存在我们创建了一个同名的构造函数Object()的可能，当我们调用Object()的时候，解析器需要顺着作用域链从当前作用域开始查找，如果在当前作用域找到了名为Object()的函数就执行，如果没找到，就继续顺着作用域链往上照，直到找到全局Object()构造函数为止</li><li>Object()构造函数可以接收参数，通过这个参数可以把对象实例的创建过程委托给另一个内置构造函数，并返回另外一个对象实例，而这往往不是你想要的。</li></ul><p><b><i>尽量用对象字面量的方式来创建对象</i></b></p>]]></content>
      
      <categories>
          
          <category> 面试锦囊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS包装对象</title>
      <link href="/2018/06/19/JS%E5%8C%85%E8%A3%85%E5%AF%B9%E8%B1%A1/"/>
      <url>/2018/06/19/JS%E5%8C%85%E8%A3%85%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<p>Q1: 什么是包装对象？<br>A1: JS 的数值，布尔，字符串类型的变量，在一定条件下，也可以自动变成对象，这就是原始类型的包装对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'hello world'</span>);</span><br></pre></td></tr></table></figure><p>Q2: 包装对象和同样的原始类型的值相等么，这么做有什么目的？<br>A2: 不想等。包装对象的最大目的，首先是使得 JavaScript 的对象涵盖所有的值，其次使得原始类型的值可以方便地调用某些方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> a; <span class="comment">//'object'</span></span><br><span class="line"><span class="keyword">typeof</span> b; <span class="comment">//'object'</span></span><br><span class="line"><span class="keyword">typeof</span> c; <span class="comment">//'object'</span></span><br><span class="line"></span><br><span class="line">a === <span class="number">-1</span>; <span class="comment">//false</span></span><br><span class="line">b === <span class="literal">true</span>; <span class="comment">//false;</span></span><br><span class="line">c === <span class="string">'hello world'</span>; <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>Q3: 包装对象有什么实例方法？<br>A3: 包装对象可以使用 object 对象提供的原生的方法，其中主要的就是 valueOf()和 toString()方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a.valueOf(); <span class="comment">//-1</span></span><br><span class="line">b.valueOf(); <span class="comment">//true</span></span><br><span class="line">b.valueOf(); <span class="comment">//'hello world'</span></span><br><span class="line"></span><br><span class="line">a.toString(); <span class="comment">//'-1'</span></span><br><span class="line">b.toString(); <span class="comment">//'true'</span></span><br><span class="line">b.toString(); <span class="comment">//'hello world'</span></span><br></pre></td></tr></table></figure><p>Q4: 原始类型和实例对象怎么转换？<br>A4: 原始类型的值，可以自动当作包装对象调用，即调用各种包装对象的属性和方法。这时，JavaScript 引擎会自动将原始类型的值转为包装对象实例，在使用后立刻销毁实例。<br>自动转换生成的包装对象是只读的，无法修改。所以，字符串无法添加新属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">'Hello World'</span>;</span><br><span class="line">s.x = <span class="number">123</span>;</span><br><span class="line">s.x; <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>另一方面，调用结束后，包装对象实例会自动销毁。这意味着，下一次调用字符串的属性时，实际是调用一个新生成的对象，而不是上一次调用时生成的那个对象，所以取不到赋值在上一个对象的属性。</p>]]></content>
      
      <categories>
          
          <category> 面试锦囊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Javascript基本概念（四）</title>
      <link href="/2018/06/19/Javascript%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2018/06/19/Javascript%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>这是 JS 高程第三章的第四部分。<br>本节的主要内容是</p><ul><li>语句</li><li>函数</li></ul><h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><h3 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h3><p><code>if (condition) statement1 else statement2</code><br>eg:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">25</span>) &#123;</span><br><span class="line">  alert(<span class="string">'Greater than 25.'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (i &lt; <span class="number">0</span>) &#123;</span><br><span class="line">  alert(<span class="string">'Less than 0.'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  alert(<span class="string">'Between 0 and 25, inclusive.'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="do-while-语句"><a href="#do-while-语句" class="headerlink" title="do-while 语句"></a>do-while 语句</h3><p>后测试循环语句</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  statement;</span><br><span class="line">&#125; <span class="keyword">while</span> (expression);</span><br></pre></td></tr></table></figure><h3 id="while-语句"><a href="#while-语句" class="headerlink" title="while 语句"></a>while 语句</h3><p>前测试循环语句<br><code>while(expression) statement</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">  i += <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for-语句"><a href="#for-语句" class="headerlink" title="for 语句"></a>for 语句</h3><p>前测试循环语句<br><code>for (initialization; expression; post-loop-expression) statement</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> count = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">  alert(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for-in-语句"><a href="#for-in-语句" class="headerlink" title="for-in 语句"></a>for-in 语句</h3><p>精准迭代语句，可以用来枚举对象属性<br><code>for (property in expression) statement</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> propName <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</span><br><span class="line">  <span class="built_in">document</span>.write(propName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="label-语句"><a href="#label-语句" class="headerlink" title="label 语句"></a>label 语句</h3><p><code>label: statement</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">start: <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">  alert(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个例子中的 start 标签，可以在将来由 break 和 continue 语句引用，加标签的语句一般都要与 for 语句等循环语句配合使用。</p><h3 id="break-和-continue-语句"><a href="#break-和-continue-语句" class="headerlink" title="break 和 continue 语句"></a>break 和 continue 语句</h3><p>break 语句会立即跳出循环，然后执行循环后的代码<br>continue 语句会跳出循环，然后从循环顶部开始执行循环。</p><h3 id="switch-语句"><a href="#switch-语句" class="headerlink" title="switch 语句"></a>switch 语句</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (expression) &#123;</span><br><span class="line">  <span class="keyword">case</span> value:</span><br><span class="line">    statement;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> value:</span><br><span class="line">    statement;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> value:</span><br><span class="line">    statement;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    statement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>ES 中采用 function 来声明一个函数，后面跟一组参数和函数体，函数会在执行完 return 语句之后停止并立即退出。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">functionName</span>(<span class="params">arg0, arg1,...,argN</span>) </span>&#123;</span><br><span class="line">    statements</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参数理解"><a href="#参数理解" class="headerlink" title="参数理解"></a>参数理解</h3><p>函数内部通过一个数组arguments来接收参数。arguments对象只是与数组很像，但是并不是Array的实例。<br>可以用arguments[0]来获取内部的元素。<br>ECMAScript 中的所有的参数传递的都是值，不可能通过引用传递参数</p><h3 id="没有重载"><a href="#没有重载" class="headerlink" title="没有重载"></a>没有重载</h3><p>ES中的函数没有重载</p>]]></content>
      
      <categories>
          
          <category> JS高程填坑笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Javascript 基本概念（三）</title>
      <link href="/2018/06/13/Javascript%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2018/06/13/Javascript%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>这是JS高程第三章的第三部分。这一章内容是真的多。。我觉得重新刷高程，对我来说，也是一种不一样的进步吧。<br>本节的主要内容是</p><ul><li>操作符</li></ul><h2 id="一元操作符"><a href="#一元操作符" class="headerlink" title="一元操作符"></a>一元操作符</h2><p>只能操作一个一个值的操作符叫做<b>一元操作符</b>。<br>1、递增递减操作符<br>  有两个版本，前置型和后置型。<br>  前置型，先操作，后执行。<br>  后置型，先执行，后操作。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">5</span>, b = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> sum = ++a + b;</span><br><span class="line"><span class="keyword">let</span> sum2 = a++ + b;</span><br><span class="line"><span class="built_in">console</span>.log(sum); <span class="comment">//12</span></span><br><span class="line"><span class="built_in">console</span>.log(sum2) <span class="comment">//12</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//7</span></span><br></pre></td></tr></table></figure></p><p>  递增递减操作符对数值，布尔，字符串，对象都有作用！！！！！<br>  规则如下：</p><ul><li>如果字符串包含有效数字，则先转化成数值变量，然后加减1；不包含有效数字，则转化成NaN。字符串变量变成数值变量</li><li>数值变量加减1；</li><li>布尔变量，true先变成1，false变成0，然后加减1,布尔变了转换成数值变量；</li><li>对象变量，先查看valueOf()方法，如果是NaN，则调用toString()，对象转换成数值变量。</li></ul><p>2、一元加减操作符。<br>  一元+操作符，会像Number()方法一样对变量转换成数值变量<code>var a; a = +a</code>;<br>  一元-操作符，主要是变成负数。会像Number()方法一样，不过是负数。</p><h2 id="位操作符"><a href="#位操作符" class="headerlink" title="位操作符"></a>位操作符</h2><p>首先ES里所有的数值都是有64位来储存，但是位操作符并不是操作64位，而是先转化成32位的整数，然后操作，再将结果转换成64位的，这样，NaN和Infinity就会变成0。<br>对于有符号数，第32位是符号位，0代表正数，1代表负数，符号位决定了其他位数值的格式。剩下31位用来储存数据。<br>正数都是以二进制格式存储，负数以二进制的补码格式存储。默认情况下，ES里所有的正数都是有符号数。<br>无符号数，第32位是数值。但是无符号数只能是正数。<br>位操作符对其他变量，会先用Number()方法变成数值，然后再按位操作。<br>1、按位非（NOT）<br>  按位非是用～表示，执行按位非的结果是返回数值的反码。<br>2、按位与（AND）<br>  按位与是用&amp;表示，它有两个操作符数，运算的时候，将两个数的二进制每一位对齐，都是1得1，其他为0；<br>3、按位或（OR）<br>  按位或是用|表示，它有两个操作符数，运算的时候，将两个数的二进制每一位对齐，都是0得0，其他为1；<br>4、按位异或（XOR）<br>  按位或是用^表示，它有两个操作符数，运算的时候，将两个数的二进制每一位对齐，相同得0，不同为1；<br>5、左移<br>  左移用&lt;&lt;表示，会将数值所有位数向左移动指定的位数。后面补0；左移不会影响符号。<br>6、有符号右移<br>  有符号右移用&gt;&gt;表示，会将数值所有位数向右移动指定的位数。前面补0；保留符号位，不会影响符号。<br>7、无符号右移<br>  无符号右移用&gt;&gt;&gt;表示，会将数值所有位数向右移动指定的位数。前面补0；会影响符号。而且会把负数的补码当成二进制码来运算。</p><h2 id="布尔运算符"><a href="#布尔运算符" class="headerlink" title="布尔运算符"></a>布尔运算符</h2><p>布尔运算符有三个，主要用来测试值的关系<br>1、逻辑非(!)<br>这个操作符会返回一个布尔值，逻辑非运算会将操作数先转换成布尔值，然后求反。</p><ul><li>操作数是对象，返回false</li><li>操作数是空字符串，返回true</li><li>操作数是非空字符串，返回false</li><li>操作数是非0数值，返回false</li><li>操作数是0，null，NaN，undefined，返回true</li></ul><p>2、逻辑与(&amp;&amp;)<br>逻辑与操作符两边有两个操作数。都是true才为true。<br>逻辑与操作可以应用于所有变量，在有一个操作数不是布尔值的情况下，逻辑与不一定会返回布尔值。<br>规则：</p><ul><li>如果第一个操作数是对象，则返回第二个操作数</li><li>如果第二个操作数是对象，则必须第一个操作数是true才会返回该对象。</li><li>如果两个数都是对象，则返回第二个操作数</li><li>如果有一个操作数是null，NaN，undefined，则返回null，NaN，undefined。</li></ul><p>逻辑与属于短路操作，第一个操作数能决定结果，就不会对第二个操作数求值。</p><p>3、逻辑或(||)<br>逻辑或两边有两个操作数，有一个为true就是true。<br>逻辑或操作可以应用于所有变量，在有一个操作数不是布尔值的情况下，逻辑与不一定会返回布尔值。<br>规则：</p><ul><li>如果第一个操作数是对象，则返回第一个操作数</li><li>如果第一个操作数是false，则返回第二个操作数</li><li>两个操作数都是对象，则返回第一个操作数</li><li>如果两个操作数是null，NaN，undefined，则返回null，NaN，undefined。</li></ul><h2 id="乘性操作符"><a href="#乘性操作符" class="headerlink" title="乘性操作符"></a>乘性操作符</h2><p>ES有三个乘性操作符，乘法，除法和求模。<br>如果乘性操作符的某一个操作数不是数值，则将会用Number()方法，先转换成数值。<br>1、乘法(*)<br>规则：</p><ul><li>乘积超过限制，则显示Infinity或者-Infinity</li><li>有一个操作数为NaN，结果为NaN</li><li>Infinity与0相乘，结果是NaN</li><li>Infinity与非0数相乘，结果是Infinity或者-Infinity</li><li>Infinity与Infinity相乘，结果是Infinity</li></ul><p>2、除法(/)<br>规则：</p><ul><li>Infinity与Infinity相除，结果是NaN</li><li>0/0结果是NaN</li><li>其他操作数／0 结果是Infinity或者-Infinity</li></ul><p>3、求模(%)<br>规则：</p><ul><li>Infinity%操作数 结果是NaN</li><li>操作数%0，结果是NaN</li><li>Infinity%Infinity，结果是NaN</li><li>操作数%Infinity，结果是操作数</li></ul><h2 id="加性操作符"><a href="#加性操作符" class="headerlink" title="加性操作符"></a>加性操作符</h2><p>ES中有两个加性操作符，加法和减法<br>1、加法(+)<br>规则：</p><ul><li>有一个操作数是NaN，结果就是NaN</li><li>Infinity + Infinity = Infinity</li><li>-Infinity + -Infinity = -Infinity</li><li>Infinity + -Infinity = NaN</li><li>+0 + +0 = +0</li><li>-0 + -0 = -0</li><li>+0 + -0 = +0</li><li>两个操作数都是字符串，则将字符串拼接起来</li><li>只有一个操作数是字符串，另一个操作数则会转换成字符串，然后拼接起来。</li></ul><p>2、减法(-)<br>规则：</p><ul><li>Infinity - Infinity = NaN</li><li>-Infinity - -Infinity = NaN</li><li>Infinity - -Infinity = Infinity</li><li>-Infinity - Infinity = -Infinity</li></ul><h2 id="关系操作符"><a href="#关系操作符" class="headerlink" title="关系操作符"></a>关系操作符</h2><p>关系操作符有大于(&gt;)，小于(&lt;),小于等于(&lt;=),大于等于(&gt;=)<br>规则：</p><ul><li>都是数值，执行数值比较</li><li>都是字符串，执行字符串编码比较</li><li>一个是数值，则另一个转换成数值比较</li></ul><h2 id="相等操作符"><a href="#相等操作符" class="headerlink" title="相等操作符"></a>相等操作符</h2><p>ES中提供了两种相等操作符：<br>相等操作符：先转换再比较<br>全等操作符：不转换只比较<br>1、相等操作符(==,!=),强制转型，然后比较。<br>规则：</p><ul><li>如果有一个是布尔类型的操作数，则先转换成数值。</li><li>如果有一个是数值，一个是字符串，则将字符串转换成数值</li><li>如果有一个是对象，则用valueOf转成基本类型比较</li><li>null 和undefined 相等</li><li>如果有一个操作数是NaN，则==返回false，!=返回true</li><li>如果都是对象，则比较两个对象是不是一个对象，是否来指向同一个对象。</li></ul><p>2、全等操作符(===,!==),不转换，只比较。<br>规则：</p><ul><li>只要是完全一样就为true，其他为false。</li></ul><p>##条件操作符<br>ES中的条件操作符(?:)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">variable ? <span class="built_in">console</span>.log(<span class="literal">true</span>): <span class="built_in">console</span>.log(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure></p><p>##赋值操作符<br>其中有+= ，-=，*=，／=，%=，&lt;&lt;=, &gt;&gt;=, &gt;&gt;&gt;=</p><p>##逗号操作符<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>, b = <span class="number">2</span>, c = <span class="number">3</span>;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> JS高程填坑笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>display的属性们</title>
      <link href="/2018/06/13/display%E7%9A%84%E5%B1%9E%E6%80%A7%E4%BB%AC/"/>
      <url>/2018/06/13/display%E7%9A%84%E5%B1%9E%E6%80%A7%E4%BB%AC/</url>
      <content type="html"><![CDATA[<p>display： none | inline | block | list-item | inline-block | table | inline-table | table-caption | table-cell | table-row | table-row-group | table-column | table-column-group | table-footer-group | table-header-group | run-in | box | inline-box | flexbox | inline-flexbox | flex | inline-flex<br>默认值：inline</p><p>none： 隐藏对象。与visibility属性的hidden值不同，其不为被隐藏的对象保留其物理空间<br>inline： 指定对象为内联元素。<br>block： 指定对象为块元素。<br>list-item： 指定对象为列表项目。<br>inline-block： 指定对象为内联块元素。（CSS2）<br>table： 指定对象作为块元素级的表格。类同于html标签&lt;table&gt;（CSS2）<br>inline-table： 指定对象作为内联元素级的表格。类同于html标签&lt;table&gt;（CSS2）<br>table-caption： 指定对象作为表格标题。类同于html标签&lt;caption&gt;（CSS2）<br>table-cell： 指定对象作为表格单元格。类同于html标签&lt;td&gt;（CSS2）<br>table-row： 指定对象作为表格行。类同于html标签&lt;tr&gt;（CSS2）<br>table-row-group： 指定对象作为表格行组。类同于html标签&lt;tbody&gt;（CSS2）<br>table-column： 指定对象作为表格列。类同于html标签&lt;col&gt;（CSS2）<br>table-column-group： 指定对象作为表格列组显示。类同于html标签&lt;colgroup&gt;（CSS2）<br>table-header-group： 指定对象作为表格标题组。类同于html标签&lt;thead&gt;（CSS2）<br>table-footer-group： 指定对象作为表格脚注组。类同于html标签&lt;tfoot&gt;（CSS2）<br>run-in： 根据上下文决定对象是内联对象还是块级对象。（CSS3）<br>box： 将对象作为弹性伸缩盒显示。（伸缩盒最老版本）（CSS3）<br>inline-box： 将对象作为内联块级弹性伸缩盒显示。（伸缩盒最老版本）（CSS3）<br>flexbox： 将对象作为弹性伸缩盒显示。（伸缩盒过渡版本）（CSS3）<br>inline-flexbox： 将对象作为内联块级弹性伸缩盒显示。（伸缩盒过渡版本）（CSS3）<br>flex： 将对象作为弹性伸缩盒显示。（伸缩盒最新版本）（CSS3）<br>inline-flex： 将对象作为内联块级弹性伸缩盒显示。（伸缩盒最新版本）（CSS3）</p>]]></content>
      
      <categories>
          
          <category> 面试锦囊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>link和@import之争</title>
      <link href="/2018/06/13/link%E5%92%8C-import%E4%B9%8B%E4%BA%89/"/>
      <url>/2018/06/13/link%E5%92%8C-import%E4%B9%8B%E4%BA%89/</url>
      <content type="html"><![CDATA[<p>看到知乎大神说，先问是不是，再问为什么</p><p>我页不知道为什么要写这句话，反正就是很奇怪的想法，就先记下来。<br>今天研究的link和@import，是外部引入外部引入 CSS 的两种方式。<br>两者是有区别的（是不是）。<br>我们来研究一下有哪些区别（为什么）</p><ul><li>link是XHTML(HTML)标签，除了加载CSS外，还可以定义RSS,rel等其他事务； @import是 CSS 提供的语法规则, 只有导入样式表的作用。</li><li>link引用CSS时，在页面载入时同时加载； @import需要页面网页完全载入以后加载。</li><li>link是XHTML(HTML)标签，无兼容问题； @import是在CSS2.1提出的，低版本的浏览器不支持(IE5+)。</li><li>link支持使用Javascript控制DOM去改变样式；而@import不支持。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"style.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  @<span class="keyword">import</span> url(style.css);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 面试锦囊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Javascript基本概念(二）</title>
      <link href="/2018/06/11/Javascript%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2018/06/11/Javascript%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>JS高程的第三章第二节，对数据类型进行一下学习</p><p>JS有五种基本数据类型：Number，String，Boolean，Undefined，Null和一种复杂类型：Object，Object本质上是由一组无序的名值对组成的（说好的万物皆对象来着）。JS不支持任何创建自定义类型的机制。</p><h2 id="typeof-操作符"><a href="#typeof-操作符" class="headerlink" title="typeof 操作符"></a>typeof 操作符</h2><p>ECMAScript是松散类型的，typeof就是负责来检测给定变量的数据类型的操作符。<br>typeof是判断参数是什么类型的实例，就一个参数<br>typeof一般只能返回如下几个结果：”number”、”string”、”boolean”、”object”、”function” 和 “undefined”。</p><h2 id="Undefined类型"><a href="#Undefined类型" class="headerlink" title="Undefined类型"></a>Undefined类型</h2><p>Undefined类型只有一个值，即特殊的undefined。只有在变量声明且未初始化的时候，变量的值为undefined。<br>建议显式的初始化undefined，这样发现值为undefined的时候，就会知道该变量未声明而不是未初始化。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="string">'undefined'</span>;</span><br></pre></td></tr></table></figure></p><h2 id="Null类型"><a href="#Null类型" class="headerlink" title="Null类型"></a>Null类型</h2><p>Null类型只有一个值的数据类型，即特殊的null。从逻辑角度来看，null值表示一个空对象指针，使用typeof操作符检测null值时会返回’object’。<br>如果定义的变量准备在将来用于保存对象，那么最好将该变量初始化为null而不是其他值。只要直接检查null值就可以知道相应的变量是否已经保存了一个对象的引用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (obj != <span class="literal">null</span>)&#123;</span><br><span class="line"><span class="comment">// 对 car 对象执行某些操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>另外：undefined值是派生自null值的，在验证相等时，它们的相等性测试要返回true。但是在全等性测试时返回false。</p><h2 id="Boolean类型"><a href="#Boolean类型" class="headerlink" title="Boolean类型"></a>Boolean类型</h2><p>Boolean类型是JS中使用得最多的一种类型，该类型只有两个字面值:true和false。Boolean类型的字面值true和false是区分大小写的。<br>Boolean类型的字面值只有两个，但JS中所有类型的值都有与这两个Boolean值等价的值。要将一个值转换为其对应的 Boolean值，可以调用转型函数Boolean(),可以对任何数据类型的值调用Boolean()函数，而且总会返回一个Boolean值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> message = <span class="string">'hello world'</span>;</span><br><span class="line"><span class="keyword">const</span> bool = <span class="built_in">Boolean</span>(message);</span><br></pre></td></tr></table></figure></p><table><thead><tr><th>数据类型</th><th style="text-align:center">true</th><th style="text-align:center">false </th></tr></thead><tbody><tr><td>String</td><td style="text-align:center">任何非空字符串</td><td style="text-align:center">‘’(空字符串)</td></tr><tr><td>Boolean</td><td style="text-align:center">true</td><td style="text-align:center">false</td></tr><tr><td>Number</td><td style="text-align:center">任何非0值</td><td style="text-align:center">0和NaN</td></tr><tr><td>Object</td><td style="text-align:center">任何对象</td><td style="text-align:center">null</td></tr><tr><td>undefined</td><td style="text-align:center"></td><td style="text-align:center">undefined</td></tr></tbody></table><h2 id="Number类型"><a href="#Number类型" class="headerlink" title="Number类型"></a>Number类型</h2><p>Number类型使用IEEE754格式来表示整数和浮点数值(浮点数值在某些语言中也被称为双精度数值)。<br>最基本的数值字面量格式是十进制整数：<code>const num = 254;</code>，最高具有53位有效数字精度<br>八进制字面值的第一位必须是零(0)，然后是八进制数字序列(0~7)<code>const num2 = 03</code>;八进制字面量在严格模式下是无效的<br>十六进制字面值的前两位必须是 0x,<code>const num2 = 0xff</code><br>算术计算时，所有以八进制和十六进制表示的数值都会被转换成十进制数值<br>在JavaScript中保存数值的方式，可以保存正零(+0)和负零(0)。正零和负零被认为相等<br>1、浮点数值<br>数值中必须包含一个小数点，并且小数点后面必须至少有一位数字.浮点数保存空间是整数的两倍，如果小数点后的值为0或者没有任何数值，那么该数值就会保存成整数<br>用e或E表示10的幂。<code>2e5</code>,浮点数的最高精度为17位。算术运算的时候，精度比整数差的多。不要测试浮点数相等。<br>2、最值：<code>Number.MIN_VALUE, Number.MAX_VALUE</code><br>3、NaN：<br>该值表示一个本来要返回Number类型的操作数未返回数值的情况。<br>设计NaN的所有操作都等于NaN，且NaN与任何值都不想等，包括NaN<br>isNaN()函数,用来判断一个值是否为数值（number）<br>isNaN也适用于对象，在判断对象的时候，会先调用对象的valueOf()方法，确定该返回值是否是数值，如果不行，会调用toString()方法，再判断是否是数值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">isNaN</span>()</span><br></pre></td></tr></table></figure></p><p>4、数值转换<br>有3个方法可以将非数值类型的值转换成数值类型：Number() parseInt()  parseFloat()。<br>Number()方法可以将任何数值类型转化成数值类型，其他两个需要字符串类型<br>Number()转换规则：</p><ul><li>Boolean的值，true转换成1， false转化成0</li><li>null 转化成0</li><li>undefined 转化成NaN</li><li>String变量 <ul><li>是整数的转换成十进制整数，前导0将被去掉</li><li>浮点数将被转化成浮点数，前导0将被去掉</li><li>十六进制的数值将被转换成十进制相同大小的值</li><li>空字符串将被转换成0</li><li>其他的将被转换成NaN</li></ul></li><li>Object对象 会先调用对象的valueOf()方法，确定该返回值是否是数值，如果NaN，会调用toString()方法，再按照string方法判断。</li></ul><p>parseInt()转换规则<br>  转换字符串，从第一个非空格字符开始，是数字或者进制符号就继续下一个字符。否则就NaN<br>  浮点数转化成整数，空字符串转化成NaN<br>  <code>parseInt(&#39;&#39;) = NaN</code></p><p>parseFloat()转化规则<br>  从第一个字符开始判断，知道遇到非浮点数字符。<br>  第一个小数点有效，其他的则无效。<br>  16进制会被转化成0<br>  忽略前导0</p><h2 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h2><p>用于表示有0到多个16位Unicode字符组成的字符序列，即字符串。用’’或者””表示<br>1、字符字面量 即转义字符<br>2、字符串特点<br>  ES中，字符串一旦创建就不能改变，要改变就会销毁之前变量，然后生产新的变量。<br>3、转换成字符串<br>toString()方法<br>  Number，Boolean，Object，String都有这个方法，转换成相应的字符串。Null和Undefined没有这个方法。<br>  如果有toString()方法，那就调用该方法<br>  如果没有，null 转换成’null’,undefined 转换成’undefined’</p><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><p>ES中的对象就是一组数据和功能的集合。对象可以通过new操作符后加名字的来创建<br><code>var o = new Object()</code><br>Object类型是所有它的实例的基础，其具有的属性，在其他所有的实例中都会有。<br>Object有的属性和方法</p><ul><li>constructor：保存用于创建当前对象的函数</li><li>hasOwnProperty(propertyName): 用于判断是否有属于自己的属性，而不是在原型中的属性</li><li>isPrototypeOf(object): 用于检查传入的对象是否是传入对象的原型</li><li>propertyIsEnumerable(propertyName)：用于检查属性能否用for-in来遍历</li><li>toLocaleString()：返回对象的字符串表示</li><li>toString(): 返回对象的字符串表示</li><li>valueOf()：返回对象的字符串，数值，布尔表示，通常和toString()结果一样。</li></ul>]]></content>
      
      <categories>
          
          <category> JS高程填坑笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Javascript基本概念（一）</title>
      <link href="/2018/06/11/javascript%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2018/06/11/javascript%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>这是JS高程的第三章，内容比较多的一章，所以拆分开来，慢慢的填坑。<br>路漫漫其修远兮啊<br>本节包括三个部分</p><ul><li>JS语法</li><li>JS关键字</li><li>JS变量</li></ul><h2 id="JS语法"><a href="#JS语法" class="headerlink" title="JS语法"></a>JS语法</h2><p>1、JS中的一切(变量、函数名和操作符)都区分大小写<br>2、标识符，就是指变量、函数、属性的名字，或者函数的参数。第一个字符必须是一个字母、下划线(_)或一个美元符号($）;其他字符可以是字母、下划线、美元符号或数字<br>3、注释：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 这是一个多行 </span></span><br><span class="line"><span class="comment">* (块级)注释 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><p>4、严格模式<br>ECMAScript5引入了严格模式(strict mode)的概念。严格模式是为JavaScript定义了一种不同的解析与执行模型。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br></pre></td></tr></table></figure></p><p>它是一个编译指示(pragma)，用于告诉支持的JavaScript引擎切换到严格模式。这是为不破坏ECMAScript 3语法而特意选定的语法。<br>5、ECMAScript 中的语句以一个分号结尾;如果省略分号，则由解析器确定语句的结尾。建议在语句结尾处添加“;”</p><h2 id="关键字和保留字"><a href="#关键字和保留字" class="headerlink" title="关键字和保留字"></a>关键字和保留字</h2><p>1、关键字，可用于表示控制语句的开始或结束，或者用于执行特定操作等。按照规则，关键字也是语言保留的，不能用作标识符。<br>2、保留字，保留字在这门语言中还没有任何特定的用途，但它们有可能在将来被用作关键字。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>ECMAScript的变量是松散类型的，松散类型就是可以用来保存任何类型的数据。换句话说，每个变量仅仅是一个用于保存值的占位符而已。ECMAScript 也支持直接初始化变量，因此在定义变量的同时就可以设置变量的值<br>用var操作符定义的变量将成为定义该变量的作用域中的局部变量。也就是说，如果在函数中使用var定义一个变量，那么这个变量在函数退出后就会被销毁。<br>（块级作用域中可以使用let 和 const来声明块级变量，形成暂时性死区）</p>]]></content>
      
      <categories>
          
          <category> JS高程填坑笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在HTML中使用JS</title>
      <link href="/2018/06/10/%E5%9C%A8HTML%E4%B8%AD%E4%BD%BF%E7%94%A8JS/"/>
      <url>/2018/06/10/%E5%9C%A8HTML%E4%B8%AD%E4%BD%BF%E7%94%A8JS/</url>
      <content type="html"><![CDATA[<p>这是js高程的第二章，主要讲的内容就是怎样在HTML中使用javascript。<br>这章的内容包含四个部分：</p><ul><li>&lt;script&gt; 标签</li><li>嵌入脚本和外部脚本</li><li>文档模式的影响</li><li>禁用javascript的场景</li></ul><h2 id="lt-script-gt-标签"><a href="#lt-script-gt-标签" class="headerlink" title="&lt;script&gt; 标签"></a>&lt;script&gt; 标签</h2><p>向HTML页面中插入JavaScript的主要方法，就是使用&lt;script&gt;元素。<br>html 4.01给script标签定义了以下属性</p><ul><li>async 异步标签，表示应该立即下载脚本，但不应妨碍页面中的其他操作。该属性只对外部脚本文件有效。但是，标记为async的脚本并不保证按照script排列的先后顺序执行。异步脚本一定会在页面的load事件前执行，但可能会在DOMContentLoaded事件触发之前或之后执行。</li><li>charset:表示通过 src 属性指定的代码的字符集。由于大多数浏览器会忽略它的值，因此这个属性很少有人用。</li><li><p>defer:表示脚本可以延迟到文档完全被解析和显示之后再执行。只对外部脚本文件有效。脚本会被延迟到整个页面都解析完毕后再运行。HTML5规范要求脚本按照它们出现的先后顺序执行，因此第一个延迟脚本会先于第二个延迟脚本执行，而这两个脚本会先于DOMContentLoaded事件执行。但是在现实当中，延迟脚本并不一定会按照顺序执行，也不一定会在 DOMContentLoaded事件触发前执行，因此最好只包含一个延迟脚本。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script defer=<span class="string">"defer"</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>src:表示包含要执行代码的外部文件。如果要通过&lt;script&gt;元素来包含外部JavaScript文件，那么src 属性就是必需的。这个属性的值是一个指向外部JavaScript文件的链接。<br>需要注意的是，带有src属性的&lt;script&gt;元素不应该在其&lt;script&gt;和&lt;script&gt;标签之间再 包含额外的JavaScript代码。如果包含了嵌入的代码，则只会下载并执行外部脚本文件，嵌入的代码会被忽略。<br>通过&lt;script&gt;元素的 src 属性还可以包含来自外部域的 JavaScript 文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"example.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>type:type 属性规定脚本的MIME类型。type属性标示 &lt;script&gt;与&lt;/script&gt;标签之间的内容。MIME类型包括两部分：media type 和 subtype。对于JavaScript，MIME 类型是 “text/javascript”。在 HTML5中，type属性不再是必需的。默认值是”text/javascript”。</p></li></ul><h2 id="嵌入脚本和外部脚本"><a href="#嵌入脚本和外部脚本" class="headerlink" title="嵌入脚本和外部脚本"></a>嵌入脚本和外部脚本</h2><p>使用&lt;script&gt;元素的方式有两种:直接在页面中嵌入JavaScript代码和包含外部 JavaScript文件。无论如何包含代码，只要不存在defer和async属性，浏览器都会按照&lt;script&gt;元素在页面中 出现的先后顺序对它们依次进行解析。</p><p>外部脚本的优势：<br> 可维护性<br> 可缓存: 浏览器能够根据具体的设置缓存链接的所有外部 JavaScript 文件<br> 适应未来</p><h2 id="文档模式的影响"><a href="#文档模式的影响" class="headerlink" title="文档模式的影响"></a>文档模式的影响</h2><p>最初的两种文档模式是:混杂模式(quirks mode)和标准模式(standards mode)。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML 4.01 严格型 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- HTML 5 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="禁用javascript的场景"><a href="#禁用javascript的场景" class="headerlink" title="禁用javascript的场景"></a>禁用javascript的场景</h2><p>关于禁用javascript的场景，主要是&lt;noscript&gt;<br>这个元素可以包含能够出现在文档&lt;body&gt;中的任何 HTML 元素——&lt;script&gt;元素除外。包含 在&lt;noscript&gt;元素中的内容只有在下列情况下才会显示出来:<br> 浏览器不支持脚本;<br> 浏览器支持脚本，但脚本被禁用。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Example HTML Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">noscript</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>本页面需要浏览器支持(启用)JavaScript。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">defer</span>=<span class="string">"defer"</span> <span class="attr">src</span>=<span class="string">"example1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">defer</span>=<span class="string">"defer"</span> <span class="attr">src</span>=<span class="string">"example2.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>把 JavaScript 插入到 HTML 页面中要使用&lt;script&gt;元素。使用这个元素可以把 JavaScript 嵌入到 HTML 页面中，让脚本与标记混合在一起;也可以包含外部的 JavaScript 文件。而我们需要注意的地方有:<br> 在包含外部 JavaScript 文件时，必须将 src 属性设置为指向相应文件的 URL。而这个文件既可 以是与包含它的页面位于同一个服务器上的文件，也可以是其他任何域中的文件。<br> 所有&lt;script&gt;元素都会按照它们在页面中出现的先后顺序依次被解析。在不使用 defer 和 async 属性的情况下，只有在解析完前面&lt;script&gt;元素中的代码之后，才会开始解析后面 &lt;script&gt;元素中的代码。<br> 由于浏览器会先解析完不使用 defer 属性的&lt;script&gt;元素中的代码，然后再解析后面的内容， 所以一般应该把&lt;script&gt;元素放在页面最后，即主要内容后面，&lt;／body&gt;标签前面。<br> 使用 defer 属性可以让脚本在文档完全呈现之后再执行。延迟脚本总是按照指定它们的顺序执行。<br> 使用 async 属性可以表示当前脚本不必等待其他脚本，也不必阻塞文档呈现。不能保证异步脚<br>本按照它们在页面中出现的顺序执行。 另外，使用&lt;noscript&gt;元素可以指定在不支持脚本的浏览器中显示的替代内容。但在启用了脚本的情况下，浏览器不会显示&lt;noscript&gt;元素中的任何内容。</p>]]></content>
      
      <categories>
          
          <category> JS高程填坑笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>window.location的属性</title>
      <link href="/2018/06/10/window.location%E7%9A%84%E5%B1%9E%E6%80%A7/"/>
      <url>/2018/06/10/window.location%E7%9A%84%E5%B1%9E%E6%80%A7/</url>
      <content type="html"><![CDATA[<p>关于http的相关的BOM的问题</p><p>获取当前url的协议<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> protocol = <span class="built_in">window</span>.location.protocol;</span><br></pre></td></tr></table></figure></p><p>获取当前的host和端口号<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> host = <span class="built_in">window</span>.location.host;</span><br></pre></td></tr></table></figure></p><p>获取当前完整的URL<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> host = <span class="built_in">window</span>.location.href;</span><br></pre></td></tr></table></figure></p><p>获取当前pathName<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> host = <span class="built_in">window</span>.location.pathname;</span><br></pre></td></tr></table></figure></p><p>获取当前url的查找内容<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> host = <span class="built_in">window</span>.location.search;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> bug汇总 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS 实用片段</title>
      <link href="/2018/05/29/CSS%E5%AE%9E%E7%94%A8%E7%89%87%E6%AE%B5/"/>
      <url>/2018/05/29/CSS%E5%AE%9E%E7%94%A8%E7%89%87%E6%AE%B5/</url>
      <content type="html"><![CDATA[<p>1、垂直对齐：垂直对齐容器中的元素.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">verticalcenter</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">translateY</span>(-50%);</span><br><span class="line">  <span class="attribute">-o-transform</span>: <span class="built_in">translateY</span>(-50%);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、垂直居中:<br>不知道父元素高度的情况</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">parentElement</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>:relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">childElement</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若父容器下只有一个元素，且父元素设置了高度，则只需要使用相对定位即可</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">parentElement</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: xxx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">childElement</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>flex 布局</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">parentElement</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex; <span class="comment">/*Flex布局*/</span></span><br><span class="line">  <span class="attribute">display</span>: -webkit-flex; <span class="comment">/* Safari */</span></span><br><span class="line">  <span class="attribute">align-items</span>: center; <span class="comment">/*指定垂直居中*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>line-height 设置了行间的距离（行高），将要居中的元素的 line-heigth 值设置为和其块级父元素的 height 值一样时，其内部内容会垂直居中。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">element</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、水平居中:<br>行级元素水平居中对齐:<code>text-align:center;</code><br>块级元素水平居中对齐:<code>margin: 0 auto</code><br>对于浮动的元素居中</p><ul><li>宽度不固定的浮动元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outerbox"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"innerbox"</span>&gt;</span>我是浮动的<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.outerbox</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.innerbox</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>。。。未完待续</p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>链表</title>
      <link href="/2018/05/28/%E9%93%BE%E8%A1%A8/"/>
      <url>/2018/05/28/%E9%93%BE%E8%A1%A8/</url>
      <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>链表是由一组节点组成的集合。每一个节点都使用一个对象的引用指向它的后续借点。指向另外一个节点的引用叫做链。<br>链表元素则是靠相互之间的关系进行引用。在链表中就说这个元素是某个元素的后面一个元素。遍历链表就是跟着链表从链表的头元素（head）一直走到尾元素（但是不包含链表的头节点，头通常用来作为链表的接入点）。链表的尾元素指向一个null节点。<br><img src="https://images2015.cnblogs.com/blog/72678/201609/72678-20160917225805820-1415213828.png" alt="链表的结构"></p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>单链表<br>（见定义）</p><p>循环链表<br>循环链表的运算与单链表的运算基本一致。所不同的有以下几点：<br>1、在建立一个循环链表时，必须使其最后一个结点的指针指向表头结点，而不是象单链表那样置为NULL。此种情况还使用于在最后一个结点后插入一个新的结点。<br>2、在判断是否到表尾时，是判断该结点链域的值是否是表头结点，当链域值等于表头指针时，说明已到表尾。而非象单链表那样判断链域值是否为NULL。</p><p>双向链表<br>双向链表其实是单链表的改进。<br>当我们对单链表进行操作时，有时你要对某个结点的直接前驱进行操作时，又必须从表头开始查找。这是由单链表结点的结构所限制的。因为单链表每个结点只有一个存储直接后继结点地址的链域，那么能不能定义一个既有存储直接后继结点地址的链域，又有存储直接前驱结点地址的链域的这样一个双链域结点结构呢？这就是双向链表。<br>在双向链表中，结点除含有数据域外，还有两个链域，一个存储直接后继结点地址，一般称之为右链域；一个存储直接前驱结点地址，一般称之为左链域。</p><h2 id="链表的操作"><a href="#链表的操作" class="headerlink" title="链表的操作"></a>链表的操作</h2><p>链表的操作通常需要操作两个节点，例如，向链表中插入一个节点，需要修改它前面的节点，使其指向新加入的节点，而新加入的节点则指向前面指向的节点<br>从链表中删除一个节点也很简单，将待删除的元素的前驱节点指向待删除的后续节点，同时将待删除元素指向null来释放。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Definition for singly-linked list.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ListNode</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.val = val;</span><br><span class="line">  <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查找：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> findListNode = <span class="function">(<span class="params">listNode, target</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">while</span>(listNode) &#123;</span><br><span class="line">    <span class="keyword">if</span> (listNode.val === target) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    listNode = listNode.next ? listNode.next : <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="string">"not hava this target"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>插入<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在第target个元素后添加一个节点</span></span><br><span class="line"><span class="keyword">const</span> insertListNode = <span class="function">(<span class="params">listNode1, node, target</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> count = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span>(listNode) &#123;</span><br><span class="line">    <span class="keyword">if</span> (count === target) &#123;</span><br><span class="line">      node.next = listNode.next;</span><br><span class="line">      listNode.next = node</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    listNode = listNode.next ? listNode.next : <span class="literal">null</span></span><br><span class="line">    count++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>html5语意化学习</title>
      <link href="/2018/05/28/html5%E8%AF%AD%E6%84%8F%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
      <url>/2018/05/28/html5%E8%AF%AD%E6%84%8F%E5%8C%96%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h1>百度前端技术学院学习笔记（二）</h1><p>百度前端技术学院，第二天课程已经脱了好几天了，最近项目上线以及一些其他的事情，一只拖延着我这只拖延狗的进度。。今天终于抽出时间来整理一下这个知识点。</p><h2 id="目标简介"><a href="#目标简介" class="headerlink" title="目标简介"></a>目标简介</h2><ul><li>Date: 2018.05.28 Mon</li><li>Target: 熟悉html语意化。</li><li>Time: 1day</li></ul><h2 id="语意化探究"><a href="#语意化探究" class="headerlink" title="语意化探究"></a>语意化探究</h2><p>语意化，就是根据内容的结构化（内容语义化），选择合适的标签（代码语义化）便于开发者阅读和写出更优雅的代码的同时让浏览器的爬虫和机器很好地解析。那通俗一点来说，就是为了让编写让人和机器都认识的代码。</p><p>语意化的意义</p><ul><li>为了在没有样式的时候，页面也能呈现出很好地内容结构、代码结构</li><li>更好的用户体验</li><li>便于SEO</li><li>方便其他设备解析</li><li>便于团队开发和维护，语义化更具可读性，是下一步吧网页的重要动向，遵循W3C标准的团队都遵循这个标准，可以减少差异化。</li></ul><p>部分语意化标签</p><table><thead><tr><th style="text-align:center">标签</th><th style="text-align:center">意义</th><th style="text-align:center">用法 </th></tr></thead><tbody><tr><td style="text-align:center">header</td><td style="text-align:center">头部标签</td><td style="text-align:center">用于网页顶部，作为头部</td></tr><tr><td style="text-align:center">footer</td><td style="text-align:center">底部标签</td><td style="text-align:center">用于网页底部，内容多相关信息</td></tr><tr><td style="text-align:center">hgroup</td><td style="text-align:center">网页标签</td><td style="text-align:center">网页或者含有多个h标签的</td></tr><tr><td style="text-align:center">nav</td><td style="text-align:center">导航标签</td><td style="text-align:center">放置导航栏</td></tr><tr><td style="text-align:center">aside</td><td style="text-align:center">侧栏标签</td><td style="text-align:center">侧边栏的内容</td></tr><tr><td style="text-align:center">section</td><td style="text-align:center">区块的标签</td><td style="text-align:center">一个独立的区域</td></tr><tr><td style="text-align:center">article</td><td style="text-align:center">文章标签</td><td style="text-align:center">一片文章的区域</td></tr><tr><td style="text-align:center">h1-h6</td><td style="text-align:center">标题标签</td><td style="text-align:center">按照标题的大小选择</td></tr><tr><td style="text-align:center">p</td><td style="text-align:center">段落标签</td><td style="text-align:center">一个段落</td></tr><tr><td style="text-align:center">audio</td><td style="text-align:center">声音标签</td><td style="text-align:center">用来链接音频</td></tr><tr><td style="text-align:center">video</td><td style="text-align:center">视频标签</td><td style="text-align:center">用来链接视频</td></tr></tbody></table><h2 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h2><p>Q1: HTML是什么，HTML5是什么？<br>A1: 超级文本标记语言是标准通用标记语言下的一个应用，也是一种规范，一种标准，它通过标记符号来标记要显示的网页中的各个部分。HTML5是HTML的第五次修改，HTML5的革新之一：语义化标签一节元素标签。</p><p>Q2: HTML元素标签、属性都是什么概念？<br>A2: HTML的标签就是一个个网页的结构元素，一个网页是由一个个元素组合起来的。属性是标签的一些性质，包括ID、名称、URI、数字、长度单位、语言、媒体描述符、颜色、字符编码、日期和时间等。</p><p>Q3: 文档类型是什么概念，起什么作用？<br>A3: 文档类型有严格模式和非严格模式，应用严格模式来编写页面，更严谨。H5没有文档类型。</p><p>Q4: meta标签都用来做什么的？<br>A4: 元素可提供相关页面的元信息（meta-information），标签位于文档的头部，不包含任何内容。标签的属性定义了与文档相关联的名称/值对。</p><ul><li>meta标签共有两个属性，它们分别是http-equiv属性和name属性，不同的属性又有不同的参数值，这些不同的参数值就实现了不同的网页功能。</li><li>meta 元素可提供有关页面的元信息（meta-information），比如针对搜索引擎和更新频度的描述和关键词。</li><li>meta 标签位于文档的头部，不包含任何内容。</li><li>meta 标签的属性定义了与文档相关联的名称/值对。</li></ul><p>Q5: Web语义化是什么，是为了解决什么问题<br>A5：就是根据内容的结构化（内容语义化），选择合适的标签（代码语义化）便于开发者阅读和写出更优雅的代码的同时让浏览器的爬虫和机器很好地解析<br>解决了SEO等问题</p><p>Q6: 链接是什么概念，对应什么标签？<br>A6: 是支持浏览器文档与外部资源的关系。对应link标签</p>]]></content>
      
      <categories>
          
          <category> Glory Road </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>插入排序</title>
      <link href="/2018/05/25/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
      <url>/2018/05/25/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p>插入排序的基本操作就是将一个数据插入到已经排好序的有序数据中，从而得到一个新的、个数加一的有序数据，算法适用于少量数据的排序，时间复杂度为O(n^2)。是稳定的排序方法。插入算法把要排序的数组分成两部分：第一部分包含了这个数组的所有元素，但将最后一个元素除外（让数组多一个空间才有插入的位置），而第二部分就只包含这一个元素（即待插入元素）。在第一部分排序完成后，再将这个最后元素插入到已排好序的第一部分中。<br>插入排序的基本思想是：每步将一个待排序的记录，按其关键码值的大小插入前面已经排序的文件中适当位置上，直到全部插入完为止。</p><p>直接插入排序的算法思路：<br>（1） 设置监视哨r[0]，将待插入记录的值赋值给r[0]；<br>（2） 设置开始查找的位置j；<br>（3） 在数组中进行搜索，搜索中将第j个记录后移，直至r[0].key≥r[j].key为止；<br>（4） 将r[0]插入r[j+1]的位置上。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> insertionSort = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> len = arr.length;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>; i&lt;len; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> j = i;</span><br><span class="line">    <span class="keyword">let</span> tmp = arr[i];</span><br><span class="line">    <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; arr[j<span class="number">-1</span>] &gt; tmp) &#123;</span><br><span class="line">        arr[j] = arr[j<span class="number">-1</span>];</span><br><span class="line">        j--;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[j] = tmp;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>正则填坑</title>
      <link href="/2018/05/25/%E6%AD%A3%E5%88%99%E5%A1%AB%E5%9D%91/"/>
      <url>/2018/05/25/%E6%AD%A3%E5%88%99%E5%A1%AB%E5%9D%91/</url>
      <content type="html"><![CDATA[<h1>正则表达式</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>正则表达式(Regular Expression)是一种文本模式，包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为”元字符”）。正则表达式使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串。</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>通过使用正则表达式，可以：<br>1、测试字符串内的模式。<br>例如，可以测试输入字符串，以查看字符串内是否出现电话号码模式或信用卡号码模式。这称为数据验证。<br>替换文本。<br>2、可以使用正则表达式来识别文档中的特定文本，完全删除该文本或者用其他文本替换它。<br>基于模式匹配从字符串中提取子字符串。<br>3、可以查找文档内或输入域内特定的文本。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>正则表达式包含好多种字符，普通字符，非打印字符，特殊字符，限定符，定位符</p><p>元字符</p><table><thead><tr><th>字符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td>\</td><td style="text-align:center">将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，’n’ 匹配字符 “n”。’\n’ 匹配一个换行符。序列 ‘\‘ 匹配 “\” 而 “(“ 则匹配 “(“。</td></tr><tr><td>^</td><td style="text-align:center">匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘\n’ 或 ‘\r’ 之后的位置。</td></tr><tr><td>$</td><td style="text-align:center">匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 ‘\n’ 或 ‘\r’ 之前的位置。</td></tr><tr><td>*</td><td style="text-align:center">匹配前面的子表达式零次或多次。例如，zo<em> 能匹配 “z” 以及 “zoo”。</em> 等价于{0,}。</td></tr><tr><td>+</td><td style="text-align:center">匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td></tr><tr><td>?</td><td style="text-align:center">匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 或 “does” 。? 等价于 {0,1}。</td></tr><tr><td>{n}</td><td style="text-align:center">n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td></tr><tr><td>{n,}</td><td style="text-align:center">n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td></tr><tr><td>{n,m}</td><td style="text-align:center">m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td></tr><tr><td>?</td><td style="text-align:center">当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 “oooo”，’o+?’ 将匹配单个 “o”，而 ‘o+’ 将匹配所有 ‘o’。</td></tr><tr><td>.</td><td style="text-align:center">匹配除换行符（\n、\r）之外的任何单个字符。要匹配包括 ‘\n’ 在内的任何字符，请使用像”(.\n)”的模式。</td></tr><tr><td>[xyz]</td><td style="text-align:center">字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。</td></tr><tr><td>[^xyz]</td><td style="text-align:center">负值字符集合。匹配未包含的任意字符。例如， ‘[^abc]’ 可以匹配 “plain” 中的’p’、’l’、’i’、’n’。</td></tr><tr><td>[a-z]</td><td style="text-align:center">字符范围。匹配指定范围内的任意字符。例如，’[a-z]’ 可以匹配 ‘a’ 到 ‘z’ 范围内的任意小写字母字符。</td></tr><tr><td>[^a-z]</td><td style="text-align:center">负值字符范围。匹配任何不在指定范围内的任意字符。例如，’[^a-z]’ 可以匹配任何不在 ‘a’ 到 ‘z’ 范围内的任意字符。</td></tr><tr><td>\b</td><td style="text-align:center">匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。</td></tr><tr><td>\B</td><td style="text-align:center">匹配非单词边界。’er\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。</td></tr><tr><td>\cx</td><td style="text-align:center">匹配由 x 指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td></tr><tr><td>\d</td><td style="text-align:center">匹配一个数字字符。等价于 [0-9]。</td></tr><tr><td>\D</td><td style="text-align:center">匹配一个非数字字符。等价于 [^0-9]。</td></tr><tr><td>\f</td><td style="text-align:center">匹配一个换页符。等价于 \x0c 和 \cL。</td></tr><tr><td>\n</td><td style="text-align:center">匹配一个换行符。等价于 \x0a 和 \cJ。</td></tr><tr><td>\r</td><td style="text-align:center">匹配一个回车符。等价于 \x0d 和 \cM。</td></tr><tr><td>\s</td><td style="text-align:center">匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</td></tr><tr><td>\S</td><td style="text-align:center">匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td></tr><tr><td>\t</td><td style="text-align:center">匹配一个制表符。等价于 \x09 和 \cI。</td></tr><tr><td>\v</td><td style="text-align:center">匹配一个垂直制表符。等价于 \x0b 和 \cK。</td></tr><tr><td>\w</td><td style="text-align:center">匹配字母、数字、下划线。等价于’[A-Za-z0-9_]’。</td></tr><tr><td>\W</td><td style="text-align:center">匹配非字母、数字、下划线。等价于 ‘[^A-Za-z0-9_]’。</td></tr><tr><td>\xn</td><td style="text-align:center">匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，’\x41’ 匹配 “A”。’\x041’ 则等价于 ‘\x04’ &amp; “1”。正则表达式中可以使用 ASCII 编码。</td></tr><tr><td>\num</td><td style="text-align:center">匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，’(.)\1’ 匹配两个连续的相同字符。</td></tr><tr><td>\n</td><td style="text-align:center">标识一个八进制转义值或一个向后引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。</td></tr><tr><td>\nm</td><td style="text-align:center">标识一个八进制转义值或一个向后引用。如果 \nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \nm 将匹配八进制转义值 nm。</td></tr><tr><td>\nml</td><td style="text-align:center">如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。</td></tr><tr><td>\un</td><td style="text-align:center">匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配版权符号 (?)。</td></tr></tbody></table><p><img src="https://github.com/kaisa911/studyNotes/blob/master/public/image/reg.png?raw=true" alt="其他"></p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>放飞的thinking～</title>
      <link href="/2018/05/24/%E6%94%BE%E9%A3%9E%E7%9A%84thinking%EF%BD%9E/"/>
      <url>/2018/05/24/%E6%94%BE%E9%A3%9E%E7%9A%84thinking%EF%BD%9E/</url>
      <content type="html"><![CDATA[<h1>百度前端技术学院学习笔记（一）</h1><h2 id="目标简介"><a href="#目标简介" class="headerlink" title="目标简介"></a>目标简介</h2><ul><li>Date: 2018.05.24 Thr</li><li>Flag: 真男人就坚持66天。</li><li>Target: 了解前端。</li><li>Time: 1h</li></ul><h2 id="课程内容"><a href="#课程内容" class="headerlink" title="课程内容"></a>课程内容</h2><p>1、什么是前端？<br>  前端这个概念，我觉得应该这么来理解，<b>前</b>：表示与用户直接有关的部分，比如页面的展示，与用户的交互等，<b>端</b>：是终端的部分，包括pc，移动端以及其他的一些可以与用于交互的终端。<br>  从百度百科上看到了前端的解释：<br>  <blockquote>前端即网站前台部分，运行在PC端，移动端等浏览器上展现给用户浏览的网页。随着互联网技术的发展，HTML5，CSS3，前端框架的应用，跨平台响应式网页设计能够适应各种屏幕分辨率，完美的动效设计，给用户带来极高的用户体验。</blockquote><br>  感觉差不多吧…</p><p>2、什么是html？<br>  <blockquote>html：超文本标记语言，标准通用标记语言下的一个应用。</blockquote><br>  我理解的是，用来构建页面的骨架的语言。<br>  html提供了语义化的标签，以及相关的属性，根据标签和属性以及内容构建页面的骨架。</p><p>3、什么是CSS？<br>  <blockquote>CSS：层叠样式表(英文全称：Cascading Style Sheets)是一种用来表现HTML（标准通用标记语言的一个应用）或XML（标准通用标记语言的一个子集）等文件样式的计算机语言。CSS不仅可以静态地修饰网页，还可以配合各种脚本语言动态地对网页各元素进行格式化。</blockquote><br>  CSS，可以理解成骨架的衣服，好的页面有了骨架还不行，还得需要漂亮的衣服。html写好了骨架，通过写CSS来写样式，让页面变得更好看。</p><p>4、什么是Javascript？<br>  <blockquote>JavaScript一种直译式脚本语言，是一种动态类型、弱类型、基于原型的语言，内置支持类型。它的解释器被称为JavaScript引擎，为浏览器的一部分，广泛用于客户端的脚本语言，最早是在HTML（标准通用标记语言下的一个应用）网页上使用，用来给HTML网页增加动态功能。</blockquote><br>  js是一种脚本语言，可以给页面添加交互，以及相关的逻辑，还有和后台通过接口交互数据等。</p><h2 id="课程疑问"><a href="#课程疑问" class="headerlink" title="课程疑问"></a>课程疑问</h2><p>1、现在背景下的大前端该如何发展？<br>2、框架的不断推出，框架的学习和个人技能的发展的均衡？<br>3、因为node的存在，前端工程师往全栈工程师的发展是否成为必要？</p><p></p><h1>总结</h1><br>学习前端有一年的时间了，半路出家，从机械转到了前端。从开始写外包，囫囵吞枣，会用就行，到工作之后，发现自己欠缺的东西还有好多好多。开始逐渐的弥补自己的知识。<br>虽然起步比较晚，但是还是很喜欢js这个不断进步的语言～<br>希望能够通过自己的努力，成为一个真正的FE developer！<p></p>]]></content>
      
      <categories>
          
          <category> Glory Road </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> CSS </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>koa2源码学习--application.js</title>
      <link href="/2018/05/24/koa2%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0--application.js/"/>
      <url>/2018/05/24/koa2%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0--application.js/</url>
      <content type="html"><![CDATA[<p>一直很想研究下koa2，虽然还是小白一枚，但终于决定入坑koa2。之前只知道koa2采用了ES2015和ES2016的一些东西，还知道洋葱头的中间件的运行机制。还是先研究一下源码，学习一下大神写代码的畅快感。</p><p>把代码拉下来之后，发现lib里只有四个源码文件：application.js, context.js, request.js, response.js。</p><p>application.js 是koa的入口文件,是一个构造函数，它暴露整个应用的class, 这个class继承自node自带的events，并且把 context、request 和 response 属性指向了原型链指向其他三个文件导出对象的实例。</p><p>application暴露了一些公用的api, 比如listen，use, callback等。</p><p>下面来研究一些application.js的源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 依赖的模块</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isGeneratorFunction = <span class="built_in">require</span>(<span class="string">'is-generator-function'</span>); <span class="comment">//判断函数是否为generator函数</span></span><br><span class="line"><span class="keyword">const</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'koa:application'</span>); <span class="comment">//调试模式</span></span><br><span class="line"><span class="keyword">const</span> onFinished = <span class="built_in">require</span>(<span class="string">'on-finished'</span>); <span class="comment">//HTTP请求关闭，完成或错误时执行回调。</span></span><br><span class="line"><span class="keyword">const</span> response = <span class="built_in">require</span>(<span class="string">'./response'</span>); <span class="comment">//reponse.js</span></span><br><span class="line"><span class="keyword">const</span> compose = <span class="built_in">require</span>(<span class="string">'koa-compose'</span>); <span class="comment">//koa中间件组合工具</span></span><br><span class="line"><span class="keyword">const</span> isJSON = <span class="built_in">require</span>(<span class="string">'koa-is-json'</span>); <span class="comment">//检查body应该是一个json格式</span></span><br><span class="line"><span class="keyword">const</span> context = <span class="built_in">require</span>(<span class="string">'./context'</span>); <span class="comment">//上下文context.js</span></span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">'./request'</span>); <span class="comment">//request.js</span></span><br><span class="line"><span class="keyword">const</span> statuses = <span class="built_in">require</span>(<span class="string">'statuses'</span>); <span class="comment">////http状态工具status(403) // =&gt; 'Forbidden'，可以通过code转换成msg，也可以通过msg转换成code</span></span><br><span class="line"><span class="keyword">const</span> Cookies = <span class="built_in">require</span>(<span class="string">'cookies'</span>); <span class="comment">//提供一个读写cookie的API</span></span><br><span class="line"><span class="keyword">const</span> accepts = <span class="built_in">require</span>(<span class="string">'accepts'</span>); <span class="comment">//一个比较高级的API用来http处理请求中的接受类型，</span></span><br><span class="line"><span class="keyword">const</span> Emitter = <span class="built_in">require</span>(<span class="string">'events'</span>); <span class="comment">//node的events模块？</span></span><br><span class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>); <span class="comment">//通过状态码进行断言？</span></span><br><span class="line"><span class="keyword">const</span> Stream = <span class="built_in">require</span>(<span class="string">'stream'</span>); <span class="comment">//流文件？</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>); <span class="comment">// node的http模块？</span></span><br><span class="line"><span class="keyword">const</span> only = <span class="built_in">require</span>(<span class="string">'only'</span>); <span class="comment">//返回白名单中的值。其实就是根据一个列表获取一个对象中的部分属性返回一个obj</span></span><br><span class="line"><span class="keyword">const</span> convert = <span class="built_in">require</span>(<span class="string">'koa-convert'</span>); <span class="comment">//提供function *的语法的转换器</span></span><br><span class="line"><span class="keyword">const</span> deprecate = <span class="built_in">require</span>(<span class="string">'depd'</span>)(<span class="string">'koa'</span>); <span class="comment">//提示？</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 暴露一个application的类</span></span><br><span class="line"><span class="comment"> * 继承自 `Emitter.prototype`.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="class"><span class="keyword">class</span> <span class="title">Application</span> <span class="keyword">extends</span> <span class="title">Emitter</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 初始化一个新的 `Application`.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @api public</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义下面的属性</span></span><br><span class="line">    <span class="keyword">this</span>.proxy = <span class="literal">false</span>; <span class="comment">//代理</span></span><br><span class="line">    <span class="keyword">this</span>.middleware = []; <span class="comment">//中间件的队列</span></span><br><span class="line">    <span class="keyword">this</span>.subdomainOffset = <span class="number">2</span>; <span class="comment">//对于要忽略的 .subdomains 偏移[2]</span></span><br><span class="line">    <span class="keyword">this</span>.env = process.env.NODE_ENV || <span class="string">'development'</span>; <span class="comment">//env默认是 NODE_ENV 或 "development"</span></span><br><span class="line">    <span class="keyword">this</span>.context = <span class="built_in">Object</span>.create(context); <span class="comment">//创建一个新context对象，使用context对象来提供新创建的对象的__proto__。 </span></span><br><span class="line">    <span class="keyword">this</span>.request = <span class="built_in">Object</span>.create(request);<span class="comment">//创建一个新request对象</span></span><br><span class="line">    <span class="keyword">this</span>.response = <span class="built_in">Object</span>.create(response);<span class="comment">//创建一个新response对象</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Shorthand for:</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   *    http.createServer(app.callback()).listen(...)</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @param &#123;Mixed&#125; ...</span></span><br><span class="line"><span class="comment">   * @return &#123;Server&#125;</span></span><br><span class="line"><span class="comment">   * @api public</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//listen(),调用node的createServer方法，返回一个服务器。参数为端口号，</span></span><br><span class="line">  listen(...args) &#123;</span><br><span class="line">    debug(<span class="string">'listen'</span>);</span><br><span class="line">    <span class="keyword">const</span> server = http.createServer(<span class="keyword">this</span>.callback());<span class="comment">//</span></span><br><span class="line">    <span class="keyword">return</span> server.listen(...args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Return JSON representation.</span></span><br><span class="line"><span class="comment">   * We only bother showing settings.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @return &#123;Object&#125;</span></span><br><span class="line"><span class="comment">   * @api public</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//toJSON 方法，通过only方法，把key放到obj里 返回一个object对象</span></span><br><span class="line">  toJSON() &#123;</span><br><span class="line">    <span class="keyword">return</span> only(<span class="keyword">this</span>, [</span><br><span class="line">      <span class="string">'subdomainOffset'</span>,</span><br><span class="line">      <span class="string">'proxy'</span>,</span><br><span class="line">      <span class="string">'env'</span></span><br><span class="line">    ]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Inspect implementation.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @return &#123;Object&#125;</span></span><br><span class="line"><span class="comment">   * @api public</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="comment">//检查,返回一个object对象</span></span><br><span class="line">  inspect() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.toJSON();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 把给定的中间件函数fn，推入到middleware队列中</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * 以前写法的中间件将会被转换</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @param &#123;Function&#125; fn</span></span><br><span class="line"><span class="comment">   * @return &#123;Application&#125; self</span></span><br><span class="line"><span class="comment">   * @api public</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  use(fn) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">'function'</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'middleware must be a function!'</span>);</span><br><span class="line">    <span class="keyword">if</span> (isGeneratorFunction(fn)) &#123;</span><br><span class="line">      deprecate(<span class="string">'Support for generators will be removed in v3. '</span> +</span><br><span class="line">                <span class="string">'See the documentation for examples of how to convert old middleware '</span> +</span><br><span class="line">                <span class="string">'https://github.com/koajs/koa/blob/master/docs/migration.md'</span>);</span><br><span class="line">      fn = convert(fn);</span><br><span class="line">    &#125;</span><br><span class="line">    debug(<span class="string">'use %s'</span>, fn._name || fn.name || <span class="string">'-'</span>);</span><br><span class="line">    <span class="keyword">this</span>.middleware.push(fn);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Return a request handler callback</span></span><br><span class="line"><span class="comment">   * for node's native http server.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @return &#123;Function&#125;</span></span><br><span class="line"><span class="comment">   * @api public</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//返回适用于 http.createServer() 方法的回调函数来处理请求。</span></span><br><span class="line">  <span class="comment">//启动server和接收请求</span></span><br><span class="line">  callback() &#123;</span><br><span class="line">    <span class="keyword">const</span> fn = compose(<span class="keyword">this</span>.middleware);<span class="comment">//启动server时执行，初始化中间件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.listenerCount(<span class="string">'error'</span>)) <span class="keyword">this</span>.on(<span class="string">'error'</span>, <span class="keyword">this</span>.onerror);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接收请求时执行处理请求的函数</span></span><br><span class="line">    <span class="keyword">const</span> handleRequest = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> ctx = <span class="keyword">this</span>.createContext(req, res);<span class="comment">//创建一个最终可用的context</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.handleRequest(ctx, fn);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> handleRequest;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * callback里的一个处理请求的方法，</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @api private</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  handleRequest(ctx, fnMiddleware) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = ctx.res;</span><br><span class="line">    res.statusCode = <span class="number">404</span>;</span><br><span class="line">    <span class="keyword">const</span> onerror = <span class="function"><span class="params">err</span> =&gt;</span> ctx.onerror(err);</span><br><span class="line">    <span class="keyword">const</span> handleResponse = <span class="function"><span class="params">()</span> =&gt;</span> respond(ctx);</span><br><span class="line">    onFinished(res, onerror);</span><br><span class="line">    <span class="keyword">return</span> fnMiddleware(ctx).then(handleResponse).catch(onerror);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Initialize a new context.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @api private</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  createContext(req, res) &#123;</span><br><span class="line">    <span class="keyword">const</span> context = <span class="built_in">Object</span>.create(<span class="keyword">this</span>.context);</span><br><span class="line">    <span class="keyword">const</span> request = context.request = <span class="built_in">Object</span>.create(<span class="keyword">this</span>.request);</span><br><span class="line">    <span class="keyword">const</span> response = context.response = <span class="built_in">Object</span>.create(<span class="keyword">this</span>.response);</span><br><span class="line">    context.app = request.app = response.app = <span class="keyword">this</span>;</span><br><span class="line">    context.req = request.req = response.req = req;</span><br><span class="line">    context.res = request.res = response.res = res;</span><br><span class="line">    request.ctx = response.ctx = context;</span><br><span class="line">    request.response = response;</span><br><span class="line">    response.request = request;</span><br><span class="line">    context.originalUrl = request.originalUrl = req.url;</span><br><span class="line">    context.cookies = <span class="keyword">new</span> Cookies(req, res, &#123;</span><br><span class="line">      keys: <span class="keyword">this</span>.keys,</span><br><span class="line">      secure: request.secure</span><br><span class="line">    &#125;);</span><br><span class="line">    request.ip = request.ips[<span class="number">0</span>] || req.socket.remoteAddress || <span class="string">''</span>;</span><br><span class="line">    context.accept = request.accept = accepts(req);</span><br><span class="line">    context.state = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> context;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Default error handler.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @param &#123;Error&#125; err</span></span><br><span class="line"><span class="comment">   * @api private</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  onerror(err) &#123;</span><br><span class="line">    assert(err <span class="keyword">instanceof</span> <span class="built_in">Error</span>, <span class="string">`non-error thrown: <span class="subst">$&#123;err&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">404</span> == err.status || err.expose) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.silent) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> msg = err.stack || err.toString();</span><br><span class="line">    <span class="built_in">console</span>.error();</span><br><span class="line">    <span class="built_in">console</span>.error(msg.replace(<span class="regexp">/^/gm</span>, <span class="string">'  '</span>));</span><br><span class="line">    <span class="built_in">console</span>.error();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Response helper.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">respond</span>(<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// allow bypassing koa</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">false</span> === ctx.respond) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> res = ctx.res;</span><br><span class="line">  <span class="keyword">if</span> (!ctx.writable) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> body = ctx.body;</span><br><span class="line">  <span class="keyword">const</span> code = ctx.status;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ignore body</span></span><br><span class="line">  <span class="keyword">if</span> (statuses.empty[code]) &#123;</span><br><span class="line">    <span class="comment">// strip headers</span></span><br><span class="line">    ctx.body = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> res.end();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="string">'HEAD'</span> == ctx.method) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!res.headersSent &amp;&amp; isJSON(body)) &#123;</span><br><span class="line">      ctx.length = Buffer.byteLength(<span class="built_in">JSON</span>.stringify(body));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.end();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// status body</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">null</span> == body) &#123;</span><br><span class="line">    body = ctx.message || <span class="built_in">String</span>(code);</span><br><span class="line">    <span class="keyword">if</span> (!res.headersSent) &#123;</span><br><span class="line">      ctx.type = <span class="string">'text'</span>;</span><br><span class="line">      ctx.length = Buffer.byteLength(body);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.end(body);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// responses</span></span><br><span class="line">  <span class="keyword">if</span> (Buffer.isBuffer(body)) <span class="keyword">return</span> res.end(body);</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">'string'</span> == <span class="keyword">typeof</span> body) <span class="keyword">return</span> res.end(body);</span><br><span class="line">  <span class="keyword">if</span> (body <span class="keyword">instanceof</span> Stream) <span class="keyword">return</span> body.pipe(res);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// body: json</span></span><br><span class="line">  body = <span class="built_in">JSON</span>.stringify(body);</span><br><span class="line">  <span class="keyword">if</span> (!res.headersSent) &#123;</span><br><span class="line">    ctx.length = Buffer.byteLength(body);</span><br><span class="line">  &#125;</span><br><span class="line">  res.end(body);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> koa2源码学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Koa </tag>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>react生命周期理解</title>
      <link href="/2018/05/22/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%90%86%E8%A7%A3/"/>
      <url>/2018/05/22/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%90%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h1>react组建的生命周期</h1><p>React组件的生命周期有两种情况，初次渲染和状态更新导致再次渲染。<br>React 生命周期分为三种状态 1. 挂载 2.更新 3.销毁</p><h2 id="组件加载"><a href="#组件加载" class="headerlink" title="组件加载"></a>组件加载</h2><p>组件的初次挂载，有以下几个步骤，分别是<br>1、构造函数，指定This，初始状态，绑定函数（constructor）<br>2、组件安装（componentWillMount）<br>3、将组建或者虚拟DOM元素渲染到真实的DOM上（render）<br>4、组件生成，DOM查找等(componentDidMount)</p><h2 id="组件更新"><a href="#组件更新" class="headerlink" title="组件更新"></a>组件更新</h2><p>组件的更新，有三种情况：<br>1.父组件的props发生更新<br>2.调用this.forceUpdate更新（重复componentWillUpdate方法之后的操作）<br>3.调用this.setState方法更新组件state,触发组件更新</p><h3 id="状态更新"><a href="#状态更新" class="headerlink" title="状态更新"></a>状态更新</h3><p>步骤：<br>1、构造函数，指定This，初始状态，绑定函数（constructor）<br>2、组件安装（componentWillMount）<br>3、将组建或者虚拟DOM元素渲染到真实的DOM上（render）<br>4、组件生成，DOM查找等(componentDidMount)<br>5、组建更新状态(componentWillUpdate)<br>6、将组建或者虚拟DOM元素渲染到真实的DOM上（render）<br>7、组建更新完成(componentDidUpdate)</p><h3 id="调用this-forceUpdate更新"><a href="#调用this-forceUpdate更新" class="headerlink" title="调用this.forceUpdate更新"></a>调用this.forceUpdate更新</h3><p>当组件调用forceUpdata方法更新时，会进入componentWillUpdate方法。<br>直接跳过shouldComponentUpdtavoid<br>之后执行render函数更新DOMReactElement<br>执行完render函数之后执行componentDidUpdata,<br>除了首次render之后调用componentDidMount，其它render结束之后都是调用componentDidUpdate。</p><h3 id="父组建更新props"><a href="#父组建更新props" class="headerlink" title="父组建更新props"></a>父组建更新props</h3><p>步骤：<br>1、父组件构造函数，指定This，初始状态，绑定函数（constructor）<br>2、父组件安装（componentWillMount）<br>3、父组件或者虚拟DOM元素渲染到真实的DOM上（render）<br>4、子组件或者虚拟DOM元素渲染到真实的DOM上（render）<br>5、父组件生成，DOM查找等(componentDidMount)<br>6、父组建更新状态(componentWillUpdate)<br>7、父组件或者虚拟DOM元素渲染到真实的DOM上（render）<br>8、子组件接收父组件props(componentWillReceiveProps)<br>9、子组件判断是否更新(shouldComponentUpdate)<br>10、子组建更新状态(componentWillUpdate)<br>11、子组件或者虚拟DOM元素渲染到真实的DOM上（render）<br>12、子组件更新完成(componentDidUpdate)<br>12、父组件更新完成(componentDidUpdate)</p><h2 id="组件销毁"><a href="#组件销毁" class="headerlink" title="组件销毁"></a>组件销毁</h2><p>单页应用中，切换页面原组件需要销毁释放资源，如果原组件中有定时器等不能销毁时，需要在componentWillUnmount中清理资源占用，手动销毁定时器。</p><h1>总结</h1><p><img src="https://github.com/kaisa911/studyNotes/blob/master/public/image/reactLifeCycle.png?raw=true" alt="react生命周期"></p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>堆排序</title>
      <link href="/2018/05/21/%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
      <url>/2018/05/21/%E5%A0%86%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p>堆排序(Heapsort)是指利用堆积树（堆）这种数据结构所设计的一种排序算法，它是选择排序的一种。可以利用数组的特点快速定位指定索引的元素。堆分为大根堆和小根堆，是完全二叉树。大根堆的要求是每个节点的值都不大于其父节点的值，即A[PARENT[i]] &gt;= A[i]。在数组的非降序排序中，需要使用的就是大根堆，因为根据大根堆的要求可知，最大的值一定在堆顶。</p><p>具体算法描述如下：</p><p>1、将初始待排序关键字序列(R1,R2….Rn)构建成大顶堆，此堆为初始的无序区；<br>2、将堆顶元素R[1]与最后一个元素R[n]交换，此时得到新的无序区(R1,R2,……Rn-1)和新的有序区(Rn),<br>  且满足R[1,2…n-1]&lt;=R[n]；<br>3、由于交换后新的堆顶R[1]可能违反堆的性质，因此需要对当前无序区(R1,R2,……Rn-1)调整为新堆，然后再次将R[1]与无序区最后一个元素交换，得到新的无序区(R1,R2….Rn-2)和新的有序区(Rn-1,Rn)。不断重复此过程直到有序区的元素个数为n-1，则整个排序过程完成。</p><p>时间复杂度：<br>最好：O(nlog2n)，<br>最坏：O(nlog2n)，<br>平均：O(nlog2n)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*方法说明：堆排序</span></span><br><span class="line"><span class="comment">@param  array 待排序数组*/</span>            </span><br><span class="line"><span class="keyword">const</span> heapSort = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(array).slice(<span class="number">8</span>, <span class="number">-1</span>) === <span class="string">'Array'</span>) &#123;</span><br><span class="line">    <span class="comment">//建堆</span></span><br><span class="line">    <span class="keyword">let</span> heapSize = array.length, temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="built_in">Math</span>.floor(heapSize / <span class="number">2</span>); i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        heapify(array, i, heapSize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//堆排序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = heapSize - <span class="number">1</span>; j &gt;= <span class="number">1</span>; j--) &#123;</span><br><span class="line">        temp = array[<span class="number">0</span>];</span><br><span class="line">        array[<span class="number">0</span>] = array[j];</span><br><span class="line">        array[j] = temp;</span><br><span class="line">        heapify(array, <span class="number">0</span>, --heapSize);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'array is not an Array!'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*方法说明：维护堆的性质</span></span><br><span class="line"><span class="comment">@param  arr 数组</span></span><br><span class="line"><span class="comment">@param  x   数组下标</span></span><br><span class="line"><span class="comment">@param  len 堆大小*/</span></span><br><span class="line"><span class="keyword">const</span> heapify = <span class="function">(<span class="params">arr, x, len</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(arr).slice(<span class="number">8</span>, <span class="number">-1</span>) === <span class="string">'Array'</span> &amp;&amp; <span class="keyword">typeof</span> x === <span class="string">'number'</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> l = <span class="number">2</span> * x, r = <span class="number">2</span> * x + <span class="number">1</span>, largest = x, temp;</span><br><span class="line">    <span class="keyword">if</span> (l &lt; len &amp;&amp; arr[l] &gt; arr[largest]) &#123;</span><br><span class="line">        largest = l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (r &lt; len &amp;&amp; arr[r] &gt; arr[largest]) &#123;</span><br><span class="line">        largest = r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (largest != x) &#123;</span><br><span class="line">        temp = arr[x];</span><br><span class="line">        arr[x] = arr[largest];</span><br><span class="line">        arr[largest] = temp;</span><br><span class="line">        heapify(arr, largest, len);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'arr is not an Array or x is not a number!'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>归并排序</title>
      <link href="/2018/05/19/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
      <url>/2018/05/19/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p>归并排序（MERGE-SORT）是建立在归并操作上的一种有效的排序算法,该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。</p><p>把长度为n的输入序列分成两个长度为n/2的子序列；<br>对这两个子序列分别采用归并排序；<br>将两个排序好的子序列合并成一个最终的排序序列。</p><p>归并操作的工作原理如下：<br>第一步：申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列<br>第二步：设定两个指针，最初位置分别为两个已经排序序列的起始位置<br>第三步：比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置<br>重复步骤3直到某一指针超出序列尾<br>将另一序列剩下的所有元素直接复制到合并序列尾</p><p>最佳情况：T(n) = O(n)<br>最差情况：T(n) = O(nlogn)<br>平均情况：T(n) = O(nlogn)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mergeSort = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> len = arr.lenght;</span><br><span class="line">  <span class="keyword">if</span> (len &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> m = (len &gt;&gt; <span class="number">1</span>), <span class="comment">//通过位运算符，将len取为一半。</span></span><br><span class="line">    left = array.slice(<span class="number">0</span>, m),</span><br><span class="line">    right = array.slice(m); <span class="comment">//拆分为两个子数组</span></span><br><span class="line">  <span class="keyword">return</span> merge(mergeSort(left), mergeSort(right));<span class="comment">//子数组继续递归拆分,然后再合并</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> merge = <span class="function">(<span class="params">left, right</span>) =&gt;</span> &#123; <span class="comment">//合并两个子数组</span></span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line">  <span class="keyword">while</span> (left.length &amp;&amp; right.length) &#123;</span><br><span class="line">    <span class="keyword">let</span> item = left[<span class="number">0</span>] &lt;= right[<span class="number">0</span>] ? left.shift() : right.shift();<span class="comment">//注意:判断的条件是小于或等于,如果只是小于,那么排序将不稳定.</span></span><br><span class="line">    result.push(item);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result.concat(left.length ? left : right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>选择排序</title>
      <link href="/2018/05/19/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
      <url>/2018/05/19/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p>选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理是每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完。 选择排序是不稳定的排序方法。</p><p>简单选择排序的基本思想：<br>第1趟，在待排序记录r[1]~r[n]中选出最小的记录，将它与r[1]交换；<br>第2趟，在待排序记录r[2]~r[n]中选出最小的记录，将它与r[2]交换；<br>以此类推，<br>第i趟在待排序记录r[i]~r[n]中选出最小的记录，将它与r[i]交换，使有序序列不断增长直到全部排序完毕。</p><p>最佳情况：T(n) = O(n^2)<br>最差情况：T(n) = O(n^2)<br>平均情况：T(n) = O(n^2)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> selectSort = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> len = arr.length, min;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    min = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; len; j++)&#123;</span><br><span class="line">      arr[j] &lt; arr[min] &amp;&amp; (min = j);</span><br><span class="line">    &#125;</span><br><span class="line">    min != i &amp;&amp; swap(i,min,arr);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>快速排序</title>
      <link href="/2018/05/19/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
      <url>/2018/05/19/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p>快速排序（Quicksort）是对冒泡排序的一种改进。<br>快速排序的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</p><p>一趟快速排序的算法是：<br>（1）在数据集之中，选择一个元素作为”基准”（pivot）。<br>（2）所有小于”基准”的元素，都移到”基准”的左边；所有大于”基准”的元素，都移到”基准”的右边。<br>（3）对”基准”左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。</p><p>最佳情况：T(n) = O(nlogn)<br>最差情况：T(n) = O(n2)<br>平均情况：T(n) = O(nlogn)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> quickSort = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) &#123; <span class="keyword">return</span> arr; &#125;</span><br><span class="line">  <span class="keyword">let</span> pivotIndex = arr.length &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(pivotIndex);</span><br><span class="line">  <span class="keyword">let</span> pivot = arr.splice(pivotIndex, <span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">let</span> left = [];</span><br><span class="line">  <span class="keyword">let</span> right = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; pivot) &#123;</span><br><span class="line">      left.push(arr[i]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      right.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> quickSort(left).concat([pivot], quickSort(right));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>冒泡排序</title>
      <link href="/2018/05/19/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
      <url>/2018/05/19/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p>冒泡排序（Bubble Sort），是一种计算机科学领域的较简单的排序算法。<br>它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。</p><p>冒泡排序算法的运作如下：（从后往前）<br>比较相邻的元素。如果第一个比第二个大，就交换他们两个。<br>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。<br>针对所有的元素重复以上的步骤，除了最后一个。<br>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。 </p><p>时间复杂度：<br>冒泡排序最好的时间复杂度为O(n)。<br>冒泡排序的最坏时间复杂度为O(n^2)。<br>冒泡排序总的平均时间复杂度为O(n^2)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bubbleSort = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> len = arr.length;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - j; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = arr[j+<span class="number">1</span>];</span><br><span class="line">        arr[j+<span class="number">1</span>] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ajax实现</title>
      <link href="/2018/05/16/ajax%E5%AE%9E%E7%8E%B0/"/>
      <url>/2018/05/16/ajax%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p>Q1: 何谓ajax，它有何优点？<br>A1:AJAX = 异步 JavaScript 和 XML。AJAX 是一种用于创建快速动态网页的技术。通过在后台与服务器进行少量数据    交换，AJAX 可以使网页实现异步更新</p><p>Q2:ajax 如何实现？<br>A2:<br>步骤：(1)创建XMLHttpRequest对象,也就是创建一个异步调用对象.<br>     (2)创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息.<br>     (3)设置响应HTTP请求状态变化的函数.<br>     (4)发送HTTP请求.<br>     (5)获取异步调用返回的数据.<br>     (6)使用JavaScript和DOM实现局部刷新.</p><p>  代码实现：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>AJAX实例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined">    </span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> xmlHttpRequest;  <span class="comment">//定义一个变量用于存放XMLHttpRequest对象</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//定义一个用于创建XMLHttpRequest对象的函数</span></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">createXMLHttpRequest</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(<span class="built_in">window</span>.ActiveXObject)&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//IE浏览器的创建方式</span></span></span><br><span class="line"><span class="javascript">          xmlHttpRequest = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span></span><br><span class="line"><span class="javascript">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(windew.XMLHttpRequest)&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//Netscape浏览器中的创建方式</span></span></span><br><span class="line"><span class="javascript">          xmlHttpRequest = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//响应HTTP请求状态变化的函数</span></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">httpStateChange</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//判断异步调用是否完成</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(xmlHttpRequest.readyState == <span class="number">4</span>)&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//判断异步调用是否成功,如果成功开始局部更新数据</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span>(xmlHttpRequest.status == <span class="number">200</span>||xmlHttpRequest.status == <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//查找节点</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> node = <span class="built_in">document</span>.getElementById(<span class="string">"myDIv"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="comment">//更新数据</span></span></span><br><span class="line"><span class="undefined">            node.firstChild.nodeValue = xmlHttpRequest .responseText;</span></span><br><span class="line"><span class="javascript">          &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//如果异步调用未成功,弹出警告框,并显示出错信息</span></span></span><br><span class="line"><span class="javascript">            alert(<span class="string">"异步调用出错/n返回的HTTP状态码为:"</span>+xmlHttpRequest.status + <span class="string">"/n返回的HTTP状态信息为:"</span> + xmlHttpRequest.statusText);</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//异步调用服务器段数据</span></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">name,value</span>)</span>&#123;                   </span></span><br><span class="line"><span class="javascript">        <span class="comment">//创建XMLHttpRequest对象</span></span></span><br><span class="line"><span class="undefined">        createXMLHttpRequest();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(xmlHttpRequest!=<span class="literal">null</span>)&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//创建HTTP请求</span></span></span><br><span class="line"><span class="javascript">          xmlHttpRequest.open(<span class="string">"get"</span>,<span class="string">"ajax.text"</span>,<span class="literal">true</span>)</span></span><br><span class="line"><span class="javascript">          <span class="comment">//设置HTTP请求状态变化的函数</span></span></span><br><span class="line"><span class="undefined">          xmlHttpRequest.onreadystatechange = httpStateChange;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//发送请求</span></span></span><br><span class="line"><span class="javascript">          xmlHttpRequest.send(<span class="literal">null</span>);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myDiv"</span>&gt;</span>原数据<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">"button"</span> <span class="attr">value</span> = <span class="string">"更新数据"</span> <span class="attr">onclick</span> = <span class="string">"getData()"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Demo练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>跨域问题探究</title>
      <link href="/2018/05/15/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E6%8E%A2%E7%A9%B6/"/>
      <url>/2018/05/15/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E6%8E%A2%E7%A9%B6/</url>
      <content type="html"><![CDATA[<p>Q1: 什么是跨域？<br>A1: 一个域上加载的脚本获取或操作另一个域上的文档属性，是指a页面想获取b页面资源，如果a、b页面的协议、域名、端口、子域名不同，或是a页面为ip地址，b页面为域名地址，所进行的访问行动都是跨域的。而浏览器为了安全问题一般都限制了跨域访问，也就是不允许跨域请求资源。</p><p>Q2: 怎么算跨域？<br>A2: </p><table><thead><tr><th>Uri</th><th style="text-align:center">说明</th><th style="text-align:center">是否跨域 </th></tr></thead><tbody><tr><td><a href="http://www.cnblogs.com/a.js" target="_blank" rel="noopener">http://www.cnblogs.com/a.js</a> <br><a href="http://www.a.com/b.js" target="_blank" rel="noopener">http://www.a.com/b.js</a></td><td style="text-align:center">不同域名</td><td style="text-align:center">是</td></tr><tr><td><a href="http://www.a.com/lab/a.js" target="_blank" rel="noopener">http://www.a.com/lab/a.js</a> <br><a href="http://www.a.com/script/b.js" target="_blank" rel="noopener">http://www.a.com/script/b.js</a></td><td style="text-align:center">同域名下不同文件</td><td style="text-align:center">否</td></tr><tr><td><a href="http://www.a.com:8000/a.js" target="_blank" rel="noopener">http://www.a.com:8000/a.js</a>  <br><a href="http://www.a.com/b.js" target="_blank" rel="noopener">http://www.a.com/b.js</a></td><td style="text-align:center">同域名下不同端口</td><td style="text-align:center">是</td></tr><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a> s <br><a href="https://www.a.com/b.js" target="_blank" rel="noopener">https://www.a.com/b.js</a></td><td style="text-align:center">同域名 不同协议</td><td style="text-align:center">是</td></tr><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a>  <br><a href="http://70.32.92.74/b.jss" target="_blank" rel="noopener">http://70.32.92.74/b.jss</a></td><td style="text-align:center">域名和域名对应ip</td><td style="text-align:center">是</td></tr><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a>  <br><a href="http://script.a.com/b.js" target="_blank" rel="noopener">http://script.a.com/b.js</a></td><td style="text-align:center">主域名相同 子域名不同</td><td style="text-align:center">是（cookie不可访问）</td></tr><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a> <br><a href="http://a.com/b.js" target="_blank" rel="noopener">http://a.com/b.js</a></td><td style="text-align:center">同一域名，不同二级域名（同上）</td><td style="text-align:center">是</td></tr></tbody></table><p>Q3: 什么是浏览器的同源策略？<br>A3: 计算机的本地与Web是不同的层面，Web世界（通常称为Internet域）运行在浏览器上，而被限制了直接进行本地数据（通常称为本地域）的读写。同源策略是众多安全策略的一个，是Web层面上的策略，同源策略规定：不同域的客户端脚本在没明确授权的情况下，不能读写对方的资源。</p><p>Q4: 怎么解决跨域？<br>A4: 有那么几种方法可以来解决跨域：<br>1、Jsonp 需要目标服务器配合一个callback函数，但是注意JSONP只支持GET请求，不支持POST请求。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined">  </span></span><br><span class="line"><span class="javascript">  $.ajax(&#123;  </span></span><br><span class="line"><span class="undefined">    url: api.testURI,  </span></span><br><span class="line"><span class="javascript">    dataType:<span class="string">'jsonp'</span>,  </span></span><br><span class="line"><span class="javascript">    data:<span class="string">''</span>,  </span></span><br><span class="line"><span class="javascript">    jsonp:<span class="string">'callback'</span>,  </span></span><br><span class="line"><span class="javascript">    success:<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> result) &#123;  </span></span><br><span class="line"><span class="javascript">        alert(i+<span class="string">":"</span>+result[i]);<span class="comment">//循环输出a:1,b:2,etc.  </span></span></span><br><span class="line"><span class="undefined">      &#125;  </span></span><br><span class="line"><span class="undefined">    &#125;,  </span></span><br><span class="line"><span class="undefined">    timeout:3000  </span></span><br><span class="line"><span class="undefined">  &#125;);  </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、通过修改document.domain来跨子域<br>将子域和主域的document.domain设为同一个主域.前提条件：这两个域名必须属于同一个基础域名!而且所用的协议，端口都要一致，否则无法利用document.domain进行跨域。主域相同的使用document.domain</p><p>3、使用window.name来进行跨域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.name = data; </span><br><span class="line"><span class="comment">//接着，子窗口跳回一个与主窗口同域的网址。 </span></span><br><span class="line">location = <span class="string">'http://parent.url.com/xxx.html'</span>; </span><br><span class="line"><span class="comment">//然后，主窗口就可以读取子窗口的window.name了 </span></span><br><span class="line"><span class="keyword">var</span> data = <span class="built_in">document</span>.getElementById(<span class="string">'iframe'</span>).contentWindow.name;</span><br></pre></td></tr></table></figure><p>4、通过CORS解决AJAX跨域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  $.ajax(&#123;</span><br><span class="line">    url: api.testURI,</span><br><span class="line">    type: <span class="string">"get"</span>,</span><br><span class="line">    <span class="keyword">async</span>: <span class="literal">false</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">      <span class="string">"id"</span>:<span class="number">1</span> </span><br><span class="line">    &#125;,</span><br><span class="line">    dataType:<span class="string">"json"</span>,</span><br><span class="line">    withCredentials:<span class="literal">true</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">      alert(data);</span><br><span class="line">      alert(data.code);</span><br><span class="line">    &#125;,</span><br><span class="line">    error: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      alert(<span class="string">'fail'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.服务器设置Access-Control-Allow-Origin实现跨域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.all(<span class="string">"*"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> host = req.headers.origin;</span><br><span class="line">  res.header(<span class="string">'Access-Control-Allow-Origin'</span>, host)</span><br><span class="line">  <span class="comment">//res.header('Access-Control-Allow-Origin', *)</span></span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>webpack 配置理解</title>
      <link href="/2018/05/15/webpack-%E9%85%8D%E7%BD%AE%E7%90%86%E8%A7%A3/"/>
      <url>/2018/05/15/webpack-%E9%85%8D%E7%BD%AE%E7%90%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle。</p><p>webpack 4 虽然已经不需要引入一个配置文件。但是，webpack在实际的应用中还是会配置很多东西。<br>下面就是对webpack的配置分析：<br>从webpack文档中找出路配置，进行了分析</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">"production"</span>, <span class="comment">// "production" | "development" | "none"</span></span><br><span class="line">  <span class="comment">// webpack有三种模式：生产模式，开发模式，none；选择模式告诉webpack相应地使用其内置优化。</span></span><br><span class="line"></span><br><span class="line">  entry: <span class="string">"./app/entry"</span>, <span class="comment">// string | object | array</span></span><br><span class="line">  <span class="comment">// webpack的入口文件，这里应用程序开始执行</span></span><br><span class="line">  <span class="comment">// webpack 开始打包</span></span><br><span class="line"></span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">// webpack 如何输出结果的相关选项</span></span><br><span class="line"></span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"dist"</span>), <span class="comment">// string</span></span><br><span class="line">    <span class="comment">// 所有输出文件的目标路径</span></span><br><span class="line">    <span class="comment">// 必须是绝对路径（使用 Node.js 的 path 模块）</span></span><br><span class="line"></span><br><span class="line">    filename: <span class="string">"bundle.js"</span>, <span class="comment">// string</span></span><br><span class="line">    <span class="comment">// 「入口分块(entry chunk)」的文件名模板（出口分块？）</span></span><br><span class="line"></span><br><span class="line">    publicPath: <span class="string">"/assets/"</span>, <span class="comment">// string</span></span><br><span class="line">    <span class="comment">// 输出解析文件的目录，url 相对于 HTML 页面</span></span><br><span class="line"></span><br><span class="line">    library: <span class="string">"MyLibrary"</span>, <span class="comment">// string,</span></span><br><span class="line">    <span class="comment">// 导出库(exported library)的名称</span></span><br><span class="line"></span><br><span class="line">    libraryTarget: <span class="string">"umd"</span>, <span class="comment">// 通用模块定义</span></span><br><span class="line">    <span class="comment">// 导出库(exported library)的类型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 高级输出配置 */</span></span><br><span class="line"></span><br><span class="line">    pathinfo: <span class="literal">true</span>, <span class="comment">// boolean</span></span><br><span class="line">    <span class="comment">// 在生成代码时，引入相关的模块、导出、请求等有帮助的路径信息。</span></span><br><span class="line"></span><br><span class="line">    chunkFilename: <span class="string">"[id].js"</span>,</span><br><span class="line">    chunkFilename: <span class="string">"[chunkhash].js"</span>, <span class="comment">// 长效缓存(/guides/caching)</span></span><br><span class="line">    <span class="comment">// 「附加分块(additional chunk)」的文件名模板</span></span><br><span class="line"></span><br><span class="line">    jsonpFunction: <span class="string">"myWebpackJsonp"</span>, <span class="comment">// string</span></span><br><span class="line">    <span class="comment">// 用于加载分块的 JSONP 函数名</span></span><br><span class="line"></span><br><span class="line">    sourceMapFilename: <span class="string">"[file].map"</span>, <span class="comment">// string</span></span><br><span class="line">    sourceMapFilename: <span class="string">"sourcemaps/[file].map"</span>, <span class="comment">// string</span></span><br><span class="line">    <span class="comment">// 「source map 位置」的文件名模板</span></span><br><span class="line"></span><br><span class="line">    devtoolModuleFilenameTemplate: <span class="string">"webpack:///[resource-path]"</span>, <span class="comment">// string</span></span><br><span class="line">    <span class="comment">// 「devtool 中模块」的文件名模板</span></span><br><span class="line"></span><br><span class="line">    devtoolFallbackModuleFilenameTemplate: <span class="string">"webpack:///[resource-path]?[hash]"</span>, <span class="comment">// string</span></span><br><span class="line">    <span class="comment">// 「devtool 中模块」的文件名模板（用于冲突）</span></span><br><span class="line"></span><br><span class="line">    umdNamedDefine: <span class="literal">true</span>, <span class="comment">// boolean</span></span><br><span class="line">    <span class="comment">// 在 UMD 库中使用命名的 AMD 模块</span></span><br><span class="line"></span><br><span class="line">    crossOriginLoading: <span class="string">"use-credentials"</span>, <span class="comment">// 枚举</span></span><br><span class="line">    crossOriginLoading: <span class="string">"anonymous"</span>,</span><br><span class="line">    crossOriginLoading: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 指定运行时如何发出跨域请求问题</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 专家级输出配置（自行承担风险） */</span></span><br><span class="line"></span><br><span class="line">    devtoolLineToLine: &#123;</span><br><span class="line">      test: <span class="regexp">/\.jsx$/</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 为这些模块使用 1:1 映射 SourceMaps（快速）</span></span><br><span class="line"></span><br><span class="line">    hotUpdateMainFilename: <span class="string">"[hash].hot-update.json"</span>, <span class="comment">// string</span></span><br><span class="line">    <span class="comment">// 「HMR 清单」的文件名模板</span></span><br><span class="line"></span><br><span class="line">    hotUpdateChunkFilename: <span class="string">"[id].[hash].hot-update.js"</span>, <span class="comment">// string</span></span><br><span class="line">    <span class="comment">// 「HMR 分块」的文件名模板</span></span><br><span class="line"></span><br><span class="line">    sourcePrefix: <span class="string">"\t"</span>, <span class="comment">// string</span></span><br><span class="line">    <span class="comment">// 包内前置式模块资源具有更好可读性</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    <span class="comment">// 关于模块配置</span></span><br><span class="line"></span><br><span class="line">    rules: [</span><br><span class="line">      <span class="comment">// 模块规则（配置 loader、解析器等选项）</span></span><br><span class="line"></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.jsx?$/</span>,</span><br><span class="line">        include: [</span><br><span class="line">          path.resolve(__dirname, <span class="string">"app"</span>)</span><br><span class="line">        ],</span><br><span class="line">        exclude: [</span><br><span class="line">          path.resolve(__dirname, <span class="string">"app/demo-files"</span>)</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">// 这里是匹配条件，每个选项都接收一个正则表达式或字符串</span></span><br><span class="line">        <span class="comment">// test 和 include 具有相同的作用，都是必须匹配选项</span></span><br><span class="line">        <span class="comment">// exclude 是必不匹配选项（优先于 test 和 include）</span></span><br><span class="line">        <span class="comment">// 最佳实践：</span></span><br><span class="line">        <span class="comment">// - 只在 test 和 文件名匹配 中使用正则表达式</span></span><br><span class="line">        <span class="comment">// - 在 include 和 exclude 中使用绝对路径数组</span></span><br><span class="line">        <span class="comment">// - 尽量避免 exclude，更倾向于使用 include</span></span><br><span class="line"></span><br><span class="line">        issuer: &#123; test, include, exclude &#125;,</span><br><span class="line">        <span class="comment">// issuer 条件（导入源）</span></span><br><span class="line"></span><br><span class="line">        enforce: <span class="string">"pre"</span>,</span><br><span class="line">        enforce: <span class="string">"post"</span>,</span><br><span class="line">        <span class="comment">// 标识应用这些规则，即使规则覆盖（高级选项）</span></span><br><span class="line"></span><br><span class="line">        loader: <span class="string">"babel-loader"</span>,</span><br><span class="line">        <span class="comment">// 应该应用的 loader，它相对上下文解析</span></span><br><span class="line">        <span class="comment">// 为了更清晰，`-loader` 后缀在 webpack 2 中不再是可选的</span></span><br><span class="line">        <span class="comment">// 查看 webpack 1 升级指南。</span></span><br><span class="line"></span><br><span class="line">        options: &#123;</span><br><span class="line">          presets: [<span class="string">"es2015"</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// loader 的可选项</span></span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">        test: <span class="string">"\.html$"</span></span><br><span class="line"></span><br><span class="line">        use: [</span><br><span class="line">          <span class="comment">// 应用多个 loader 和选项</span></span><br><span class="line">          <span class="string">"htmllint-loader"</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">"html-loader"</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              <span class="comment">/* ... */</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      &#123; <span class="attr">oneOf</span>: [ <span class="comment">/* rules */</span> ] &#125;,</span><br><span class="line">      <span class="comment">// 只使用这些嵌套规则之一</span></span><br><span class="line"></span><br><span class="line">      &#123; <span class="attr">rules</span>: [ <span class="comment">/* rules */</span> ] &#125;,</span><br><span class="line">      <span class="comment">// 使用所有这些嵌套规则（合并可用条件）</span></span><br><span class="line"></span><br><span class="line">      &#123; <span class="attr">resource</span>: &#123; <span class="attr">and</span>: [ <span class="comment">/* 条件 */</span> ] &#125; &#125;,</span><br><span class="line">      <span class="comment">// 仅当所有条件都匹配时才匹配</span></span><br><span class="line"></span><br><span class="line">      &#123; <span class="attr">resource</span>: &#123; <span class="attr">or</span>: [ <span class="comment">/* 条件 */</span> ] &#125; &#125;,</span><br><span class="line">      &#123; <span class="attr">resource</span>: [ <span class="comment">/* 条件 */</span> ] &#125;,</span><br><span class="line">      <span class="comment">// 任意条件匹配时匹配（默认为数组）</span></span><br><span class="line"></span><br><span class="line">      &#123; <span class="attr">resource</span>: &#123; <span class="attr">not</span>: <span class="comment">/* 条件 */</span> &#125; &#125;</span><br><span class="line">      <span class="comment">// 条件不匹配时匹配</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 高级模块配置（点击展示） */</span></span><br><span class="line"></span><br><span class="line">     noParse: [</span><br><span class="line">      /special-library\.js$/</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 不解析这里的模块</span></span><br><span class="line"></span><br><span class="line">    unknownContextRequest: <span class="string">"."</span>,</span><br><span class="line">    unknownContextRecursive: <span class="literal">true</span>,</span><br><span class="line">    unknownContextRegExp: <span class="regexp">/^\.\/.*$/</span>,</span><br><span class="line">    unknownContextCritical: <span class="literal">true</span>,</span><br><span class="line">    exprContextRequest: <span class="string">"."</span>,</span><br><span class="line">    exprContextRegExp: <span class="regexp">/^\.\/.*$/</span>,</span><br><span class="line">    exprContextRecursive: <span class="literal">true</span>,</span><br><span class="line">    exprContextCritical: <span class="literal">true</span>,</span><br><span class="line">    wrappedContextRegExp: <span class="regexp">/.*/</span>,</span><br><span class="line">    wrappedContextRecursive: <span class="literal">true</span>,</span><br><span class="line">    wrappedContextCritical: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 指定动态请求的默认行为</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  resolve: &#123;</span><br><span class="line">    <span class="comment">// 解析模块请求的选项</span></span><br><span class="line">    <span class="comment">// （不适用于对 loader 解析）</span></span><br><span class="line"></span><br><span class="line">    modules: [</span><br><span class="line">      <span class="string">"node_modules"</span>,</span><br><span class="line">      path.resolve(__dirname, <span class="string">"app"</span>)</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 用于查找模块的目录</span></span><br><span class="line"></span><br><span class="line">    extensions: [<span class="string">".js"</span>, <span class="string">".json"</span>, <span class="string">".jsx"</span>, <span class="string">".css"</span>],</span><br><span class="line">    <span class="comment">// 使用的扩展名</span></span><br><span class="line"></span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="comment">// 模块别名列表</span></span><br><span class="line"></span><br><span class="line">      <span class="string">"module"</span>: <span class="string">"new-module"</span>,</span><br><span class="line">      <span class="comment">// 起别名："module" -&gt; "new-module" 和 "module/path/file" -&gt; "new-module/path/file"</span></span><br><span class="line"></span><br><span class="line">      <span class="string">"only-module$"</span>: <span class="string">"new-module"</span>,</span><br><span class="line">      <span class="comment">// 起别名 "only-module" -&gt; "new-module"，但不匹配 "only-module/path/file" -&gt; "new-module/path/file"</span></span><br><span class="line"></span><br><span class="line">      <span class="string">"module"</span>: path.resolve(__dirname, <span class="string">"app/third/module.js"</span>),</span><br><span class="line">      <span class="comment">// 起别名 "module" -&gt; "./app/third/module.js" 和 "module/file" 会导致错误</span></span><br><span class="line">      <span class="comment">// 模块别名相对于当前上下文导入</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/* 可供选择的别名语法（点击展示） */</span></span><br><span class="line">  alias: [</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">"module"</span>,</span><br><span class="line">        <span class="comment">// 旧的请求</span></span><br><span class="line"></span><br><span class="line">        alias: <span class="string">"new-module"</span>,</span><br><span class="line">        <span class="comment">// 新的请求</span></span><br><span class="line"></span><br><span class="line">        onlyModule: <span class="literal">true</span></span><br><span class="line">        <span class="comment">// 如果为 true，只有 "module" 是别名</span></span><br><span class="line">        <span class="comment">// 如果为 false，"module/inner/path" 也是别名</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 高级解析选项（点击展示） */</span></span><br><span class="line"></span><br><span class="line">    symlinks: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 遵循符号链接(symlinks)到新位置</span></span><br><span class="line"></span><br><span class="line">    descriptionFiles: [<span class="string">"package.json"</span>],</span><br><span class="line">    <span class="comment">// 从 package 描述中读取的文件</span></span><br><span class="line"></span><br><span class="line">    mainFields: [<span class="string">"main"</span>],</span><br><span class="line">    <span class="comment">// 从描述文件中读取的属性</span></span><br><span class="line">    <span class="comment">// 当请求文件夹时</span></span><br><span class="line"></span><br><span class="line">    aliasFields: [<span class="string">"browser"</span>],</span><br><span class="line">    <span class="comment">// 从描述文件中读取的属性</span></span><br><span class="line">    <span class="comment">// 以对此 package 的请求起别名</span></span><br><span class="line"></span><br><span class="line">    enforceExtension: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 如果为 true，请求必不包括扩展名</span></span><br><span class="line">    <span class="comment">// 如果为 false，请求可以包括扩展名</span></span><br><span class="line"></span><br><span class="line">    moduleExtensions: [<span class="string">"-module"</span>],</span><br><span class="line">    enforceModuleExtension: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 类似 extensions/enforceExtension，但是用模块名替换文件</span></span><br><span class="line"></span><br><span class="line">    unsafeCache: <span class="literal">true</span>,</span><br><span class="line">    unsafeCache: &#123;&#125;,</span><br><span class="line">    <span class="comment">// 为解析的请求启用缓存</span></span><br><span class="line">    <span class="comment">// 这是不安全，因为文件夹结构可能会改动</span></span><br><span class="line">    <span class="comment">// 但是性能改善是很大的</span></span><br><span class="line"></span><br><span class="line">    cachePredicate: <span class="function">(<span class="params">path, request</span>) =&gt;</span> <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 用于选择缓存请求的谓词函数</span></span><br><span class="line"></span><br><span class="line">    plugins: [</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    ]</span><br><span class="line">    <span class="comment">// 应用于解析器的附加插件</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  performance: &#123;</span><br><span class="line">    hints: <span class="string">"warning"</span>, <span class="comment">//  or "error" or false</span></span><br><span class="line">    maxAssetSize: <span class="number">200000</span>, <span class="comment">// 整数类型（以字节为单位）</span></span><br><span class="line">    maxEntrypointSize: <span class="number">400000</span>, <span class="comment">// 整数类型（以字节为单位）</span></span><br><span class="line">    assetFilter: <span class="function"><span class="keyword">function</span>(<span class="params">assetFilename</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 提供资源文件名的断言函数</span></span><br><span class="line">      <span class="keyword">return</span> assetFilename.endsWith(<span class="string">'.css'</span>) || assetFilename.endsWith(<span class="string">'.js'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">   devtool: <span class="string">"source-map"</span>, <span class="comment">// </span></span><br><span class="line">  <span class="comment">// devtool: "inline-source-map", // 嵌入到源文件中</span></span><br><span class="line">  <span class="comment">// devtool: "eval-source-map", // 将 SourceMap 嵌入到每个模块中</span></span><br><span class="line">  <span class="comment">// devtool: "hidden-source-map", // SourceMap 不在源文件中引用</span></span><br><span class="line">  <span class="comment">// devtool: "cheap-source-map", // 没有模块映射(module mappings)的 SourceMap 低级变体(cheap-variant)</span></span><br><span class="line">  <span class="comment">// devtool: "cheap-module-source-map", // 有模块映射(module mappings)的 SourceMap 低级变体</span></span><br><span class="line">  <span class="comment">// devtool: "eval", // 没有模块映射，而是命名模块。以牺牲细节达到最快。</span></span><br><span class="line">  <span class="comment">// 通过在浏览器调试工具(browser devtools)中添加元信息(meta info)增强调试</span></span><br><span class="line">  <span class="comment">// 牺牲了构建速度的 `source-map' 是最详细的。</span></span><br><span class="line"></span><br><span class="line">  context: __dirname, <span class="comment">// string（绝对路径！）</span></span><br><span class="line">  <span class="comment">// webpack 的主目录</span></span><br><span class="line">  <span class="comment">// entry 和 module.rules.loader 选项</span></span><br><span class="line">  <span class="comment">// 相对于此目录解析</span></span><br><span class="line"></span><br><span class="line">  target: <span class="string">"web"</span>, <span class="comment">// 默认</span></span><br><span class="line">  <span class="comment">// 包(bundle)应该运行的环境</span></span><br><span class="line">  <span class="comment">// 更改 块加载行为(chunk loading behavior) 和 可用模块(available module)</span></span><br><span class="line"></span><br><span class="line">  externals: [<span class="string">"react"</span>, /^@angular\<span class="comment">//],</span></span><br><span class="line">  <span class="comment">// 不要遵循/打包这些模块，而是在运行时从环境中请求他们</span></span><br><span class="line"></span><br><span class="line">  stats: <span class="string">"errors-only"</span>,</span><br><span class="line">  <span class="comment">// 精确控制要显示的 bundle 信息</span></span><br><span class="line"></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    proxy: &#123; <span class="comment">// 代理URL到后端开发服务器</span></span><br><span class="line">      <span class="string">'/api'</span>: <span class="string">'http://localhost:3000'</span></span><br><span class="line">      auth: <span class="literal">false</span> <span class="comment">//授权</span></span><br><span class="line">      changeOrigin: <span class="literal">true</span> <span class="comment">//跨域</span></span><br><span class="line">    &#125;,</span><br><span class="line">    contentBase: path.join(__dirname, <span class="string">'public'</span>), <span class="comment">// boolean | string | array, 静态文件位置</span></span><br><span class="line">    compress: <span class="literal">true</span>, <span class="comment">// 启用gzip压缩</span></span><br><span class="line">    historyApiFallback: <span class="literal">true</span>, <span class="comment">// 提供重定向响应 404 -- 如果使用 </span></span><br><span class="line">    hot: <span class="literal">true</span>, <span class="comment">// 热加载</span></span><br><span class="line">    https: <span class="literal">false</span>, <span class="comment">// 是否是https</span></span><br><span class="line">    noInfo: <span class="literal">true</span>, <span class="comment">// 只有错误并警告热重新加载</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 附加插件列表</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 高级配置（点击展示） */</span></span><br><span class="line"></span><br><span class="line">  resolveLoader: &#123; <span class="comment">/* 等同于 resolve */</span> &#125;</span><br><span class="line">  <span class="comment">// 独立解析选项的 loader</span></span><br><span class="line"></span><br><span class="line">  parallelism: <span class="number">1</span>, <span class="comment">// number</span></span><br><span class="line">  <span class="comment">// 限制并行处理模块的数量</span></span><br><span class="line"></span><br><span class="line">  profile: <span class="literal">true</span>, <span class="comment">// boolean</span></span><br><span class="line">  <span class="comment">// 捕获时机信息</span></span><br><span class="line"></span><br><span class="line">  bail: <span class="literal">true</span>, <span class="comment">//boolean</span></span><br><span class="line">  <span class="comment">// 在第一个错误出错时抛出，而不是无视错误。</span></span><br><span class="line"></span><br><span class="line">  cache: <span class="literal">false</span>, <span class="comment">// boolean</span></span><br><span class="line">  <span class="comment">// 禁用/启用缓存</span></span><br><span class="line"></span><br><span class="line">  watch: <span class="literal">true</span>, <span class="comment">// boolean</span></span><br><span class="line">  <span class="comment">// 启用观察</span></span><br><span class="line"></span><br><span class="line">  watchOptions: &#123;</span><br><span class="line">    aggregateTimeout: <span class="number">1000</span>, <span class="comment">// in ms</span></span><br><span class="line">    <span class="comment">// 将多个更改聚合到单个重构建(rebuild)</span></span><br><span class="line"></span><br><span class="line">    poll: <span class="literal">true</span>,</span><br><span class="line">    poll: <span class="number">500</span>, <span class="comment">// 间隔单位 ms</span></span><br><span class="line">    <span class="comment">// 启用轮询观察模式</span></span><br><span class="line">    <span class="comment">// 必须用在不通知更改的文件系统中</span></span><br><span class="line">    <span class="comment">// 即 nfs shares（译者注：Network FileSystem，最大的功能就是可以透過網路，讓不同的機器、不同的作業系統、可以彼此分享個別的檔案 ( share file )）</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  node: &#123;</span><br><span class="line">    <span class="comment">// 在非node环境下填充或模拟运行node环境</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>: <span class="literal">false</span>, <span class="comment">// boolean | "mock"</span></span><br><span class="line">    global: <span class="literal">true</span>, <span class="comment">// boolean | "mock"</span></span><br><span class="line">    process: <span class="literal">true</span>, <span class="comment">// boolean</span></span><br><span class="line">    __filename: <span class="string">"mock"</span>, <span class="comment">// boolean | "mock"</span></span><br><span class="line">    __dirname: <span class="string">"mock"</span>, <span class="comment">// boolean | "mock"</span></span><br><span class="line">    Buffer: <span class="literal">true</span>, <span class="comment">// boolean | "mock"</span></span><br><span class="line">    setImmediate: <span class="literal">true</span> <span class="comment">// boolean | "mock" | "empty"</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  recordsPath: path.resolve(__dirname, <span class="string">"build/records.json"</span>),</span><br><span class="line">  recordsInputPath: path.resolve(__dirname, <span class="string">"build/records.json"</span>),</span><br><span class="line">  recordsOutputPath: path.resolve(__dirname, <span class="string">"build/records.json"</span>),</span><br><span class="line">  <span class="comment">// TODO</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Webpack 的工作流<br>从 context 文件夹开始（框架内没有配置，那就默认为 ‘’）<br>查找 entry 对应的文件<br>(找到文件之后) 读取文件内容. 每当遇到 import (ES6) 或者 require() (Node) 依赖项时, 它会解析这些代码, 并且打包到最终构建里. 接着它会不断递归搜索实际需要的依赖项, 直到它到达了“树”的底部<br>递归完所有依赖之后, Webpack 会将所有东西打包到 output.path 对应的目录, 并将 output.filename 的值作为最终的资源名 ([name] 表示使用 entry 项的 key)</p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在页面中获取图片的尺寸</title>
      <link href="/2018/05/14/%E5%9C%A8%E9%A1%B5%E9%9D%A2%E4%B8%AD%E8%8E%B7%E5%8F%96%E5%9B%BE%E7%89%87%E7%9A%84%E5%B0%BA%E5%AF%B8/"/>
      <url>/2018/05/14/%E5%9C%A8%E9%A1%B5%E9%9D%A2%E4%B8%AD%E8%8E%B7%E5%8F%96%E5%9B%BE%E7%89%87%E7%9A%84%E5%B0%BA%E5%AF%B8/</url>
      <content type="html"><![CDATA[<p>在js中写了获取图片的高度，却发现高度都是0.<br>这是因为js运行的时候，图片还没有加载好<br>所以在获取图片高度的时候，要用window.onload<br>在图片都加载好了之后获取就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> imgHeight = $(<span class="string">".bgImg"</span>).height()</span><br><span class="line">  <span class="built_in">console</span>.log(imgHeight);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> bug汇总 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jquery监控浏览器大小变化</title>
      <link href="/2018/05/14/jquery%E7%9B%91%E6%8E%A7%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%A7%E5%B0%8F%E5%8F%98%E5%8C%96/"/>
      <url>/2018/05/14/jquery%E7%9B%91%E6%8E%A7%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%A7%E5%B0%8F%E5%8F%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> screenWidth = <span class="built_in">window</span>.screen.width;</span><br><span class="line"></span><br><span class="line">$(<span class="built_in">window</span>).resize(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//当浏览器大小变化时</span></span><br><span class="line">  <span class="keyword">if</span>($(<span class="built_in">window</span>).width()!== screenWidth)&#123;</span><br><span class="line">    <span class="comment">//history.go(0)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//监控浏览器旋转</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">orientationChange</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (<span class="built_in">window</span>.orientation) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">      <span class="comment">//history.go(0)</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">-90</span>:</span><br><span class="line">      <span class="comment">//history.go(0)</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">90</span>:</span><br><span class="line">     <span class="comment">// history.go(0)</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">180</span>:</span><br><span class="line">      <span class="comment">//history.go(0)</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'orientationchange'</span>, orientationChange);</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Demo练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jquery </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设置overflow：hidden导致相邻行内元素向下偏移的问题</title>
      <link href="/2018/05/14/%E8%AE%BE%E7%BD%AEoverflow%EF%BC%9Ahidden%E5%AF%BC%E8%87%B4%E7%9B%B8%E9%82%BB%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E5%90%91%E4%B8%8B%E5%81%8F%E7%A7%BB%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2018/05/14/%E8%AE%BE%E7%BD%AEoverflow%EF%BC%9Ahidden%E5%AF%BC%E8%87%B4%E7%9B%B8%E9%82%BB%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E5%90%91%E4%B8%8B%E5%81%8F%E7%A7%BB%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* CSS */</span></span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">span</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>:inline-block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">span</span><span class="selector-pseudo">:nth(0)</span>&#123;</span><br><span class="line">  <span class="attribute">overflow</span>:hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样设置之后，后面的两个span会向下偏移一定距离<br>实际上就是inline-block元素的默认baseline和其下外边沿的距离。<br>常用的解决方法是为上述inline-block元素添加vertical-align: bottom。</p>]]></content>
      
      <categories>
          
          <category> bug汇总 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何去掉两个span间的间距</title>
      <link href="/2018/05/14/%E5%A6%82%E4%BD%95%E5%8E%BB%E6%8E%89%E4%B8%A4%E4%B8%AAspan%E9%97%B4%E7%9A%84%E9%97%B4%E8%B7%9D/"/>
      <url>/2018/05/14/%E5%A6%82%E4%BD%95%E5%8E%BB%E6%8E%89%E4%B8%A4%E4%B8%AAspan%E9%97%B4%E7%9A%84%E9%97%B4%E8%B7%9D/</url>
      <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* CSS */</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    font-size：10px；</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">span</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置成块级元素的span，会因为父元素设置字体的大小，导致两个span外的空格会占有空隙。<br>所以将父元素的font-size：0；<br>然后再单独设置span的字体大小就可以解决这个问题。</p>]]></content>
      
      <categories>
          
          <category> bug汇总 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jquery对追加事件的绑定</title>
      <link href="/2018/05/14/jquery%E5%AF%B9%E8%BF%BD%E5%8A%A0%E4%BA%8B%E4%BB%B6%E7%9A%84%E7%BB%91%E5%AE%9A/"/>
      <url>/2018/05/14/jquery%E5%AF%B9%E8%BF%BD%E5%8A%A0%E4%BA%8B%E4%BB%B6%E7%9A%84%E7%BB%91%E5%AE%9A/</url>
      <content type="html"><![CDATA[<p>写项目的时候又用到了jquery，突然发现，对于用jquery追加的元素，on方法绑定不能用。</p><p>发现：<br>on要原始存在才绑定上，否则要用delegate来动态绑定<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).delegate(<span class="string">'selecter'</span>,<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert(<span class="keyword">this</span>.innerHTML) &#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> bug汇总 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Jquery </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS中position属性总结笔记</title>
      <link href="/2018/05/14/CSS%E4%B8%ADposition%E5%B1%9E%E6%80%A7%E6%80%BB%E7%BB%93%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/05/14/CSS%E4%B8%ADposition%E5%B1%9E%E6%80%A7%E6%80%BB%E7%BB%93%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>写了好多的position，一直在用它们字面的意思，最近项目写到的position的问题，竟然又出问题了。。总结一下：</p><p><strong>1. positon:static; 静态定位（默认的 ）</strong><br>　　这个是默认的，写不写都会是这个定位，所有的标准文档流里面的元素都是静态定位。</p><p><strong>2. positon:relative;  相对定位</strong><br>　　相对定位不会使有该属性的元素脱离标准文档流<br>　　相对定位会在页面原始的位置占据位置，而元素的位置会根据原始的位置进行偏移。<br>　　<br>　<strong><em>相对定位的作用一般是用来给子元素的绝对定位提供参考的。</em></strong></p><p><strong>3. position:absolute;  绝对定位</strong><br>　　绝对定位会使有该属性的元素脱离标准文档流<br>　　特点：</p><pre><code>如果这个元素没有父元素，top、left、right、bottom就相对于浏览器窗口来定位如果绝对定位的元素有父元素，且父元素没有相对定位，top、left、right、bottom相对于浏览窗口来定位如果绝对定位的元素有父元素，且父元素有定位（非static），top、left、right、bottom以父元素为基础偏移绝对定位之后的元素在页面上不会占据位置</code></pre><p><strong>4. position:fixed;   固定定位</strong><br>　　固定定位会使有该属性的元素脱离标准文档流<br>　　位置不变，适用于广告或者飘窗</p><p>总结：<strong><em>写页面时，用到最多是绝对定位与相对定位一起使用，较多的是子元素使用绝对定位，父元素使用相对定位</em></strong></p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>变量的作用域和变量提升</title>
      <link href="/2018/05/14/%E5%8F%98%E9%87%8F%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87/"/>
      <url>/2018/05/14/%E5%8F%98%E9%87%8F%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87/</url>
      <content type="html"><![CDATA[<p>某家面试的时候面试题，面试官小姐姐给出了一道题：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br></pre></td></tr></table></figure></p><p>问我这三个会打印出来的值是什么？</p><p>研究一下这个变量的作用域和变量提升：</p><p><strong>一、作用域：</strong></p><p>一个变量的作用域（scope）是程序源代码中定义这个变量的区域。<br>全局变量拥有全局作用域，在javaScript代码中任何地方都有定义的。<br>然而在函数内声明的变量只是在函数内部有定义，他们是局部变量，作用域也只是在局部。</p><p><strong>在函数体内，局部变量的优先级要高于全局变量。如果在函数体内重新声明一个与局部变量重名的变量，局部变量就会覆盖全局变量的值。</strong><br>来看个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="string">"100"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scope</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> num=<span class="string">"10"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">innerScope</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> num = <span class="string">"1"</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(scope);<span class="comment">//输出：1</span></span><br><span class="line">    &#125;</span><br><span class="line">    innerScope();</span><br><span class="line">    <span class="built_in">console</span>.log(num);<span class="comment">//输出：10</span></span><br><span class="line">&#125;</span><br><span class="line">scope();</span><br><span class="line"><span class="built_in">console</span>.log(num);<span class="comment">//输出：100</span></span><br></pre></td></tr></table></figure><p>这个例子会打印三个数，分别是1，10，100；<br><strong>局部变量的作用域仅仅在函数内部，出了函数体之后，局部变量就会被销毁。</strong><br>在innerScope()函数中，虽然又声明了一个num，但是innerScope()中的num是局部变量，只是与全局变量的名字相同，并不是全局变量，所以，虽然在该函数中把num赋值为1，但这仅仅是一个与全局变量名称相同的一个变量而已，并没有改变全局变量的值。</p><p>再来看一个例子:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="string">"100"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scope</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> num=<span class="string">"10"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">innerScope</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        num = <span class="string">"1"</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(scope);<span class="comment">//输出：1</span></span><br><span class="line">    &#125;</span><br><span class="line">    innerScope();</span><br><span class="line">    <span class="built_in">console</span>.log(num);<span class="comment">//输出：1</span></span><br><span class="line">&#125;</span><br><span class="line">scope();</span><br><span class="line"><span class="built_in">console</span>.log(num);<span class="comment">//输出：100</span></span><br></pre></td></tr></table></figure><p>上面这部分代码中，在innerScope()函数中，我们并没有用var来声明num，所以，在这里的num的作用域就被提升了，即我们将scope中的num的值重置了，所以在输出的时候输出的结果为嵌套作用域内的局部变量。</p><p><strong>二、变量提升</strong></p><p><strong>在Javascript中，函数及变量的声明都将被提升到函数的最顶部。</strong><br>在js中，变量的声明会被解析器悄悄的提升到方法体的最顶部，但是需要注意的是，提升的仅仅是变量的声明，变量的赋值并不会被提升，我们需要注意的是，函数的声明与变量的声明是不一样的。函数的函数体也会被一起提升。<br><strong>函数表达式和变量表达式只是其声明被提升，函数声明是函数的声明和实现都被提升。</strong></p><p>所以上面那个题就很好理解了。<br>我们再来看一下这个题：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br></pre></td></tr></table></figure></p><ol><li>因为变量提升，a提升到最前面，声明未赋值，所以第一个就会打印undefined；</li><li>第二个在a声明之后，而且a赋值为10，所以第二个打印出来10；</li><li>第三个，因为test()是在window下调用的；this指的是test()调用的作用域，所以第三个打印100；</li></ol><p>看一个函数提升的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=<span class="string">"javascript"</span> type=<span class="string">"text/javascript"</span>&gt;    </span><br><span class="line">    <span class="comment">//在全局对象中声明两个全局函数,反模式  </span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        alert(<span class="string">"global foo"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        alert(<span class="string">"global bar"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义全局变量  </span></span><br><span class="line">    <span class="keyword">var</span> v = <span class="string">"global var"</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">hoistMe</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        alert(<span class="keyword">typeof</span> foo); <span class="comment">//function  </span></span><br><span class="line">        alert(<span class="keyword">typeof</span> bar); <span class="comment">//undefined  </span></span><br><span class="line">        alert(v); <span class="comment">//undefined  </span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//为什么bar函数和变量v是未定义而不是全局变量中定义的相应的函数变量呢？  </span></span><br><span class="line">         <span class="comment">//因为函数里面定义了同名的函数和变量，无论在函数的任何位置定义这些函数和  </span></span><br><span class="line">         <span class="comment">//和变量，它们都将被提升到函数的最顶部。  </span></span><br><span class="line"></span><br><span class="line">        foo(); <span class="comment">//local foo  </span></span><br><span class="line">        bar(); <span class="comment">//报错，TypeError "bar is not a function"</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//函数声明，变量foo以及其实现被提升到hoistMe函数顶部  </span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function">        </span>&#123;  </span><br><span class="line">            alert(<span class="string">"local foo"</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line"></span><br><span class="line">        <span class="comment">//函数表达式,仅变量bar被提升到函数顶部，实现没有被提升  </span></span><br><span class="line">        <span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function">        </span>&#123;  </span><br><span class="line">            alert(<span class="string">"local bar"</span>);  </span><br><span class="line">        &#125;;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义局部变量  </span></span><br><span class="line">         <span class="keyword">var</span> v = <span class="string">"local"</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        hoistMe();  </span><br><span class="line"></span><br><span class="line">    &#125;)();  </span><br><span class="line"></span><br><span class="line">   <span class="comment">//函数表达式和变量表达式只是其声明被提升，函数声明是函数的声明和实现都被提升。  </span></span><br><span class="line">    <span class="comment">/**由于函数提升的效果，hoistMe方法相当于 </span></span><br><span class="line"><span class="comment">    function hoistMe() </span></span><br><span class="line"><span class="comment">    &#123; </span></span><br><span class="line"><span class="comment">        //函数声明，变量foo以及其实现被提升到hoistMe函数顶部 </span></span><br><span class="line"><span class="comment">        function foo() </span></span><br><span class="line"><span class="comment">        &#123; </span></span><br><span class="line"><span class="comment">            alert("local foo"); </span></span><br><span class="line"><span class="comment">        &#125; </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         //函数表达式,仅变量bar被提升到函数顶部，实现没有被提升(同变量提升) </span></span><br><span class="line"><span class="comment">        var bar = undefined; </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //变量声明被提升 </span></span><br><span class="line"><span class="comment">         var v = undefined; </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        alert(typeof foo); //function </span></span><br><span class="line"><span class="comment">        alert(typeof bar); //undefined </span></span><br><span class="line"><span class="comment">alert(v); //undefined </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        foo(); //local foo </span></span><br><span class="line"><span class="comment">        bar(); //报错，缺少对象 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        bar = function() </span></span><br><span class="line"><span class="comment">        &#123; </span></span><br><span class="line"><span class="comment">            alert("local bar"); </span></span><br><span class="line"><span class="comment">        &#125;; </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       v = "local"; </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125; </span></span><br><span class="line"><span class="comment">    */</span>  </span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018 书单</title>
      <link href="/2018/05/14/2018-%E4%B9%A6%E5%8D%95/"/>
      <url>/2018/05/14/2018-%E4%B9%A6%E5%8D%95/</url>
      <content type="html"><![CDATA[<p>☐ 《原则》瑞·达利欧 著 中信出版社<br>✔ 《爆裂》伊藤穰一 杰夫·豪 著 中信出版社<br>☐ 《基因传》悉达多•穆克吉 著 中信出版社<br>☐ 《未来简史》尤瓦尔·赫拉利 著 中信出版社<br>☐ 《人类简史》尤瓦尔·赫拉利 著 中信出版社<br>✔ 《你的第一本哲学书》托马斯·内格尔 著 中信出版社<br>☐ 《自私的基因》理查德·道金斯 著 中信出版社<br>☐ 《不会被机器替代的人》杰夫·科尔文 著 中信出版社<br>☐ 《好好说话》马薇薇、黄执中、周玄毅等 著 中信出版社<br>☐ 《跃迁》古典 著 中信出版社<br>☐ 《智能时代》吴军  著 中信出版社<br>☐ 《细节：如何轻松影响他人》史蒂夫·马丁  诺瓦·戈尔茨坦  等 著 中信出版社<br>☐ 《向前一步》谢丽尔·桑德伯<br>✔ 《人人都是产品经理》<br>☐ 《穷爸爸富爸爸》<br>☐ 《中国经济2018》</p>]]></content>
      
      <categories>
          
          <category> 浮生小记 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>redux-devtools学习理解</title>
      <link href="/2018/05/11/redux-devtools%E5%AD%A6%E4%B9%A0%E7%90%86%E8%A7%A3/"/>
      <url>/2018/05/11/redux-devtools%E5%AD%A6%E4%B9%A0%E7%90%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p></p><h1>redux-devtools</h1><br>A live-editing time travel environment for Redux.<br>redux-devtools是一个有趣而又高效的redux开发工具，通过redux-devtools，我们可以清晰的看到当前 store 仓库中的 state 是怎么样的，在可视化工具的左边，我们还可以看到触发的action的变化。这样，使得我们开发过程中很方便地进行调试。 <p></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev redux-devtools</span><br><span class="line">npm install --save-dev redux-devtools-log-monitor</span><br><span class="line">npm install --save-dev redux-devtools-dock-monitor</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>通过createDevTools来创建<code>DevTools</code>组件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="comment">//从redux-devtools中引入createDevTools</span></span><br><span class="line"><span class="keyword">let</span> DevTools;</span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;createDevTools&#125; = <span class="built_in">require</span>(<span class="string">'redux-devtools'</span>);</span><br><span class="line">  <span class="keyword">const</span> LogMonitor = <span class="built_in">require</span>(<span class="string">'redux-devtools-log-monitor'</span>).default;</span><br><span class="line">  <span class="keyword">const</span> DockMonitor = <span class="built_in">require</span>(<span class="string">'redux-devtools-dock-monitor'</span>).default;</span><br><span class="line"></span><br><span class="line">  DevTools = createDevTools(</span><br><span class="line">    &lt;DockMonitor toggleVisibilityKey=<span class="string">"ctrl-h"</span></span><br><span class="line">                 changePositionKey=<span class="string">"ctrl-w"</span></span><br><span class="line">                 defaultIsVisible=&#123;<span class="literal">false</span>&#125;</span><br><span class="line">                 defaultPosition=<span class="string">"right"</span>&gt;</span><br><span class="line">      &lt;LogMonitor theme=<span class="string">"tomorrow"</span> preserveScrollTop=&#123;<span class="literal">false</span>&#125;/&gt;</span><br><span class="line">    &lt;<span class="regexp">/DockMonitor&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>采用DevTools.instrument()通过redux的compose来扩展store</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">configureStore</span>(<span class="params">history, reducers, initialState</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Installs hooks that always keep react-router and redux store in sync</span></span><br><span class="line">  <span class="keyword">const</span> middleware = [thunk, routerMiddleware(history)];</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123; <span class="comment">//开发环境</span></span><br><span class="line">    <span class="keyword">const</span> &#123;createLogger&#125; = <span class="built_in">require</span>(<span class="string">'redux-logger'</span>);</span><br><span class="line">    middleware.push(createLogger());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> devTools = [];</span><br><span class="line">  <span class="keyword">if</span> (DevTools &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">document</span> !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    devTools = [DevTools.instrument()]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> store = createStore(</span><br><span class="line">    reducers,</span><br><span class="line">    initialState,</span><br><span class="line">    compose(</span><br><span class="line">      applyMiddleware(...middleware),</span><br><span class="line">      ...devTools</span><br><span class="line">    ));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> store;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用createDevTools()创建的DevTools组件有个特殊的静态方法instrument(),它返回一个store的增强器,在开发中你需要在compose中使用。注意：DevTools.instrument()要放在applyMiddleware后，因为你的applyMiddleware可以存在异步行为，为了确保所有的actions显示在store中，所以要放在后面</p><ul><li>Render <code>&lt;DevTools /&gt;</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = configureStore();</span><br><span class="line"></span><br><span class="line">render(</span><br><span class="line">  &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Router /&gt;</span><br><span class="line">      &lt;DevTools /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>Provider&gt;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>redux源码学习--applyMiddleware</title>
      <link href="/2018/05/11/redux%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-applyMiddleware/"/>
      <url>/2018/05/11/redux%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-applyMiddleware/</url>
      <content type="html"><![CDATA[<h1>applyMiddleware理解</h1><p>中间件的本质是作为enhancer而存在的。它是通过createStore方法传递到redux的内部中的,中间件模块是一个高阶函数<br>下面是redux中间件的基本格式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reduxMiddleware = <span class="function">(<span class="params">&#123;dispatch, getState&#125;[简化的store]</span>) =&gt;</span> (next[上一个中间件的dispatch方法]) =&gt; <span class="function">(<span class="params">action[实际派发的action对象]</span>) =&gt;</span> &#123;&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">applyMiddleware</span>(<span class="params">...middlewares</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// middlewares就是我们传递给applyMiddlewarez函数的一系列中间件函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">createStore</span>) =&gt;</span> (...args) =&gt; &#123;</span><br><span class="line">    <span class="comment">// createStore就是redux用于创建store的方法,args === [reducers, preloadedState]。下面这句话就是在中间件的内部，使用我们传递的参数创建一个store对象</span></span><br><span class="line">    <span class="comment">// 注：这一块没有传递enhancer,所以返回的就是我们经常使用的store对象</span></span><br><span class="line">    <span class="keyword">const</span> store = createStore(...args)</span><br><span class="line">    <span class="comment">// 获取store对象的dispatch方法</span></span><br><span class="line">    <span class="keyword">let</span> dispatch = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">`Dispatching while constructing your middleware is not allowed. `</span> +</span><br><span class="line">          <span class="string">`Other middleware would not be applied to this dispatch.`</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 传递给中间件的第一层的函数的参数，</span></span><br><span class="line">    <span class="keyword">const</span> middlewareAPI = &#123;</span><br><span class="line">      getState: store.getState,</span><br><span class="line">      <span class="comment">// 重写了dispatch方法，其实就是store.dispatch(...args)</span></span><br><span class="line">      dispatch: <span class="function">(<span class="params">...args</span>) =&gt;</span> dispatch(...args)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 着重给大家详细的解释一下这一块</span></span><br><span class="line"><span class="comment">     * 假设我们给applyMiddleware函数传递的中间件是</span></span><br><span class="line"><span class="comment">     * applyMiddleware(</span></span><br><span class="line"><span class="comment">     *      f1 =&gt; g1 =&gt; h1(...arg) =&gt; &#123;&#125;,</span></span><br><span class="line"><span class="comment">     *      f2 =&gt; g2 =&gt; h2(...arg) =&gt; &#123;&#125;</span></span><br><span class="line"><span class="comment">     * )</span></span><br><span class="line"><span class="comment">     * 运行下面的这行代码之后，chain中保存的内容是</span></span><br><span class="line"><span class="comment">     * chain = [g1 =&gt; h1(...arg) =&gt; &#123;&#125;, g2 =&gt; h2(...arg) =&gt; &#123;&#125;]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> chain = middlewares.map(<span class="function"><span class="params">middleware</span> =&gt;</span> middleware(middlewareAPI))</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当我们把chain传入到 compose中后，根据我们对compose的分析，</span></span><br><span class="line"><span class="comment">     * compose(...chain)(store.dispatch)的结果就是:</span></span><br><span class="line"><span class="comment">     * g1(h2(...arg)) =&gt; h1(...arg)</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 也就是说，按照上面的这个形式，下面的dispatch和h1函数是一样的，所以，h1的参数，就是我们需要派发的action，当我们调用dispatch的时候，其实就相当于调用h1(action)，而在h1的内部，这个action是由g1的参数</span></span><br><span class="line"><span class="comment">     * 也就是h2进行派发的，所以这个时候action就传递到了h2的内部，而h2的参数是由g2的参数，也就是实际传入的store.dispatch进行派发的，就这样层层传入，层层输出，就形成了我们强大的中间件机制。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    dispatch = compose(...chain)(store.dispatch)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回的也是一个store对象</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...store,</span><br><span class="line">      <span class="comment">// 这个dispatch其实就是，各个中间件的最底层(第三层)的哪个函数组成的圆环函数构成的</span></span><br><span class="line">      dispatch</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> redux源码学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> react </tag>
            
            <tag> redux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>redux源码学习--bindActionCreators</title>
      <link href="/2018/05/11/redux%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-bindActionCreators/"/>
      <url>/2018/05/11/redux%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-bindActionCreators/</url>
      <content type="html"><![CDATA[<h1>bindActionCreators</h1><p>以前这样触发一个action，即dispatch(actionCreator(args))，现在变成这样触发一个action: boundActionCreator(args)。目的很单纯，简化某个action的调用。</p><p>Redux中的bindActionCreators，是通过dispatch将action包裹起来，这样可以通过bindActionCreators创建的方法，直接调用dispatch(action)(隐式调用）。一般情况下，我们可以通过Provider将store通过React的connext属性向下传递，bindActionCreators的唯一用处就是需要传递action creater到子组件，并且改子组件并没有接收到父组件上传递的store和dispatch。</p><p>实现上面那个效果，仅需一行代码，也就是源码文件中的第一个函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回一个函数fn：函数目的是将actionCreator绑定到dispatch上，不用麻烦调用dispatch(actionCreator(args))了</span></span><br><span class="line"><span class="comment">// 返回一个函数fn，该函数fn用dispatch来调用，其参数是actionCreator执行结果，</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindActionCreator</span>(<span class="params">actionCreator, dispatch</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dispatch(actionCreator.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="参数理解"><a href="#参数理解" class="headerlink" title="参数理解"></a>参数理解</h2><p>actionCreators: actionCreators是一个对象，它的值是actions creator函数。也可以传递一个函数。<br><code>dispatch</code>: 等同于store中的store.dispatch，用于组合action</p><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>boundActionCreators: 返回一个boundActionCreators对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">bindActionCreators</span>(<span class="params">actionCreators, dispatch</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//如果actionCreators是一个函数，则说明只有一个actionCreator，那直接调用bindActionCreator就行了</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> actionCreators === <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> bindActionCreator(actionCreators, dispatch)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//如果是actionCreator是对象，或者是null的话，报错喽</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> actionCreators !== <span class="string">'object'</span> || actionCreators === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">      <span class="string">`bindActionCreators expected an object or a function, instead received <span class="subst">$&#123;actionCreators === <span class="literal">null</span> ? <span class="string">'null'</span> : <span class="keyword">typeof</span> actionCreators&#125;</span>. `</span> +</span><br><span class="line">      <span class="string">`Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?`</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//保持actionCreators里面原来的key，只是把key对应的value都转成了boundActionCreator</span></span><br><span class="line">  <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(actionCreators)</span><br><span class="line">  <span class="keyword">const</span> boundActionCreators = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = keys[i]</span><br><span class="line">    <span class="keyword">const</span> actionCreator = actionCreators[key]</span><br><span class="line">    <span class="comment">//只对value是函数的key进行转换，其他的都过滤掉了</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> actionCreator === <span class="string">'function'</span>) &#123;</span><br><span class="line">      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//返回绑定之后的对象</span></span><br><span class="line">  <span class="keyword">return</span> boundActionCreators</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>总结</h1><p>bindActionCreators函数把actionCreators这个对象里面包含的每一个actionCreator按照原来的key的方式全部都封装了一遍。</p>]]></content>
      
      <categories>
          
          <category> redux源码学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> react </tag>
            
            <tag> redux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>redux源码学习--combineReducers</title>
      <link href="/2018/05/11/redux%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E2%80%94combineReducers/"/>
      <url>/2018/05/11/redux%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E2%80%94combineReducers/</url>
      <content type="html"><![CDATA[<h1>combineReducers 理解</h1><p>combineReducers.js文件对外暴露了一个函数combineReducers，combineReducer函数是redux的一个辅助性的函数，用于拆分createStore里面的第一个参数：reducer函数。combineReducer函数的返回值是一个函数，该函数是组合之后的一个标准的reducer函数。<br>combineReducers将多个值不同的reducer对象转换为单个reducer。它将调用每个子reducer，并将它们的结果收集到单个状态对象中，该对象的键对应于传递的reducer函数的键。</p><h2 id="参数理解"><a href="#参数理解" class="headerlink" title="参数理解"></a>参数理解</h2><p><code>{reducers}</code>：一个对象，它的值对应于需要被组合成一个的不同的reducer函数。获得它的一种简便方法是使用ES6<code>import * as reducers</code>语法。对于任何的actions，reducer可能永远不会返回undefined。相反，如果传递给它们的state是undefined，则返回初始state，以及任何未识别action的当前state。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reducers = &#123;</span><br><span class="line">    usersId: <span class="function"><span class="keyword">function</span> <span class="title">getUsersIdReducer</span>(<span class="params"></span>)</span>&#123;&#125;, </span><br><span class="line">    userName: <span class="function"><span class="keyword">function</span> <span class="title">getUserNameReducer</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="参数处理"><a href="#参数处理" class="headerlink" title="参数处理"></a>参数处理</h2><ul><li>从传入的参数里面提取出合法的reducers（reducers的每一个key对应的value值是函数，才是合法的子reducer），赋值给新的局部变量：finalReducers</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reducerKeys = <span class="built_in">Object</span>.keys(reducers)</span><br><span class="line"><span class="comment">//定义一个局部变量 finalReducers</span></span><br><span class="line"><span class="keyword">const</span> finalReducers = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; reducerKeys.length; i++) &#123;</span><br><span class="line">  <span class="keyword">const</span> key = reducerKeys[i]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> reducers[key] === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">      warning(<span class="string">`No reducer provided for key "<span class="subst">$&#123;key&#125;</span>"`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//过滤出reducers对应的value值是function的key，将其放入finalReducers对象</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> reducers[key] === <span class="string">'function'</span>) &#123;</span><br><span class="line">    finalReducers[key] = reducers[key]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>校验finalReducers, 判断其每一个子reducer是否能返回正常的子state</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取出过滤出来的有效的keys列表</span></span><br><span class="line"><span class="keyword">const</span> finalReducerKeys = <span class="built_in">Object</span>.keys(finalReducers)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> unexpectedKeyCache</span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">  unexpectedKeyCache = &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> shapeAssertionError</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  assertReducerShape(finalReducers)</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  shapeAssertionError = e</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>调用assertReducerShape函数：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//确认reducer是否是合法的reducer，即返回的state是不是undefined，如果是undefined，则是非法reducer</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">assertReducerShape</span>(<span class="params">reducers</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Object</span>.keys(reducers).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> reducer = reducers[key]</span><br><span class="line">  <span class="keyword">const</span> initialState = reducer(<span class="literal">undefined</span>, &#123;<span class="attr">type</span>: ActionTypes.INIT&#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//如果初始state是undefined，则抛出错误</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> initialState === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">      <span class="string">`Reducer "<span class="subst">$&#123;key&#125;</span>" returned undefined during initialization. `</span> +</span><br><span class="line">      <span class="string">`If the state passed to the reducer is undefined, you must `</span> +</span><br><span class="line">      <span class="string">`explicitly return the initial state. The initial state may `</span> +</span><br><span class="line">      <span class="string">`not be undefined. If you don't want to set a value for this reducer, `</span> +</span><br><span class="line">      <span class="string">`you can use null instead of undefined.`</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//如果reducer是undefined，抛出错误</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="keyword">typeof</span> reducer(<span class="literal">undefined</span>, &#123;</span><br><span class="line">      type: ActionTypes.PROBE_UNKNOWN_ACTION()</span><br><span class="line">    &#125;) === <span class="string">'undefined'</span></span><br><span class="line">  ) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">`Reducer "<span class="subst">$&#123;key&#125;</span>" returned undefined when probed with a random type. `</span> +</span><br><span class="line">        <span class="string">`Don't try to handle <span class="subst">$&#123;</span></span></span><br><span class="line"><span class="string"><span class="subst">          ActionTypes.INIT</span></span></span><br><span class="line"><span class="string"><span class="subst">        &#125;</span> or other actions in "redux/*" `</span> +</span><br><span class="line">        <span class="string">`namespace. They are considered private. Instead, you must return the `</span> +</span><br><span class="line">        <span class="string">`current state for any unknown actions, unless it is undefined, `</span> +</span><br><span class="line">        <span class="string">`in which case you must return the initial state, regardless of the `</span> +</span><br><span class="line">        <span class="string">`action type. The initial state may not be undefined, but can be null.`</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>combineReducers函数返回一个combination函数，combination是一个标准的reducer函数，有初始化的state参数，和一个携带了actionType和数据的action对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">combination</span>(<span class="params">state = &#123;&#125;, action</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//如果有非法的reducer，就直接报错</span></span><br><span class="line">  <span class="keyword">if</span> (shapeAssertionError) &#123;</span><br><span class="line">    <span class="keyword">throw</span> shapeAssertionError</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> warningMessage = getUnexpectedStateShapeWarningMessage(</span><br><span class="line">      state,</span><br><span class="line">      finalReducers,</span><br><span class="line">      action,</span><br><span class="line">      unexpectedKeyCache</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">if</span> (warningMessage) &#123;</span><br><span class="line">      warning(warningMessage)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> hasChanged = <span class="literal">false</span></span><br><span class="line">  <span class="comment">//定义新的nextState</span></span><br><span class="line">  <span class="keyword">const</span> nextState = &#123;&#125;</span><br><span class="line">  <span class="comment">// 1，遍历reducers对象中的有效key，</span></span><br><span class="line">  <span class="comment">// 2，执行该key对应的value函数，即子reducer函数，并得到对应的state对象，即子state</span></span><br><span class="line">  <span class="comment">// 3，将新的子state挂到新的nextState对象上，key不变</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; finalReducerKeys.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = finalReducerKeys[i]</span><br><span class="line">    <span class="keyword">const</span> reducer = finalReducers[key]</span><br><span class="line">    <span class="keyword">const</span> previousStateForKey = state[key]</span><br><span class="line">    <span class="keyword">const</span> nextStateForKey = reducer(previousStateForKey, action)</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> nextStateForKey === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> errorMessage = getUndefinedStateErrorMessage(key, action)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(errorMessage)</span><br><span class="line">    &#125;</span><br><span class="line">    nextState[key] = nextStateForKey</span><br><span class="line">    <span class="comment">//如果hasChanged为true，那就是true了   后面的判断是，只要有一次nextStateForKey!== previousStateForKey不同，就说明整个state不同</span></span><br><span class="line">    hasChanged = hasChanged || nextStateForKey !== previousStateForKey</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//如果state发生变化了，直接返回新的nextState，否则，还是返回旧的state</span></span><br><span class="line">  <span class="keyword">return</span> hasChanged ? nextState : state</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1>总结</h1><ul><li><p>combineReducers 辅助函数的作用是，把一个由多个不同 reducer 函数作为 value 的 object，合并成一个最终的 reducer 函数，然后就可以对这个 reducer 调用 createStore。</p></li><li><p>合并后的 reducer 可以调用各个子 reducer，并把它们的结果合并成一个 state 对象。state 对象的结构由传入的多个 reducer 的 key 决定。</p></li><li><p>每个传入 combineReducers 的 reducer 都需满足以下规则：</p><p>所有未匹配到的 action，必须把它接收到的第一个参数也就是那个 state 原封不动返回。</p><p>永远不能返回 undefined。当过早 return 时非常容易犯这个错误，为了避免错误扩散，遇到这种情况时 combineReducers 会抛异常。</p><p>如果传入的 state 就是 undefined，一定要返回对应 reducer 的初始 state。根据上一条规则，初始 state 禁止使用 undefined。使用 ES6 的默认参数值语法来设置初始 state 很容易，但你也可以手动检查第一个参数是否为 undefined。</p></li></ul>]]></content>
      
      <categories>
          
          <category> redux源码学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> react </tag>
            
            <tag> redux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>redux源码学习--compose</title>
      <link href="/2018/05/11/redux%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-compose/"/>
      <url>/2018/05/11/redux%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-compose/</url>
      <content type="html"><![CDATA[<p></p><h1>compose</h1><br>compose 是一个从右向左编写单参数组成的函数。最右边的函数可以接受多个参数，因为它提供了签名由此产生的复合函数。<p></p><h2 id="参数理解"><a href="#参数理解" class="headerlink" title="参数理解"></a>参数理解</h2><p><code>{...funcs}</code>需要合成的多个函数。每个函数都接收一个函数作为参数，然后返回一个函数。</p><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p><code>(Function)</code> 从右到左把接收到的函数合成后的最终函数。</p><h2 id="代码理解"><a href="#代码理解" class="headerlink" title="代码理解"></a>代码理解</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">...funcs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (funcs.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">arg</span> =&gt;</span> arg</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (funcs.length === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> funcs[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//对参数进行一个累加，就是依次以右边的参数作为左边方法的参数累加到最左边</span></span><br><span class="line">  <span class="keyword">return</span> funcs.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> (...args) =&gt; a(b(...args)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h1>总结</h1><br>compose 主要用于 applyMiddleware / createStore enhancer.<br>compose 做的只是让你不使用深度右括号的情况下来写深度嵌套的函数<br>compose的运行结果是一个函数，调用这个函数所传递的参数将会作为compose最后一个参数的参数，从而由内向外，逐步调用。<p></p>]]></content>
      
      <categories>
          
          <category> redux源码学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> react </tag>
            
            <tag> redux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>immutable.js 学习</title>
      <link href="/2018/05/11/immutable-js-%E5%AD%A6%E4%B9%A0/"/>
      <url>/2018/05/11/immutable-js-%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>JavaScript 中的对象一般是可变的，因为Javascript为了节省内存，都是使用引用赋值，生成一个新对象如果简单的引用了原始对象，那对新对象作出的改变，也将影响到原始对象。平时简单的应用还不会特别明显，但是如果在复杂的应用中，对象的改变就会引起比较复杂的问题。往往都会使用deepCopy来解决这个问题，但是deepCopy往往会对整个对象的树进行拷贝，也会造成 CPU 和内存的浪费。<br>一、什么是immutable data？<br>Immutable Data 就是被创建之后不能给改变数据。Immutable 实现的原理是 Persistent Data Structure（持久化数据结构），新数据通过旧的数据创建，需要使旧数据依旧可用而且不能被改变。Immutable的这种实现原理，也避免了deepCopy复制所有节点带来的性能损耗。Immutable的实现原理见下图：<br><img src="http://img.alicdn.com/tps/i2/TB1zzi_KXXXXXctXFXXbrb8OVXX-613-575.gif" alt="Immutable原理"></p><p>二、Immutable 优点</p><ol><li>Immutable 降低了 Mutable 带来的复杂度</li><li>节省内存</li><li>Undo/Redo，Copy/Paste，甚至时间旅行这些功能做起来小菜一碟</li><li>并发安全</li><li>拥抱函数式编程</li></ol><p>三、Immutable 缺点：</p><ol><li>需要学习新的 API</li><li>增加了资源文件大小</li><li>容易与原生对象混淆</li></ol><p>四、Immutable的数据类型<br>Immutable 的几种数据类型<br>1.List: 有序索引集，类似JavaScript中的Array。<br>2.Map: 无序索引集，类似JavaScript中的Object。<br>3.OrderedMap: 有序的Map，根据数据的set()进行排序。<br>4.Set: 没有重复值的集合。<br>5.OrderedSet: 有序的Set，根据数据的add进行排序。<br>6.Stack: 有序集合，支持使用unshift（）和shift（）添加和删除。<br>7.Range(): 返回一个Seq.Indexed类型的集合，这个方法有三个参数，start表示开始值，默认值为0，end表示结束值，默认为无穷大，step代表每次增大的数值，默认为1.如果start = end,则返回空集合。<br>8.Repeat(): 返回一个vSeq.Indexe类型的集合，这个方法有两个参数，value代表需要重复的值，times代表要重复的次数，默认为无穷大。<br>9.Record: 一个用于生成Record实例的类。类似于JavaScript的Object，但是只接收特定字符串为key，具有默认值。<br>10.Seq: 序列，但是可能不能由具体的数据结构支持。<br>11.Collection: 是构建所有数据结构的基类，不可以直接构建。</p><p>用的最多就是List和Map，所以在这里主要介绍这两种数据类型的API。</p><p>五、常用的API<br>1.fromJS() 将一个js数据转换为Immutable类型的数据。<br>用法：fromJS(value, converter)<br>简介：value是要转变的数据，converter是要做的操作。第二个参数可不填，默认情况会将数组准换为List类型，将对象转换为Map类型，其余不做操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="string">'123'</span>,<span class="attr">b</span>:<span class="string">'234'</span>&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">key, value, path</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(key, value, path)</span><br><span class="line">   <span class="keyword">return</span> isIndexed(value) ? value.toList() : value.toOrderedMap())</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>2.toJS()<br>作用：将一个Immutable数据转换为JS类型的数据。<br>用法：value.toJS()</p><p>3.is()对两个对象进行比较。<br>用法：is(map1,map2)<br>简介：和js中对象的比较不同，在js中比较两个对象比较的是地址，但是在Immutable中比较的是这个对象hashCode和valueOf，只要两个对象的hashCode相等，值就是相同的，避免了深度遍历，提高了性能。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="built_in">Map</span>, is &#125; <span class="keyword">from</span> <span class="string">'immutable'</span></span><br><span class="line"><span class="keyword">const</span> map1 = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">1</span>, <span class="attr">c</span>: <span class="number">1</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> map2 = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">1</span>, <span class="attr">c</span>: <span class="number">1</span> &#125;)</span><br><span class="line">map1 === map2   <span class="comment">//false</span></span><br><span class="line"><span class="built_in">Object</span>.is(map1, map2) <span class="comment">// false</span></span><br><span class="line">is(map1, map2) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>4.List 和 Map<br>创建<br>List() 和 Map()</p><p>作用：用来创建一个新的List/Map对象</p><p>用法:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//List</span></span><br><span class="line"></span><br><span class="line">List(): List&lt;any&gt;</span><br><span class="line">List&lt;T&gt;(): List&lt;T&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Map</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Map</span>(): <span class="built_in">Map</span>&lt;any&gt;</span><br><span class="line"><span class="built_in">Map</span>&lt;T&gt;(): <span class="built_in">Map</span>&lt;T&gt;</span><br><span class="line">List.of() 和 <span class="built_in">Map</span>.of()</span><br></pre></td></tr></table></figure><p>作用：创建一个新的包含value的List/Map对象<br>用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List.of&lt;T&gt;(...values: <span class="built_in">Array</span>&lt;T&gt;): List&lt;T&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Map</span>.of&lt;T&gt;(...values: <span class="built_in">Object</span>&lt;T&gt;): <span class="built_in">Map</span>&lt;T&gt;</span><br></pre></td></tr></table></figure></p><p>判断</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List.isList() 和 <span class="built_in">Map</span>.isMap()</span><br></pre></td></tr></table></figure><p>作用：判断一个数据结构是不是List/Map类型<br>用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List.isList(maybeList: any): boolean</span><br><span class="line"></span><br><span class="line"><span class="built_in">Map</span>.isMap(maybeMap: any): boolean</span><br></pre></td></tr></table></figure></p><p>长度<br>size</p><p>作用：获取List/Map的长度</p><p>数据读取<br>get() 、 getIn()</p><p>作用：获取数据结构中的数据</p><p>has() 、 hasIn()</p><p>作用:判断是否存在某一个key</p><p>用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).has(<span class="string">'0'</span>); <span class="comment">//true</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).has(<span class="string">'0'</span>); <span class="comment">//true</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).hasIn([<span class="number">3</span>,<span class="string">'b'</span>]) <span class="comment">//true</span></span><br><span class="line">includes()</span><br></pre></td></tr></table></figure></p><p>作用：判断是否存在某一个value</p><p>用法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).includes(<span class="number">2</span>); <span class="comment">//true</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).includes(<span class="string">'2'</span>); <span class="comment">//false 不包含字符2</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).includes(<span class="number">5</span>); <span class="comment">//false </span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).includes(&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;) <span class="comment">//false</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).includes(Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;)) <span class="comment">//true</span></span><br><span class="line">first() 、 last()</span><br></pre></td></tr></table></figure><p>作用：用来获取第一个元素或者最后一个元素，若没有则返回undefined<br>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).first()<span class="comment">//1</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).last()<span class="comment">//&#123;a:4,b:5&#125;</span></span><br><span class="line"></span><br><span class="line">Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>,<span class="attr">c</span>:&#123;<span class="attr">d</span>:<span class="number">3</span>,<span class="attr">e</span>:<span class="number">4</span>&#125;&#125;).first() <span class="comment">//1</span></span><br><span class="line">Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>,<span class="attr">c</span>:&#123;<span class="attr">d</span>:<span class="number">3</span>,<span class="attr">e</span>:<span class="number">4</span>&#125;&#125;).first() <span class="comment">//&#123;d:3,e:4&#125;</span></span><br></pre></td></tr></table></figure><p>数据修改<br>注：这里对于数据的修改，是对原数据进行操作后的值赋值给一个新的数据，并不会对原数据进行修改，因为Immutable是不可变的数据类型。</p><p>设置 set()</p><p>作用：设置第一层key、index的值</p><p>用法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set(index: number, <span class="attr">value</span>: T): List&lt;T&gt;</span><br><span class="line">set(key: K, <span class="attr">value</span>: V): <span class="keyword">this</span></span><br><span class="line">List在使用的时候，将index为number值设置为value。<span class="built_in">Map</span>在使用的时候，将key的值设置为value。</span><br></pre></td></tr></table></figure><p>在List中使用时，若传入的number为负数，则将index为size+index的值设置为value，例，若传入-1，则将size-1的值设为value。若传入的number的值超过了List的长度，则将List自动补全为传入的number的值，将number设置为value，其余用undefined补全。注：跟js中不同，List中不存在空位，[,,,],List中若没有值，则为undefined。</p><p>代码实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//////List</span></span><br><span class="line"><span class="keyword">const</span> originalList = List([ <span class="number">0</span> ]);</span><br><span class="line"><span class="comment">// List [ 0 ]</span></span><br><span class="line">originalList.set(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// List [ 0, 1 ]</span></span><br><span class="line">originalList.set(<span class="number">0</span>, <span class="string">'overwritten'</span>);</span><br><span class="line"><span class="comment">// List [ "overwritten" ]</span></span><br><span class="line">originalList.set(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// List [ 0, undefined, 2 ]</span></span><br><span class="line"></span><br><span class="line">List().set(<span class="number">50000</span>, <span class="string">'value'</span>).size;</span><br><span class="line"><span class="comment">// 50001</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//////Map</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="built_in">Map</span> &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</span><br><span class="line"><span class="keyword">const</span> originalMap = <span class="built_in">Map</span>()</span><br><span class="line"><span class="keyword">const</span> newerMap = originalMap.set(<span class="string">'key'</span>, <span class="string">'value'</span>)</span><br><span class="line"><span class="keyword">const</span> newestMap = newerMap.set(<span class="string">'key'</span>, <span class="string">'newer value'</span>)</span><br><span class="line"></span><br><span class="line">originalMap</span><br><span class="line"><span class="comment">// Map &#123;&#125;</span></span><br><span class="line">newerMap</span><br><span class="line"><span class="comment">// Map &#123; "key": "value" &#125;</span></span><br><span class="line">newestMap</span><br><span class="line"><span class="comment">// Map &#123; "key": "newer value" &#125;</span></span><br></pre></td></tr></table></figure></p><p>setIn()<br>作用：设置深层结构中某属性的值<br>用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setIn(keyPath: Iterable&lt;any&gt;, <span class="attr">value</span>: any): <span class="keyword">this</span></span><br><span class="line">用法与set()一样，只是第一个参数是一个数组，代表要设置的属性所在的位置</span><br></pre></td></tr></table></figure></p><p>删除 delete</p><p>作用：用来删除第一层结构中的属性</p><p>用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span>(index: number): List&lt;T&gt;  <span class="comment">//List</span></span><br><span class="line"><span class="keyword">delete</span>(key: K): <span class="keyword">this</span>  <span class="comment">//Map</span></span><br><span class="line">deleteIn()</span><br></pre></td></tr></table></figure></p><p>用来删除深层数据，用法参考setIn<br>deleteAll() (Map独有，List没有)<br>作用：用来删除Map中的多个key<br>用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deleteAll(keys: Iterable&lt;K&gt;): <span class="keyword">this</span></span><br></pre></td></tr></table></figure></p><p>代码示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> names = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="string">"Aaron"</span>, <span class="attr">b</span>: <span class="string">"Barry"</span>, <span class="attr">c</span>: <span class="string">"Connor"</span> &#125;)</span><br><span class="line">names.deleteAll([ <span class="string">'a'</span>, <span class="string">'c'</span> ])</span><br><span class="line"><span class="comment">// Map &#123; "b": "Barry" &#125;</span></span><br></pre></td></tr></table></figure></p><p>更新 update()<br>作用：对对象中的某个属性进行更新，可对原数据进行相关操作<br>用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update(index: number, <span class="attr">updater</span>: <span class="function">(<span class="params">value: T</span>) =&gt;</span> T): <span class="keyword">this</span> <span class="comment">//List</span></span><br><span class="line">update(key: K, <span class="attr">updater</span>: <span class="function">(<span class="params">value: V</span>) =&gt;</span> V): <span class="keyword">this</span>  <span class="comment">//Map</span></span><br></pre></td></tr></table></figure></p><p>代码示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">////List</span></span><br><span class="line"><span class="keyword">const</span> list = List([ <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span> ])</span><br><span class="line"><span class="keyword">const</span> result = list.update(<span class="number">2</span>, val =&gt; val.toUpperCase())</span><br><span class="line"></span><br><span class="line"><span class="comment">///Map</span></span><br><span class="line"><span class="keyword">const</span> aMap = <span class="built_in">Map</span>(&#123; <span class="attr">key</span>: <span class="string">'value'</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> newMap = aMap.update(<span class="string">'key'</span>, value =&gt; value + value)</span><br><span class="line">updateIn()</span><br></pre></td></tr></table></figure></p><p>用法参考setIn</p><p>清除 clear()</p><p>作用：清除所有数据</p><p>用法：clear(): this</p><p>代码示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Map</span>(&#123; <span class="attr">key</span>: <span class="string">'value'</span> &#125;).clear()  <span class="comment">//Map</span></span><br><span class="line">List([ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ]).clear()   <span class="comment">// List</span></span><br></pre></td></tr></table></figure></p><p>List中的各种删除与插入<br>List对应的数据结构是js中的数组，所以数组的一些方法在Immutable中也是通用的，比如push，pop,shift，unshift，insert。</p><p>push()：在List末尾插入一个元素<br>pop(): 在List末尾删除一个元素<br>unshift: 在List首部插入一个元素<br>shift: 在List首部删除一个元素<br>insert：在List的index处插入元素<br>代码实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">List([ <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ]).insert(<span class="number">6</span>, <span class="number">5</span>) </span><br><span class="line"><span class="comment">//List [ 0, 1, 2, 3, 4, 5 ]</span></span><br><span class="line">List([ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ]).push(<span class="number">5</span>)</span><br><span class="line"><span class="comment">// List [ 1, 2, 3, 4, 5 ]</span></span><br><span class="line">List([ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ]).pop()</span><br><span class="line"><span class="comment">// List[ 1, 2, 3 ]</span></span><br><span class="line">List([ <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).unshift(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// List [ 1, 2, 3, 4 ]</span></span><br><span class="line">List([ <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ]).shift();</span><br><span class="line"><span class="comment">// List [ 1, 2, 3, 4 ]</span></span><br><span class="line">List中还有一个特有的方法用法设置List的长度，setSize()</span><br><span class="line">List([]).setSize(<span class="number">2</span>).toJS() <span class="comment">//[undefined,undefined]</span></span><br></pre></td></tr></table></figure></p><p>关于merge<br>merge</p><p>作用：浅合并，新数据与旧数据对比，旧数据中不存在的属性直接添加，就数据中已存在的属性用新数据中的覆盖</p><p>mergrWith</p><p>作用：自定义浅合并，可自行设置某些属性的值</p><p>mergeIn</p><p>作用：对深层数据进行浅合并</p><p>mergeDeep</p><p>作用：深合并，新旧数据中同时存在的的属性为新旧数据合并之后的数据</p><p>mergeDeepIn</p><p>作用：对深层数据进行深合并</p><p>mergrDeepWith</p><p>作用:自定义深合并，可自行设置某些属性的值<br>这里用一段示例彻底搞懂merge，此示例为Map结构，List与Map原理相同<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Map1 = Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">111</span>,<span class="attr">b</span>:<span class="number">222</span>,<span class="attr">c</span>:&#123;<span class="attr">d</span>:<span class="number">333</span>,<span class="attr">e</span>:<span class="number">444</span>&#125;&#125;);</span><br><span class="line"><span class="keyword">const</span> Map2 = Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">111</span>,<span class="attr">b</span>:<span class="number">222</span>,<span class="attr">c</span>:&#123;<span class="attr">e</span>:<span class="number">444</span>,<span class="attr">f</span>:<span class="number">555</span>&#125;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Map3 = Map1.merge(Map2);</span><br><span class="line"> <span class="comment">//Map &#123;a:111,b:222,c:&#123;e:444,f:555&#125;&#125;</span></span><br><span class="line"><span class="keyword">const</span> Map4 = Map1.mergeDeep(Map2);</span><br><span class="line"> <span class="comment">//Map &#123;a:111,b:222,c:&#123;d:333,e:444,f:555&#125;&#125;</span></span><br><span class="line"><span class="keyword">const</span> Map5 = Map1.mergeWith(<span class="function">(<span class="params">oldData,newData,key</span>)=&gt;</span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(key === <span class="string">'a'</span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="number">666</span>;</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> newData</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,Map2);</span><br><span class="line"> <span class="comment">//Map &#123;a:666,b:222,c:&#123;e:444,f:555&#125;&#125;</span></span><br></pre></td></tr></table></figure></p><p>序列算法<br>concat()<br>作用：对象的拼接，用法与js数组中的concat()相同，返回一个新的对象。<br>用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> List = list1.concat(list2)</span><br></pre></td></tr></table></figure></p><p>map()<br>作用：遍历整个对象，对Map/List元素进行操作，返回一个新的对象。<br>用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Map</span>(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;).map(<span class="function"><span class="params">val</span>=&gt;</span><span class="number">10</span>*val)</span><br><span class="line"><span class="comment">//Map&#123;a:10,b:20&#125;</span></span><br></pre></td></tr></table></figure></p><p>Map特有的mapKey()<br>作用：遍历整个对象，对Map元素的key进行操作，返回一个新的对象。<br>用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Map</span>(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;).mapKey(<span class="function"><span class="params">val</span>=&gt;</span>val+<span class="string">'l'</span>)</span><br><span class="line"><span class="comment">//Map&#123;al:10,bl:20&#125;</span></span><br></pre></td></tr></table></figure></p><p>Map特有的mapEntries()</p><p>作用：遍历整个对象，对Map元素的key和value同时进行操作，返回一个新的对象。Map的map()也可实现此功能。<br>用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Map</span>(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;).map(<span class="function">(<span class="params">key,val</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [key+<span class="string">'l'</span>,val*<span class="number">10</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//Map&#123;al:10,bl:20&#125;</span></span><br></pre></td></tr></table></figure></p><p>过滤 filter<br>作用：返回一个新的对象，包括所有满足过滤条件的元素<br>用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Map</span>(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;).filter(<span class="function">(<span class="params">key,val</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> val == <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//Map&#123;b:2&#125;</span></span><br></pre></td></tr></table></figure></p><p>还有一个filterNot()方法，与此方法正好相反。<br>反转 reverse<br>作用：将数据的结构进行反转<br>代码示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]).reverse();</span><br><span class="line"><span class="comment">// List [5,4,3,2,1]</span></span><br><span class="line">Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:&#123;<span class="attr">c</span>:<span class="number">2</span>,<span class="attr">d</span>:<span class="number">3</span>&#125;,<span class="attr">e</span>:<span class="number">4</span>&#125;).recerse();</span><br><span class="line"><span class="comment">//Map &#123;e:4,b:&#123;c:2,d:3&#125;,a:1&#125;</span></span><br></pre></td></tr></table></figure></p><p>排序 sort &amp; sortBy<br>作用：对数据结构进行排序<br>代码示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///List</span></span><br><span class="line">Immutable.fromJS([<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">1</span>]).sort()</span><br><span class="line"><span class="comment">// List [1,2,3,4,5,6]</span></span><br><span class="line">Immutable.fromJS([<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">1</span>]).sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (a &lt; b) &#123; <span class="keyword">return</span> <span class="number">-1</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (a &gt; b) &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (a === b) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// List [1,2,3,4,5,6]</span></span><br><span class="line">Immutable.fromJS([&#123;<span class="attr">a</span>:<span class="number">3</span>&#125;,&#123;<span class="attr">a</span>:<span class="number">2</span>&#125;,&#123;<span class="attr">a</span>:<span class="number">4</span>&#125;,&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;]).sortBy(<span class="function">(<span class="params">val,index,obj</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> val.get(<span class="string">'a'</span>)</span><br><span class="line">&#125;,(a,b)=&gt;&#123;</span><br><span class="line">  <span class="keyword">if</span> (a &lt; b) &#123; <span class="keyword">return</span> <span class="number">-1</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (a &gt; b) &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (a === b) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//List  [ &#123;a:3&#125;, &#123;a:2&#125;, &#123;a:4&#125;, &#123;a:1&#125; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Map</span></span><br><span class="line"></span><br><span class="line">Immutable.fromJS( &#123;<span class="attr">b</span>:<span class="number">1</span>, <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">c</span>: <span class="number">2</span>, <span class="attr">d</span>:<span class="number">5</span>&#125; ).sort()</span><br><span class="line"><span class="comment">//Map &#123;b: 1, c: 2, a: 3, d: 5&#125;</span></span><br><span class="line">Immutable.fromJS( &#123;<span class="attr">b</span>:<span class="number">1</span>, <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">c</span>: <span class="number">2</span>, <span class="attr">d</span>:<span class="number">5</span>&#125; ).sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (a &lt; b) &#123; <span class="keyword">return</span> <span class="number">-1</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (a &gt; b) &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (a === b) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//Map &#123;b: 1, c: 2, a: 3, d: 5&#125;</span></span><br><span class="line">Immutable.fromJS( &#123;<span class="attr">b</span>:<span class="number">1</span>, <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">c</span>: <span class="number">2</span>, <span class="attr">d</span>:<span class="number">5</span>&#125; ).sortBy(<span class="function">(<span class="params">value, key, obj</span>)=&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> value</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//Map &#123;b: 1, c: 2, a: 3, d: 5&#125;</span></span><br></pre></td></tr></table></figure></p><p>分组 groupBy<br>作用：对数据进行分组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> listOfMaps = List([</span><br><span class="line">  <span class="built_in">Map</span>(&#123; <span class="attr">v</span>: <span class="number">0</span> &#125;),</span><br><span class="line">  <span class="built_in">Map</span>(&#123; <span class="attr">v</span>: <span class="number">1</span> &#125;),</span><br><span class="line">  <span class="built_in">Map</span>(&#123; <span class="attr">v</span>: <span class="number">1</span> &#125;),</span><br><span class="line">  <span class="built_in">Map</span>(&#123; <span class="attr">v</span>: <span class="number">0</span> &#125;),</span><br><span class="line">  <span class="built_in">Map</span>(&#123; <span class="attr">v</span>: <span class="number">2</span> &#125;)</span><br><span class="line">])</span><br><span class="line"><span class="keyword">const</span> groupsOfMaps = listOfMaps.groupBy(<span class="function"><span class="params">x</span> =&gt;</span> x.get(<span class="string">'v'</span>))</span><br><span class="line"><span class="comment">// Map &#123;</span></span><br><span class="line"><span class="comment">//   0: List [ Map&#123; "v": 0 &#125;, Map &#123; "v": 0 &#125; ],</span></span><br><span class="line"><span class="comment">//   1: List [ Map&#123; "v": 1 &#125;, Map &#123; "v": 1 &#125; ],</span></span><br><span class="line"><span class="comment">//   2: List [ Map&#123; "v": 2 &#125; ],</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure></p><p>查找数据<br>indexOf() 、 lastIndexOf Map不存在此方法<br>作用：和js数组中的方法相同，查找第一个或者最后一个value的index值，找不到则返回-1<br>用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).indexof(<span class="number">3</span>) <span class="comment">//2</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).lastIndexof(<span class="number">3</span>) <span class="comment">//2</span></span><br></pre></td></tr></table></figure></p><p>findIndex() 、 findLastIndex() Map不存在此方法<br>作用：查找满足要求的元素的index值<br>用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).findIndex(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value%<span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;)   <span class="comment">// 1</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).findLastIndex(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> index%<span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;)  <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></p><p>find() 、 findLast()<br>作用：查找满足条件的元素的value值<br>用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).find(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value%<span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;)  <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).findLast(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value%<span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;)  <span class="comment">// 4</span></span><br></pre></td></tr></table></figure></p><p>findKey() 、 findLastKey()<br>作用：查找满足条件的元素的key值<br>用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).findKey(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value%<span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;)  <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).findLastKey(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value%<span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;)  <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></p><p>findEntry() 、 findLastEntry()<br>作用：查找满足条件的元素的键值对 key:value<br>用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).findEntry(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value%<span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;)  <span class="comment">// [1,2]</span></span><br><span class="line"></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).findLastEntry(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value%<span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;)  <span class="comment">// [3,4]</span></span><br></pre></td></tr></table></figure></p><p>keyOf() lastKeyOf()<br>作用：查找某一个value对应的key值<br>用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).keyOf(<span class="number">2</span>) <span class="comment">//1</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).lastKeyOf(<span class="number">2</span>) <span class="comment">//1</span></span><br></pre></td></tr></table></figure></p><p>max() 、 maxBy()<br>作用：查找最大值<br>用法:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).max() <span class="comment">//4</span></span><br><span class="line"></span><br><span class="line">Immutable.fromJS([&#123;a;<span class="number">1</span>&#125;,&#123;<span class="attr">a</span>:<span class="number">2</span>&#125;,&#123;<span class="attr">a</span>: <span class="number">3</span>&#125;,&#123;<span class="attr">a</span>:<span class="number">4</span>&#125;]).maxBy(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value.get(<span class="string">'a'</span>)</span><br><span class="line">&#125;)  <span class="comment">//&#123;a:4&#125;</span></span><br></pre></td></tr></table></figure></p><p>min() 、 minBy()</p><p>作用：查找最小值<br>用法:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).min() <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">Immutable.fromJS([&#123;a;<span class="number">1</span>&#125;,&#123;<span class="attr">a</span>:<span class="number">2</span>&#125;,&#123;<span class="attr">a</span>: <span class="number">3</span>&#125;,&#123;<span class="attr">a</span>:<span class="number">4</span>&#125;]).minBy(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value.get(<span class="string">'a'</span>)</span><br><span class="line">&#125;)  <span class="comment">//&#123;a:1&#125;</span></span><br></pre></td></tr></table></figure></p><p>创建子集<br>slice()</p><p>作用： 和原生js中数组的slice数组一样，包含两个参数，start和end，start代表开始截取的位置，end代表结束的位置，不包括第end的元素。若不包括end，则返回整个对象，若end为负数，则返回（start，length-end）对应的数据。若start只有一个并且为负数，则返回最后的end个元素。</p><p>用法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).slice(<span class="number">0</span>); <span class="comment">//[1,2,3,4]</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).slice(<span class="number">0</span>,<span class="number">2</span>); <span class="comment">//[1,2]</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).slice(<span class="number">-2</span>); <span class="comment">//[3,4]</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).slice(<span class="number">0</span>,<span class="number">-2</span>); <span class="comment">//[1,2]</span></span><br></pre></td></tr></table></figure><p>rest()<br>作用：返回除第一个元素之外的所有元素<br>用法:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).rest()<span class="comment">//[2,3,4]</span></span><br></pre></td></tr></table></figure></p><p>butLast()<br>作用：返回除最后一个元素之外的所有元素<br>用法:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).rest()<span class="comment">//[1,2,3]</span></span><br></pre></td></tr></table></figure></p><p>skip()<br>作用：有一个参数n, 返回截掉前n个元素之后剩下的所有元素<br>用法:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).skip(<span class="number">1</span>)<span class="comment">//[2,3,4]</span></span><br></pre></td></tr></table></figure></p><p>skipLast()</p><p>作用：有一个参数n, 返回截掉最后n个元素之后剩下的所有元素</p><p>用法:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).skip(<span class="number">1</span>)<span class="comment">//[1,2,3]</span></span><br></pre></td></tr></table></figure><p>skipWhile()</p><p>作用：返回从第一次返回false之后的所有元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).skipWhile(list.skipWhile(<span class="function">(<span class="params">value,index,list</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">2</span>;</span><br><span class="line">&#125;))<span class="comment">// [1,2,3,4]</span></span><br></pre></td></tr></table></figure><p>skipUntil()</p><p>作用：返回从第一次返回true之后的所有元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).skipUntil(list.skipWhile(<span class="function">(<span class="params">value,index,list</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">2</span>;</span><br><span class="line">&#125;))<span class="comment">// [3,4]</span></span><br></pre></td></tr></table></figure><p>take()</p><p>作用：有一个参数n, 返回前n个元素</p><p>用法:Immutable.fromJS([1, 2, 3, 4]).take(2)//[1,2]</p><p>takeLast()</p><p>作用：有一个参数n, 返回最后n个元素</p><p>用法:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).takeLast(<span class="number">2</span>)<span class="comment">//[3,4]</span></span><br></pre></td></tr></table></figure></p><p>takeWhile()</p><p>作用：返回从第一次返回false之前的所有元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).skipWhile(list.takeWhile(<span class="function">(<span class="params">value,index,list</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">2</span>;</span><br><span class="line">&#125;))<span class="comment">// []</span></span><br></pre></td></tr></table></figure><p>takeUntil()</p><p>作用：返回从第一次返回true之前的所有元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).skipUntil(list.takeUntil(<span class="function">(<span class="params">value,index,list</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">2</span>;</span><br><span class="line">&#125;))<span class="comment">// [1,2]</span></span><br></pre></td></tr></table></figure><p>处理数据<br>reduce()</p><p>作用：和js中数组中的reduce相同,按索引升序的顺序处理元素</p><p>用法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).reduce(<span class="function">(<span class="params">pre,next,index,arr</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(pre+next)</span><br><span class="line">  <span class="keyword">return</span> pre+next; </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 3 6 10</span></span><br></pre></td></tr></table></figure><p>reduceRight()</p><p>作用：和js中数组中的reduce相同,按索引降序的顺序处理元素</p><p>用法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).reduceRight(<span class="function">(<span class="params">pre,next,index,arr</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(pre+next)</span><br><span class="line">  <span class="keyword">return</span> pre+next; </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 7 9 10</span></span><br></pre></td></tr></table></figure><p>every()</p><p>作用：判断整个对象总中所有的元素是不是都满足某一个条件，都满足返回true，反之返回false。</p><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).every(<span class="function">(<span class="params">value,index,arr</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">2</span></span><br><span class="line">&#125;) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>some()</p><p>作用：判断整个对象总中所有的元素是不是存在满足某一个条件的元素，若存在返回true，反之返回false。</p><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).some(<span class="function">(<span class="params">value,index,arr</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">2</span></span><br><span class="line">&#125;) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>join()</p><p>作用：同js中数组的join方法。把准换为字符串</p><p>用法：Immutable.fromJS([1,2,3,4]).join(‘,’) //1,2,3,4</p><p>isEmpty()</p><p>作用：判断是否为空</p><p>用法:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([]).isEmpty(); <span class="comment">// true</span></span><br><span class="line">Immutable.fromJS(&#123;&#125;).isEmpty(); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>count()</p><p>作用：返回元素个数，可自定义条件，返回满足条件的个数</p><p>用法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]);</span><br><span class="line"><span class="keyword">const</span> map = Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>,<span class="attr">c</span>:<span class="number">3</span>,<span class="attr">d</span>:<span class="number">4</span>&#125;);</span><br><span class="line"></span><br><span class="line">list.count(<span class="function">(<span class="params">value,index,list</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">2</span>;</span><br><span class="line">&#125;)    <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">map.count(<span class="function">(<span class="params">value,index,list</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">2</span>;</span><br><span class="line">&#125;)    <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>countBy()</p><p>作用：与count不同的是，countBy返回一个对象</p><p>用法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]);</span><br><span class="line"><span class="keyword">const</span> map = Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>,<span class="attr">c</span>:<span class="number">3</span>,<span class="attr">d</span>:<span class="number">4</span>&#125;);</span><br><span class="line">list.countBy(<span class="function">(<span class="params">value,index,list</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">2</span>;</span><br><span class="line">&#125; <span class="comment">//&#123;false: 2, true: 2&#125;</span></span><br><span class="line">map.countBy(<span class="function">(<span class="params">value,index,list</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">2</span>;</span><br><span class="line">&#125; <span class="comment">//&#123;false: 2, true: 2&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> immutable </tag>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>redux 源码学习——createStore</title>
      <link href="/2018/05/11/redux-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E2%80%94createStore/"/>
      <url>/2018/05/11/redux-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E2%80%94createStore/</url>
      <content type="html"><![CDATA[<h1>createStore 理解</h1><p>创建一个保存state树的Redux store，store，可以让你阅读state，发送actions，并订阅更改。改变store数据的唯一方法是调用<code>dispatch（）</code>方法。<br>应用中只能有一个store，指定state树的不同部分如何响应actions，可以通过使用<code>combineReducers</code>方法来组合多个reducer，将其转换为单个reducer。</p><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>createStore.js是redux的核心文件，对外暴露了一个createStore函数，函数执行后返回一个对象，这个对象包括四个方法，分别是dispatch, subscribe, getState, replaceReducer。这些方法都redux中store的关键方法，后面将慢慢的展开理解。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">createStore</span>(<span class="params">reducer, preloadedState, enhancer</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//other codes</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        dispatch,</span><br><span class="line">        subscribe,</span><br><span class="line">        getState,</span><br><span class="line">        replaceReducer,</span><br><span class="line">        [$$observable]: observable</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="createStore-的参数理解"><a href="#createStore-的参数理解" class="headerlink" title="createStore 的参数理解"></a>createStore 的参数理解</h2><p>createStore有三个参数：reducer, preloadedState, enhancer。</p><ul><li>reducer：reducer是一个函数，通过给定当前state树和要处理的actions，返回下一个state树。</li><li>preloadedState：初始state，初始状态。您可以选择指定它从应用程序的服务器中来融合state，或者还原先前序列化的用户会话。如果使用<code>combineReducers</code>来生成根reducer函数，则必须是一个与“combineReducers”键相同的对象。</li><li>enhancer：store增强器。您可以选择指定它通过第三方功能增强store，如中间件，时间旅行，持久化等。Redux附带的唯一store增强器是<code>applyMiddleware（）</code>方法。<br>这个参数特别有意思，如果该enhancer参数存在的话，会将当前的createStore函数作为参数传入enhancer函数，并且，enhancer执行之后得到一个新函数，该新函数其实就是一个加强版的createStore函数，新的函数会把之前的reducer和preloadeState作为参数传入并执行。这个enhancer参数为redux中间件提供了入口。</li></ul><h2 id="参数检查及异常处理"><a href="#参数检查及异常处理" class="headerlink" title="参数检查及异常处理"></a>参数检查及异常处理</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果没有传preloadedState参数，但是enhancer参数传了，把两者交换一下</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> preloadedState === <span class="string">'function'</span> &amp;&amp; <span class="keyword">typeof</span> enhancer === <span class="string">'undefined'</span>)          </span><br><span class="line">  &#123;</span><br><span class="line">    enhancer = preloadedState</span><br><span class="line">    preloadedState = <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//如果enhancer传了，但是不是函数，就抛出错误，否则执行enhancer函数，</span></span><br><span class="line"><span class="comment">//并继续执行enhancer函数返回的加强版的createStore函数，</span></span><br><span class="line"><span class="comment">//参数reducer以及preloadeState和原createStore函数保持一致</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> enhancer !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> enhancer !== <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Expected the enhancer to be a function.'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> enhancer(createStore)(reducer, preloadedState)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//如果reducer不是函数，则抛出错误</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> reducer !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Expected the reducer to be a function.'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定义局部变量"><a href="#定义局部变量" class="headerlink" title="定义局部变量"></a>定义局部变量</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> currentReducer = reducer <span class="comment">//保存了当前的reducer函数，该reducer函数可以被动态替换掉</span></span><br><span class="line"><span class="keyword">let</span> currentState = preloadedState <span class="comment">//保存了当前的state数据</span></span><br><span class="line"><span class="keyword">let</span> currentListeners = [] <span class="comment">//保存了当前注册的函数列表</span></span><br><span class="line"><span class="keyword">let</span> nextListeners = currentListeners</span><br><span class="line"><span class="keyword">let</span> isDispatching = <span class="literal">false</span>  <span class="comment">//是否正在dispatch一个action</span></span><br></pre></td></tr></table></figure><h2 id="定义返回store的方法"><a href="#定义返回store的方法" class="headerlink" title="定义返回store的方法"></a>定义返回store的方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//确保nextListeners和currentListeners不是同一个引用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ensureCanMutateNextListeners</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (nextListeners === currentListeners) &#123;</span><br><span class="line">    <span class="comment">//如果是同一个引用，则浅拷贝currentListeners到nextListeners</span></span><br><span class="line">    nextListeners = currentListeners.slice()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//getState函数，返回局部变量currentState，以获取当前状态</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getState</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> currentState</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册一个函数，将注册函数放入局部变量nextListeners数组里面</span></span><br><span class="line"><span class="comment">//注册函数的返回值是一个注销函数，注销函数执行可以将刚刚添加进nextListeners的listener函数又删除掉。这里很有意思，外部必须在调用subscribe执行现场保存好unsubscribe函数，否则将无法注销一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">subscribe</span>(<span class="params">listener</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//如果listener不是函数，直接报错</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> listener !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Expected listener to be a function.'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> isSubscribed = <span class="literal">true</span></span><br><span class="line">  <span class="comment">//确保nextListeners不是currentListeners，以保证修改的是nextListeners，而不是currentListeners</span></span><br><span class="line">  ensureCanMutateNextListeners()</span><br><span class="line">  <span class="comment">//将监听函数放入监听函数列表尾部</span></span><br><span class="line">  nextListeners.push(listener)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//返回一个函数，该函数可以从监听函数列表中删除刚刚注册的监听函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">unsubscribe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isSubscribed) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    isSubscribed = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    ensureCanMutateNextListeners()</span><br><span class="line">    <span class="keyword">const</span> index = nextListeners.indexOf(listener)</span><br><span class="line">    nextListeners.splice(index, <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//触发action的函数：每次触发一个action，currentListeners中的所有函数都要执行一遍</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">action</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//如果action不是普通的对象，直接报错</span></span><br><span class="line">  <span class="keyword">if</span> (!isPlainObject(action)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">      <span class="string">'Actions must be plain objects. '</span> +</span><br><span class="line">      <span class="string">'Use custom middleware for async actions.'</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//如果action没有type属性，直接报错：说明action对象必须要包含type字段</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> action.type === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">      <span class="string">'Actions may not have an undefined "type" property. '</span> +</span><br><span class="line">      <span class="string">'Have you misspelled a constant?'</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//如果当前正在触发另外一个action，直接报错</span></span><br><span class="line">  <span class="keyword">if</span> (isDispatching) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Reducers may not dispatch actions.'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//先将标志位置为true</span></span><br><span class="line">    isDispatching = <span class="literal">true</span></span><br><span class="line">    <span class="comment">//执行传入的reducer函数，该函数返回一个新的state对象，并赋值给currentState变量</span></span><br><span class="line">    currentState = currentReducer(currentState, action)</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//reducer函数执行完成后，将isDispatching恢复成false，方便下次action的触发</span></span><br><span class="line">    isDispatching = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//每一次触发一个action，所有的监听函数都要全部重新执行一遍，</span></span><br><span class="line">  <span class="comment">//并且把上次得到的新的监听函数列表赋值成为当前的监听函数列表。这是一个懒操作，并不是在subscribe的时候就操作了，而是在dispatch的时候才操作</span></span><br><span class="line">  <span class="keyword">const</span> listeners = currentListeners = nextListeners</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; listeners.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> listener = listeners[i]</span><br><span class="line">    listener()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//该dispatch函数的返回值是原来的action</span></span><br><span class="line">  <span class="keyword">return</span> action</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//替换reducer函数：这个函数允许运行时动态替换最开始调用createStore函数时传入的reducer，并且替换掉reducer之后，重新dispatch一个action，得到全新的currentState对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceReducer</span>(<span class="params">nextReducer</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//如果nextReducer不是函数，直接报错</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> nextReducer !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Expected the nextReducer to be a function.'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//把新的reducer赋值给当前的currentReducer变量，得到一个全新的currentReducer</span></span><br><span class="line">  currentReducer = nextReducer</span><br><span class="line">  <span class="comment">// 触发一个初始action：</span></span><br><span class="line">  <span class="comment">// 1.这样就可以完成一次监听函数列表的全部调用</span></span><br><span class="line">  <span class="comment">// 2.可以得到一个全新的currentState；</span></span><br><span class="line">  dispatch(&#123;<span class="attr">type</span>: ActionTypes.INIT&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observable</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> outerSubscribe = subscribe</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * The minimal observable subscription method.</span></span><br><span class="line"><span class="comment">      * @param &#123;Object&#125; observer Any object that can be used as an observer.</span></span><br><span class="line"><span class="comment">      * The observer object should have a `next` method.</span></span><br><span class="line"><span class="comment">      * @returns &#123;subscription&#125; An object with an `unsubscribe` method that can</span></span><br><span class="line"><span class="comment">      * be used to unsubscribe the observable from the store, and prevent further</span></span><br><span class="line"><span class="comment">      * emission of values from the observable.</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    subscribe(observer) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> observer !== <span class="string">'object'</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Expected the observer to be an object.'</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">observeState</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (observer.next) &#123;</span><br><span class="line">          observer.next(getState())</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      observeState()</span><br><span class="line">      <span class="keyword">const</span> unsubscribe = outerSubscribe(observeState)</span><br><span class="line">      <span class="keyword">return</span> &#123;unsubscribe&#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    [$$observable]() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化:"></a>初始化:</h2><p>初始化很简单，一句代码，直接调用一次dispatch，就会执行所有的注册函数，并且执行reducer函数，生成初始化的state<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//马上内部调用一次初始化的操作，根据传入的reducer函数，preloadedState生成一个全新的currentState和全新的reducer</span></span><br><span class="line">dispatch(&#123;<span class="attr">type</span>: ActionTypes.INIT&#125;)</span><br></pre></td></tr></table></figure></p><h1>总结</h1><ul><li>createStore函数定义了几个局部变量用于记录状态，主要包括currentState记录数据状态，currentListeners记录注册函数列表，currentReducer记录当前的reducer函数。</li><li>定义了几个函数用于修改上面的几个局部变量：主要包括getState函数用于获取currentState；replaceReducer用于替换currentReducer；subscribe用于修改currentListeners列表；dispatch用于触发currentReducer执行，生成新的currentState，并且，执行currentListeners列表中的每一个函数。</li></ul>]]></content>
      
      <categories>
          
          <category> redux源码学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> react </tag>
            
            <tag> redux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>瀑布流布局</title>
      <link href="/2018/05/09/%E7%80%91%E5%B8%83%E6%B5%81%E5%B8%83%E5%B1%80/"/>
      <url>/2018/05/09/%E7%80%91%E5%B8%83%E6%B5%81%E5%B8%83%E5%B1%80/</url>
      <content type="html"><![CDATA[<p>瀑布流布局</p><p>在知乎看到大佬说，学习前端的第一阶段要会一些js基本的特效，学习一下，做几个Demo来看看</p><p>好像有那么两种方法：<br>1、通过css来搞定瀑布流<br>2、通过js来控制</p><h2 id="CSS方法解决瀑布流"><a href="#CSS方法解决瀑布流" class="headerlink" title="CSS方法解决瀑布流"></a>CSS方法解决瀑布流</h2><p>因为css3有了一个新的属性:column<br>我们在图片或者需要瀑布流的模块的父元素设置column属性就可以达到这种瀑布流的效果。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">    <span class="comment">/*定位*/</span></span><br><span class="line">    <span class="comment">/*position: relative;*/</span></span><br><span class="line">    <span class="comment">/*多栏布局 设置栏宽度*/</span></span><br><span class="line">    <span class="attribute">-webkit-column-width</span>:<span class="number">202px</span>;</span><br><span class="line">    <span class="attribute">-moz-column-width</span>:<span class="number">202px</span>;</span><br><span class="line">    <span class="attribute">column-width</span>:<span class="number">202px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="JS方法来解决瀑布流布局"><a href="#JS方法来解决瀑布流布局" class="headerlink" title="JS方法来解决瀑布流布局"></a>JS方法来解决瀑布流布局</h2><p>首先先把html写出来：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>瀑布流布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://img4.imgtn.bdimg.com/it/u=3673652172,785167112&amp;fm=27&amp;gp=0.jpg"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://img1.imgtn.bdimg.com/it/u=2752884811,3342547378&amp;fm=27&amp;gp=0.jpg"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://img5.imgtn.bdimg.com/it/u=2573504723,2456120500&amp;fm=27&amp;gp=0.jpg"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://img0.imgtn.bdimg.com/it/u=3214770734,3861052448&amp;fm=27&amp;gp=0.jpg"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://img4.imgtn.bdimg.com/it/u=3407532446,2830180038&amp;fm=27&amp;gp=0.jpg"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://img0.imgtn.bdimg.com/it/u=30302420,912099376&amp;fm=27&amp;gp=0.jpg"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://img5.imgtn.bdimg.com/it/u=2347360460,2805552283&amp;fm=27&amp;gp=0.jpg"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在html里写了很多的图片（这里没有写出来，也可以从后台拉取数据）<br>然后对图片做一些样式的调整：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    * &#123;</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">0px</span>;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-id">#main</span> &#123;</span><br><span class="line">      <span class="attribute">position</span>: relative;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.wrap</span> &#123;</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">15px</span> <span class="number">0px</span> <span class="number">0px</span> <span class="number">15px</span>;</span><br><span class="line">      <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.img</span> &#123;</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">      <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#ccc</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.img</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">240px</span>;</span><br><span class="line">      <span class="attribute">height</span>: auto;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br></pre></td></tr></table></figure></p><p>对图片做一些操作，宽度确定，高度auto;<br>然后开始用js对这些图片做一些处理<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      waterFull(<span class="string">'main'</span>, <span class="string">'wrap'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">waterFull</span>(<span class="params">parent, children</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> oParent = <span class="built_in">document</span>.getElementById(parent);</span><br><span class="line">      <span class="keyword">var</span> oWraps = getByClass(oParent, children);</span><br><span class="line">      <span class="comment">//计算整个页面显示的列数</span></span><br><span class="line">      <span class="keyword">var</span> oWrapWeight = oWraps[<span class="number">0</span>].offsetWidth;</span><br><span class="line">      <span class="keyword">var</span> cols = <span class="built_in">Math</span>.floor(<span class="built_in">document</span>.documentElement.clientWidth / oWrapWeight);</span><br><span class="line">      <span class="comment">//设置main的宽度，并且居中</span></span><br><span class="line">      oParent.style.cssText = <span class="string">'width:'</span> + oWrapWeight * cols + <span class="string">'px; margin: 0 auto'</span>;</span><br><span class="line">      <span class="comment">//找出高度最小的图片，将下一个图片放在下面</span></span><br><span class="line">      <span class="comment">//定义一个数组，存放每一列的高度，初始化存的是第一行的所有列的高度</span></span><br><span class="line">      <span class="keyword">var</span> arrHeight = [];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; oWraps.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; cols) &#123;</span><br><span class="line">          arrHeight.push(oWraps[i].offsetHeight);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">var</span> minHeight = <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>, arrHeight);</span><br><span class="line">          <span class="keyword">var</span> minIndex = getMinhIndex(arrHeight, minHeight);</span><br><span class="line">          oWraps[i].style.position = <span class="string">'absolute'</span>;</span><br><span class="line">          oWraps[i].style.top = minHeight + <span class="string">'px'</span>;</span><br><span class="line">          oWraps[i].style.left = minIndex * oWrapWeight + <span class="string">'px'</span>;</span><br><span class="line">          arrHeight[minIndex] += oWraps[i].offsetHeight;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getByClass</span>(<span class="params">parent, className</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> boxArr = <span class="keyword">new</span> <span class="built_in">Array</span>();<span class="comment">//用来获取所有class为box的元素</span></span><br><span class="line">      oElement = parent.getElementsByTagName(<span class="string">'*'</span>);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; oElement.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (oElement[i].className == className) &#123;</span><br><span class="line">          boxArr.push(oElement[i]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">return</span> boxArr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取当前最小值得下标</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getMinhIndex</span>(<span class="params">array, min</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> array) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array[i] == min)</span><br><span class="line">          <span class="keyword">return</span> i;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>搞定～</p>]]></content>
      
      <categories>
          
          <category> Demo练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> CSS </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>react 16.0 新特性学习</title>
      <link href="/2018/05/09/react-16-0-%E6%96%B0%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0/"/>
      <url>/2018/05/09/react-16-0-%E6%96%B0%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h2 id="1、Fragment"><a href="#1、Fragment" class="headerlink" title="1、Fragment"></a>1、Fragment</h2><p>新版本的render可以返回数组、字符串、react组件、数字、boolean值<br>v15.x必须要一个标签来包裹<br><br>Before v16<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;label htmlFor=<span class="string">"name"</span>&gt;名字：&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">            &lt;input id="name" type="text" placeholder="请输入名字"/</span>&gt;</span><br><span class="line">            &lt;button&gt;搜索&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">    );</span><br></pre></td></tr></table></figure></p><p>When v16.0.0<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    [</span><br><span class="line">        &lt;label htmlFor=<span class="string">"name"</span>&gt;名字：&lt;<span class="regexp">/label&gt;,</span></span><br><span class="line"><span class="regexp">        &lt;input id="name" type="text" placeholder="请输入名字"/</span>&gt;,</span><br><span class="line">        &lt;button&gt;搜索&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    ]</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure></p><p>Now v16.2.0<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    &lt;React.Fragment&gt;</span><br><span class="line">       &lt;label htmlFor=<span class="string">"name"</span>&gt;名字：&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">       &lt;input id="name" type="text" placeholder="请输入名字"/</span>&gt;</span><br><span class="line">       &lt;button&gt;搜索&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>React.Fragment&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>片段(fragments) 可以让你将子元素列表添加到一个分组中，并且不会在DOM中增加额外节点。key 是唯一可以传递给 Fragment 的属性<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    &lt;dl&gt;</span><br><span class="line">      &#123;props.items.map(<span class="function"><span class="params">item</span> =&gt;</span> (</span><br><span class="line">        <span class="comment">// 没有`key`，将会触发一个key警告</span></span><br><span class="line">        &lt;React.Fragment key=&#123;item.id&#125;&gt;</span><br><span class="line">          &lt;dt&gt;&#123;item.term&#125;&lt;<span class="regexp">/dt&gt;</span></span><br><span class="line"><span class="regexp">          &lt;dd&gt;&#123;item.description&#125;&lt;/</span>dd&gt;</span><br><span class="line">        &lt;<span class="regexp">/React.Fragment&gt;</span></span><br><span class="line"><span class="regexp">      ))&#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>dl&gt;</span><br><span class="line">  );</span><br></pre></td></tr></table></figure></p><p>简明写法&lt;&gt;&lt;/&gt;，但是还没有被更多的工具支持，它不支持 键(keys) 或 属性(attributes)。<br>Further</p><p>babel v7.0.0+ , babel-plugin-transform-react-jsx-source or babel-preset-react</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">       &lt;label htmlFor=<span class="string">"name"</span>&gt;名字：&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">       &lt;input id="name" type="text" placeholder="请输入名字"/</span>&gt;</span><br><span class="line">       &lt;button&gt;搜索&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>DOM Fragment</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> select = <span class="built_in">document</span>.getElementById(<span class="string">'select'</span>)</span><br><span class="line"><span class="keyword">const</span> values = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> fragment = <span class="built_in">document</span>.createDocumentFragment()</span><br><span class="line">values.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> option = <span class="built_in">document</span>.createElement(<span class="string">'option'</span>)</span><br><span class="line">    option.value = item</span><br><span class="line">    option.innerHTML = <span class="string">`小明<span class="subst">$&#123;item&#125;</span>号`</span></span><br><span class="line">    fragment.appendChild(option)</span><br><span class="line">&#125;)</span><br><span class="line">select.appendChild(fragment)</span><br></pre></td></tr></table></figure><h2 id="2、Portals"><a href="#2、Portals" class="headerlink" title="2、Portals"></a>2、Portals</h2><p>Portals是reactjs16提供的官方解决方案，使得组件可以脱离父组件层级挂载在DOM树的任何位置。<br>普通情况下，组件的render函数返回的元素会被挂载在它的父级组件上。<br>然而，有些元素需要被挂载在更高层级的位置。最典型的应用场景：当父组件具有overflow: hidden或者z-index的样式设置时，组件有可能被其他元素遮挡，就可以考虑使用Portal使组件的挂载脱离父组件。<br>组件的挂载点虽然可以脱离父组件，但组件的事件通过冒泡机制仍可以传给父组件。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"bd"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;div id=<span class="string">"modal"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">render(</span><br><span class="line">  &lt;App&gt;</span><br><span class="line">    &lt;SearchBox&gt;</span><br><span class="line">      &lt;Modal&gt;</span><br><span class="line">        &lt;div&gt;模态框&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>Modal&gt;</span><br><span class="line">    &lt;<span class="regexp">/SearchBox&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>App&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'bd'</span>),</span><br><span class="line">  () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">    <span class="keyword">super</span>(options)</span><br><span class="line">    <span class="keyword">this</span>.handleClick = <span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    alert(<span class="string">'react component tree propagation!'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"app"</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;this.props.children&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modal</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">      <span class="keyword">super</span>(options)</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> createPortal(<span class="keyword">this</span>.props.children, <span class="built_in">document</span>.getElementById(<span class="string">'modal'</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"bd"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;label <span class="keyword">for</span>=<span class="string">"name"</span>&gt;名字：&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">        &lt;input type="text" id="name" placeholder="请输入名字"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button&gt;搜索&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;div id=<span class="string">"modal"</span>&gt;</span><br><span class="line">    &lt;div&gt;模态框&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;App&gt;</span><br><span class="line">    &lt;div className=&quot;app&quot; onClick=bound handleClick()&gt;</span><br><span class="line">        &lt;SearchBox&gt;</span><br><span class="line">            &lt;labelhtmlFor=&quot;name&quot;&gt;名字：&lt;/label&gt;</span><br><span class="line">            &lt;inputid=&quot;name&quot;type=&quot;text&quot;placeholder=&quot;请输入名字&quot;&gt;&lt;/input&gt;</span><br><span class="line">            &lt;button&gt;搜索&lt;/button&gt;</span><br><span class="line">            &lt;Modal&gt;</span><br><span class="line">                &lt;ReactPortal target=HTMLDivElement&#123;…&#125;&gt;</span><br><span class="line">                    &lt;div&gt;模态框&lt;/div&gt;</span><br><span class="line">                &lt;/ReactPortal&gt;</span><br><span class="line">            &lt;/Modal&gt;</span><br><span class="line">        &lt;/SearchBox&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/App&gt;</span><br></pre></td></tr></table></figure><p>Before portals</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ReactDom.render(reactChild, container, callback)</span><br><span class="line"></span><br><span class="line">ReactDom.unmountComponentAtNode(container)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ReactDom.unstable_renderSubtreeIntoContainer(</span><br><span class="line">    context,</span><br><span class="line">    reactChild,</span><br><span class="line">    domNode,</span><br><span class="line">    callback</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">ReactDom.unmountComponentAtNode(container)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">render: ReactMount._renderSubtreeIntoContainer(<span class="literal">null</span>, reactChild, container, callback )</span><br><span class="line"></span><br><span class="line">unstable_renderSubtreeIntoContainer: ReactMount._renderSubtreeIntoContainer(context, reactChild, container, callback)</span><br></pre></td></tr></table></figure><h2 id="3、Error-Boundaries"><a href="#3、Error-Boundaries" class="headerlink" title="3、Error Boundaries"></a>3、Error Boundaries</h2><p>之前react在渲染过程中或者是生命周期内出现了致命的错误，react会从根组件上把所有的组件都卸载下来，以防止展现错误的数据，但这不是最好的用户体验。React 16修复了这一点，引入了Error Boundary的概念，中文译为“错误边界”，当某个组件发生错误时，我们可以通过Error Boundary捕获到错误并对错误做优雅处理。（注：它并不能捕获runtime所有的错误，比如组件回调事件里的错误，可以把它想象成传统的try-catch语句）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ErrorBoundary</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">hasError</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 新增了componentDidCatch这个生命周期函数，它可以捕获自身及子树上的错误并对错误做优雅处理，包括上报错误日志、展示出错提示，而不是卸载整个组件树。</span></span><br><span class="line">  componentDidCatch(error, info) &#123;</span><br><span class="line">    <span class="comment">// 错误代理组件的展示与否</span></span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">hasError</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    <span class="comment">// 在这里我们可以对错误进行记录</span></span><br><span class="line">    logErrorToMyService(error, info);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state.hasError) &#123;</span><br><span class="line">      <span class="comment">// 在这里我们可以书写自己想要展示的ui组件</span></span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Something went wrong.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.props.children;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的组件是当页面中有错误时我们想要展示的效果，具体用法如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">render()&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;ErrorBoundary&gt;    <span class="comment">// 外层组件我们定义的错误组件</span></span><br><span class="line">        &lt;Profile user=&#123;<span class="keyword">this</span>.state.user&#125; /&gt;     <span class="comment">// 内层组件是我们将要监视的自定义组件</span></span><br><span class="line">      &lt;<span class="regexp">/ErrorBoundary&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;this.onClick&#125;&gt;Update&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><p>这个组件能够不仅仅能够监听到本组件的错误，连同它下面的子组件的错误也可以监听到</p><p>###不能捕获的错误</p><ul><li>事件处理 </li><li>异步回调 </li><li>服务端渲染 </li><li>error boundary组件自身抛出的错误（只能由父级捕获）<br>###<strong>react遇到未捕获的错误会怎么办</strong><br>对 React16 来说，一个未捕获的错误会导致整个应用不能被挂载</li></ul><h2 id="4、setState传入null时不会再触发更新"><a href="#4、setState传入null时不会再触发更新" class="headerlink" title="4、setState传入null时不会再触发更新"></a>4、setState传入null时不会再触发更新</h2><p>之前的setState不管传入什么只要调用了这么方法就会渲染<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">selectCity(e)&#123;</span><br><span class="line">  <span class="keyword">const</span> newValue = e.target.value;</span><br><span class="line">  <span class="keyword">this</span>.setState(<span class="function">(<span class="params">state</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(state.city===newValue)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">city</span>:newValue&#125;</span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><h2 id="5、v16-0支持自定义的dom属性"><a href="#5、v16-0支持自定义的dom属性" class="headerlink" title="5、v16.0支持自定义的dom属性"></a>5、v16.0支持自定义的dom属性</h2><p>之前的版本对于自定义属性react会在属性前加上data-**来进行处理，现在对于部分属性去除了这种写法，拥抱了原生dom，这样可以减少react的代码，提升了性能</p><h2 id="6、其他"><a href="#6、其他" class="headerlink" title="6、其他"></a>6、其他</h2><p>更好的服务器端渲染：React 16的SSR被完全重写，新的实现非常快，接近3倍性能于React 15，现在提供一种流模式streaming，可以更快地把渲染的字节发送到客户端。</p><p>react v16采用了最新的技术“Fiber.”</p><p>React Server Side Rendering 解决 SPA 应用的 SEO 问题</p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Event Loop 问题理解</title>
      <link href="/2018/05/09/Event-Loop-%E9%97%AE%E9%A2%98%E7%90%86%E8%A7%A3/"/>
      <url>/2018/05/09/Event-Loop-%E9%97%AE%E9%A2%98%E7%90%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>Q1:事件循环机制是什么？<br>A1:JavaScript 是典型的单线程单并发语言，即表示在同一时间内其只能执行单个任务，同域浏览器中 JavaScript 主线程拥有一个函数调用栈(主线程)以及多个任务队列。</p><p>Q2:什么是任务？<br>A2:任务分为两种，一种是同步任务，一种是异步任务。<br>      同步任务，就是主线程中排队执行的任务；<br>      异步任务，不先进入主线程，而是先进入“任务队列”的任务，只有任务队列通知了主线程，某个异步任务可以执行了，该任务才会进入主线程执行</p><p>Q3:事件循环（Event Loop）的原理是什么？<br>A3:首先，主线程会依次执行代码。<br>    当主线栈的函数调用栈为空时，即会根据事件循环（Event Loop）机制来从任务队列中提取出待执行的回调并执行。<br>    执行的过程同样会进行函数帧的入栈出栈操作。这样不断的循环往复，这就是事件循环（Event Loop）。<br>    只要主线程空了，就会去读取”任务队列”，这就是JavaScript的运行机制</p><p>Q4:任务队列中的任务有几种？<br>A4:任务队列中的任务分为两种：MacroTask (task) 和 MicroTask 。Event Loop 处理这两种任务。</p><p>Q5:MacroTask (task) 和 MicroTask各包含什么任务？<br>A5: </p><h2 id="microtasks"><a href="#microtasks" class="headerlink" title="microtasks:"></a>microtasks:</h2><pre><code>process.nextTickpromiseObject.observeMutationObserver</code></pre><h2 id="macrotasks"><a href="#macrotasks" class="headerlink" title="macrotasks:"></a>macrotasks:</h2><pre><code>setTimeoutsetIntervalsetImmediateI/OUI渲染</code></pre><p>Q6:MacroTask和MicroTask的运行机制是什么？<br>A6:事件循环的顺序，决定了JavaScript代码的执行顺序。它从script(整体代码)开始第一次循环。之后全局上下文进入函数调用栈。直到调用栈清空(只剩全局)，然后执行所有的microtask。当所有可执行的micro-task执行完毕之后。循环再次从macro-task开始，找到其中一个任务队列执行完毕，然后再执行所有的micro-task，这样一直循环下去。<br>一句话说，microtask将会被添加到任务队列末尾进行处理。</p><p>MacroTask运行机制<br><img src="https://github.com/kaisa911/studyNotes/blob/master/public/image/macroTask.png?raw=true" alt="MacroTask运行机制"><br>MicroTask运行机制<br><img src="https://github.com/kaisa911/studyNotes/blob/master/public/image/microTask.png?raw=true" alt="MicroTask运行机制"><br>Q7:来尝试一道面试题<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'start'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> interval = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;  </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'setInterval'</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;  </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'setTimeout 1'</span>)</span><br><span class="line">  <span class="built_in">Promise</span>.resolve()</span><br><span class="line">      .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'promise 3'</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">      .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'promise 4'</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">      .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'setTimeout 2'</span>)</span><br><span class="line">          <span class="built_in">Promise</span>.resolve()</span><br><span class="line">              .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'promise 5'</span>)</span><br><span class="line">              &#125;)</span><br><span class="line">              .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'promise 6'</span>)</span><br><span class="line">              &#125;)</span><br><span class="line">              .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                clearInterval(interval)</span><br><span class="line">              &#125;)</span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve()</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;  </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'promise 1'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'promise 2'</span>)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></p><p>A7:start<br>promise 1<br>promise 2<br>setInterval<br>setTimeout 1<br>promise 3<br>promise 4<br>setInterval<br>setTimeout 2<br>promise 5<br>promise 6</p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PWA 之Q&amp;A</title>
      <link href="/2018/05/08/PWA-%E4%B9%8BQ-A/"/>
      <url>/2018/05/08/PWA-%E4%B9%8BQ-A/</url>
      <content type="html"><![CDATA[<p>——吉吉《PWA初窥》学习笔记</p><p>Q1：什么是PWA？<br>A1: PWA全称Progressive Web App，即渐进式WEB应用。一个 PWA 应用首先是一个网页, 可以通过 Web 技术编写出一个网页应用. 随后添加上 App Manifest 和 Service Worker 来实现 PWA 的安装和离线等功能</p><p>Q2: PWA解决了什么问题？<br>A2:  1)  可以添加至主屏幕，点击主屏幕图标可以实现启动动画以及隐藏地址栏<br>       2）实现离线缓存功能，即使用户手机没有网络，依然可以使用一些离线功能<br>       3）实现了消息推送</p><p>Q3:  App Manifest 是什么，有什么用？<br>A3:  Web应用程序清单在一个JSON文本文件中提供有关应用程序的信息（如名称，作者，图标和描述）。manifest 的目的是将Web应用程序安装到设备的主屏幕，为用户提供更快的访问和更丰富的体验。</p><p>Q4:  什么是service worker，有什么作用？<br>A4:  Service Worker 是 Chrome 团队提出和力推的一个 WEB API，用于给 web 应用提供高级的可持续的后台处理能力。<br>        Service Workers 就像介于服务器和网页之间的拦截器，能够拦截进出的HTTP 请求，从而完全控制你的网站。</p><p>Q5:  service worker 有什么特点？<br>A5：1）resource caching and push notifications<br>        2）client-side programmable proxy between web app and the outside world<br>        3）service workers run independent of the application they are associated with<br>        4）the primary uses for a service workers are to act as a caching agent to handle network requests<br>        5）and to store content for offline use and secondly to handle push messaging the<br>        6）information that you need to persist and reuse across restartswork with IndexedDB databases<br>        7）promise-based<br>        8）only available on secure origins(https)</p><p>Q6: HTTP缓存与service worker缓存有什么区别<br>A6: HTTP缓存<br>       Web 服务器可以使用 Expires 首部来通知 Web 客户端，它可以使用资源的当前副本，直到指定的“过期<br>       时间”。反过来，浏览器可以缓存此资源，并且只有在有效期满后才会再次检查新版本。<br>       使用 HTTP 缓存意味着你要依赖服务器来告诉你何时缓存资源和何时过期。<br>       service worker缓存<br>       Service Workers 的强大在于它们拦截 HTTP 请求的能力<br>       进入任何传入的 HTTP 请求，并决定想要如何响应。在你的 Service Worker 中，可以编写逻辑来决定<br>       想要缓存的资源，以及需要满足什么条件和资源需要缓存多久。一切尽归你掌控！<br>       <img src="https://github.com/kaisa911/studyNotes/blob/master/public/image/hc.png?raw=true" alt="service worker缓存"></p><p>Q7: service worker的生命周期是怎样的？<br>A7: <img src="https://github.com/kaisa911/studyNotes/blob/master/public/image/lifecycle.png?raw=true" alt="生命周期"></p><p>Q8: 怎么配置一个PWA<br>A8: 1）准备一个html文件，以及相应的css等：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Minimal PWA<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, user-scalable=no"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"main.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"manifest"</span> <span class="attr">href</span>=<span class="string">"manifest.json"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Revision 1<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main-text"</span>&gt;</span>Minimal PWA, open Console for more~~~<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>2）添加manifest.json文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"Minimal app to try PWA"</span>,</span><br><span class="line">  <span class="attr">"short_name"</span>: <span class="string">"Minimal PWA"</span>,</span><br><span class="line">  <span class="attr">"display"</span>: <span class="string">"standalone"</span>,</span><br><span class="line">  <span class="attr">"start_url"</span>: <span class="string">"/"</span>,</span><br><span class="line">  <span class="attr">"theme_color"</span>: <span class="string">"#8888ff"</span>,</span><br><span class="line">  <span class="attr">"background_color"</span>: <span class="string">"#aaaaff"</span>,</span><br><span class="line">  <span class="attr">"icons"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"e.png"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"256x256"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"image/png"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3)添加Service Worker<br><br>Service Worker 在网页已经关闭的情况下还可以运行, 用来实现页面的缓存和离线, 后台通知等等功能。sw.js 文件需要在 HTML 当中引入:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">if</span> (navigator.serviceWorker != <span class="literal">null</span>) &#123;</span></span><br><span class="line"><span class="javascript">    navigator.serviceWorker.register(<span class="string">'sw.js'</span>)</span></span><br><span class="line"><span class="javascript">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">registration</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">'Registered events at scope: '</span>, registration.scope);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>4)处理静态缓存<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cacheStorageKey = <span class="string">'minimal-pwa-1'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cacheList = [</span><br><span class="line">  <span class="string">'/'</span>,</span><br><span class="line">  <span class="string">"index.html"</span>,</span><br><span class="line">  <span class="string">"main.css"</span>,</span><br><span class="line">  <span class="string">"e.png"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>借助 Service Worker, 可以在注册完成安装 Service Worker 时, 抓取资源写入缓存:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">self.addEventListener(<span class="string">'install'</span>, e =&gt; &#123;</span><br><span class="line">  e.waitUntil(</span><br><span class="line">    caches.open(cacheStorageKey)</span><br><span class="line">    .then(<span class="function"><span class="params">cache</span> =&gt;</span> cache.addAll(cacheList))</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> self.skipWaiting())</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>调用 self.skipWaiting() 方法是为了在页面更新的过程当中, 新的 Service Worker 脚本能立即激活和生效。<br>5）处理动态缓存<br>网页抓取资源的过程中, 在 Service Worker 可以捕获到 fetch 事件, 可以编写代码决定如何响应资源的请求:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">self.addEventListener(<span class="string">'fetch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.respondWith(</span><br><span class="line">    caches.match(e.request).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (response != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> fetch(e.request.url)</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>真实的项目当中, 可以根据资源的类型, 站点的特点, 可以专门设计复杂的策略。fetch 事件当中甚至可以手动生成 Response 返回给页面。<br>6)更新静态资源<br>缓存的资源随着版本的更新会过期, 所以会根据缓存的字符串名称(这里变量为 cacheStorageKey, 值用了 “minimal-pwa-1”)清除旧缓存, 可以遍历所有的缓存名称逐一判断决决定是否清除(备注: 简化的写法, Promise.all 中 return undefined 可能出错, 见评论):</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">self.addEventListener(<span class="string">'activate'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.waitUntil(</span><br><span class="line">   <span class="built_in">Promise</span>.all(</span><br><span class="line">        cacheNames.filter(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> name !== cacheStorageKey</span><br><span class="line">        &#125;).map(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> caches.delete(name)</span><br><span class="line">        &#125;)</span><br><span class="line">      ).then(<span class="function"><span class="params">()</span> =&gt;</span> self.clients.claim())</span><br><span class="line">     &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在新安装的 Service Worker 中通过调用 self.clients.claim() 取得页面的控制权, 这样之后打开页面都会使用版本更新的缓存。旧的 Service Worker 脚本不再控制着页面之后会被停止。</p><p>相关文章：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/25459319" target="_blank" rel="noopener">PWA 入门: 写个非常简单的 PWA 页面</a></li><li><a href="https://segmentfault.com/a/1190000012353473" target="_blank" rel="noopener">讲讲PWA</a></li><li><a href="https://developers.google.cn/web/fundamentals/codelabs/your-first-pwapp/" target="_blank" rel="noopener">您的第一个 Progressive Web App</a></li></ul>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Javascript 继承学习</title>
      <link href="/2018/05/08/Javascript%20%E7%BB%A7%E6%89%BF%E5%AD%A6%E4%B9%A0/"/>
      <url>/2018/05/08/Javascript%20%E7%BB%A7%E6%89%BF%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>javascript的继承方式有好多方式，之前ES5通过原型链继承，ES6中引入了Class，javascript可以像java一样使用extends关键字继承。现在整理一下js中的继承方式。</p><p></p><h2>ES5中的继承方式</h2><p></p><p></p><h3>一、构造函数的继承</h3><br>现在有一个”动物”对象的构造函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.species = <span class="string">"动物"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>还有一个”猫”对象的构造函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name,color</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.color = color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.构造函数绑定:使用call或apply方法，将父对象的构造函数绑定在子对象上。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name,color</span>)</span>&#123;</span><br><span class="line">  Animal.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> cat1 = <span class="keyword">new</span> Cat(<span class="string">"大毛"</span>,<span class="string">"黄色"</span>);</span><br><span class="line">alert(cat1.species); <span class="comment">// 动物</span></span><br></pre></td></tr></table></figure><p>此种继承方式只能继承父构造函数中的属性,不能继承父构造函数原型上的属性.Animal.apply(this, arguments)也可用Animal.call(this)替换.cat对象有两个层级,第一级存放着自有属性以及父构造器中的属性,第二级存放着自己函数原型上的属性(Cat.prototype)</p><p>2.prototype模式:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Cat.prototype = <span class="keyword">new</span> Animal();</span><br><span class="line">Cat.prototype.constructor = Cat;</span><br><span class="line"><span class="keyword">var</span> cat1 = <span class="keyword">new</span> Cat(<span class="string">"大毛"</span>,<span class="string">"黄色"</span>);</span><br><span class="line">alert(cat1.species); <span class="comment">// 动物</span></span><br></pre></td></tr></table></figure><p>遵循一点，即如果替换了prototype对象，<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">o.prototype = &#123;&#125;;</span><br></pre></td></tr></table></figure></p><p>那么，下一步必然是为新的prototype对象加上constructor属性，并将这个属性指回原来的构造函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">o.prototype.constructor = o;</span><br></pre></td></tr></table></figure></p><p>此种继承方式既能继承父构造函数中的属性,也能继承父构造函数原型上的属性.cat对象有三个层级,第一级存放着自有属性,第二级存放着父构造器的属性(加上constructor,指向创建该对象(cat)的构造器(Cat)),第三级存放着父构造器原型上的属性.</p><p>3.直接继承prototype:<br>第3种方法是对第2种方法的改进。由于Animal对象中，不变的属性都可以直接写入Animal.prototype。所以，我们也可以让Cat()跳过 Animal()，直接继承Animal.prototype。</p><p>先将Animal对象改写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>)</span>&#123; &#125;</span><br><span class="line">Animal.prototype.species = <span class="string">"动物"</span>;</span><br></pre></td></tr></table></figure><p>然后，将Cat的prototype对象，然后指向Animal的prototype对象，这样就完成了继承。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Cat.prototype = Animal.prototype;</span><br><span class="line">Cat.prototype.constructor = Cat;</span><br><span class="line"><span class="keyword">var</span> cat1 = <span class="keyword">new</span> Cat(<span class="string">"大毛"</span>,<span class="string">"黄色"</span>);</span><br><span class="line">alert(cat1.species); <span class="comment">// 动物</span></span><br></pre></td></tr></table></figure><p>此种继承方式只能继承父构造器原型上的属性.cat对象有两个层级,第一级存放着自有属性,第二级存放着父构造器原型上的属性(加上constructor,指向创建该对象(cat)的构造器(Cat)).注意:Cat.prototype.constructor = Cat会将Animal.prototype.constructor也改成Cat,从而影响父构造器创建对象</p><p>4.空对象作为中介:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">Child, Parent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">  F.prototype = Parent.prototype;</span><br><span class="line">  Child.prototype = <span class="keyword">new</span> F();</span><br><span class="line">  Child.prototype.constructor = Child;</span><br><span class="line">  Child.uber = Parent.prototype;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">extend(Cat,Animal);</span><br><span class="line"><span class="keyword">var</span> cat1 = <span class="keyword">new</span> Cat(<span class="string">"大毛"</span>,<span class="string">"黄色"</span>);</span><br><span class="line">alert(cat1.species); <span class="comment">// 动物</span></span><br></pre></td></tr></table></figure><p>此种继承方式只能继承父构造器原型上的属性.cat对象有三个层级,第一级存放着自有属性,第二级存放着临时构造器F的属性(加上constructor,指向创建该对象(cat)的构造器(Cat)),第三级存放着父构造器原型上的属性.注意:临时构造器只充当中介的作用,一般不会有自己的属性.</p><p>5.浅拷贝继承:<br>首先，还是把Animal的所有不变属性，都放到它的prototype对象上。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>)</span>&#123; &#125;</span><br><span class="line">Animal.prototype.species = <span class="string">"动物"</span>;</span><br></pre></td></tr></table></figure></p><p>然后，再写一个函数，实现属性拷贝的目的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend2</span>(<span class="params">Child, Parent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> p = Parent.prototype;</span><br><span class="line">  <span class="keyword">var</span> c = Child.prototype;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> p) &#123;</span><br><span class="line">    c[i] = p[i];</span><br><span class="line">  &#125;</span><br><span class="line">  c.uber = p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>用法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">extend2(Cat, Animal);</span><br><span class="line"><span class="keyword">var</span> cat1 = <span class="keyword">new</span> Cat(<span class="string">"大毛"</span>,<span class="string">"黄色"</span>);</span><br><span class="line">alert(cat1.species); <span class="comment">// 动物</span></span><br></pre></td></tr></table></figure><p>此种继承方式只能继承父构造器原型上的属性.cat对象有两个层级,第一级存放着自有属性,第二级存放着父构造器原型上的除了constructor和<strong>proto</strong>的属性(不会拷贝原型上的constructor和<strong>proto</strong>属性).适合父构造器原型上的自增属性为基本数据类型的情况.</p><p></p><h3>二、非构造函数的继承</h3><br>比如，现在有一个对象，叫做”中国人”。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Chinese = &#123;</span><br><span class="line">  nation:<span class="string">'中国'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><p>还有一个对象，叫做”医生”。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Doctor =&#123;</span><br><span class="line">  career:<span class="string">'医生'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>1.object()方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  F.prototype = o;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个object()函数，其实只做一件事，就是把子对象的prototype属性，指向父对象，从而使得子对象与父对象连在一起。<br>用法：<br>第一步先在父对象的基础上，生成子对象：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Doctor = object(Chinese);</span><br></pre></td></tr></table></figure></p><p>然后，再加上子对象本身的属性：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Doctor.career = <span class="string">'医生'</span>;</span><br></pre></td></tr></table></figure></p><p>这时，子对象已经继承了父对象的属性了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(Doctor.nation); <span class="comment">//中国</span></span><br></pre></td></tr></table></figure></p><p>2.浅拷贝<br>除了使用”prototype链”以外，还有另一种思路：把父对象的属性，全部拷贝给子对象，也能实现继承。</p><p>就是在做拷贝：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extendCopy</span>(<span class="params">p</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> c = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> p) &#123; </span><br><span class="line">  c[i] = p[i];</span><br><span class="line">&#125;</span><br><span class="line">c.uber = p;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>用法，这样写：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Doctor = extendCopy(Chinese);</span><br><span class="line">Doctor.career = <span class="string">'医生'</span>;</span><br><span class="line">alert(Doctor.nation); <span class="comment">// 中国</span></span><br></pre></td></tr></table></figure></p><p>样的拷贝有一个问题。那就是，如果父对象的属性等于数组或另一个对象，那么实际上，子对象获得的只是一个内存地址，而不是真正拷贝，因此存在父对象被篡改的可能。</p><p>3.深拷贝<br>所谓”深拷贝”，就是能够实现真正意义上的数组和对象的拷贝。它的实现并不难，只要递归调用”浅拷贝”就行了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">p, c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> c = c || &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> p) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> p[i] === <span class="string">'object'</span>) &#123;</span><br><span class="line">      c[i] = (p[i].constructor === <span class="built_in">Array</span>) ? [] : &#123;&#125;;</span><br><span class="line">      deepCopy(p[i], c[i]);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        c[i] = p[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用的时候这样写：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Doctor = deepCopy(Chinese);</span><br></pre></td></tr></table></figure></p><p>现在，给父对象加一个属性，值为数组。然后，在子对象上修改这个属性：<br>这时，父对象就不会受到影响了。<br>目前，jQuery库使用的就是这种继承方法。</p><p></p><h2>ES6中的继承方式</h2><br>Class 可以通过extends关键字实现继承，这比 ES5 的通过修改原型链实现继承，要清晰和方便很多。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="comment">//一些属性</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorPoint</span> <span class="keyword">extends</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="comment">//一些属性</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorPoint</span> <span class="keyword">extends</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(...args) &#123;</span><br><span class="line">    <span class="keyword">super</span>(...args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><ul><li>上面代码定义了一个ColorPoint类，该类通过extends关键字，继承了Point类的所有属性和方法。但是由于没有部署任何代码，所以这两个类完全一样，等于复制了一个Point类。</li><li>如果子类没有定义constructor方法，这个方法会被默认添加，代码如下。也就是说，不管有没有显式定义，任何一个子类都有constructor方法。</li><li>在子类的构造函数中，只有调用super之后，才可以使用this关键字，否则会报错。这是因为子类实例的构建，是基于对父类实例加工，只有super方法才能返回父类实例。</li><li>ES6 规定，在子类普通方法中通过super调用父类的方法时，方法内部的this指向当前的子类实例。</li></ul>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
